
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  00002bec  00002c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  008000e2  008000e2  00002d02  2**0
                  ALLOC
  3 .stab         0000291c  00000000  00000000  00002d04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001271  00000000  00000000  00005620  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006891  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000069d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000878a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009675  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a424  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a584  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a811  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000afdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 84 13 	jmp	0x2708	; 0x2708 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3e       	cpi	r26, 0xE2	; 226
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ee       	ldi	r26, 0xE2	; 226
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3f       	cpi	r26, 0xFA	; 250
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ec       	ldi	r26, 0xCC	; 204
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ec       	ldi	r24, 0xCC	; 204
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

uint8 pass_error = 0;



void main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	67 97       	sbiw	r28, 0x17	; 23
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*********	Timer1_Configuration structure	*********/
	Timer1_ConfigType Timer1_Configuration = {0, 1000, PRESCALER_1024, CTC};
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	9f 87       	std	Y+15, r25	; 0x0f
     b60:	8e 87       	std	Y+14, r24	; 0x0e
     b62:	eb ed       	ldi	r30, 0xDB	; 219
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	f9 8b       	std	Y+17, r31	; 0x11
     b68:	e8 8b       	std	Y+16, r30	; 0x10
     b6a:	f6 e0       	ldi	r31, 0x06	; 6
     b6c:	fa 8b       	std	Y+18, r31	; 0x12
     b6e:	e8 89       	ldd	r30, Y+16	; 0x10
     b70:	f9 89       	ldd	r31, Y+17	; 0x11
     b72:	00 80       	ld	r0, Z
     b74:	88 89       	ldd	r24, Y+16	; 0x10
     b76:	99 89       	ldd	r25, Y+17	; 0x11
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	99 8b       	std	Y+17, r25	; 0x11
     b7c:	88 8b       	std	Y+16, r24	; 0x10
     b7e:	ee 85       	ldd	r30, Y+14	; 0x0e
     b80:	ff 85       	ldd	r31, Y+15	; 0x0f
     b82:	00 82       	st	Z, r0
     b84:	8e 85       	ldd	r24, Y+14	; 0x0e
     b86:	9f 85       	ldd	r25, Y+15	; 0x0f
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9f 87       	std	Y+15, r25	; 0x0f
     b8c:	8e 87       	std	Y+14, r24	; 0x0e
     b8e:	9a 89       	ldd	r25, Y+18	; 0x12
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9a 8b       	std	Y+18, r25	; 0x12
     b94:	ea 89       	ldd	r30, Y+18	; 0x12
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <main+0x28>

	/*********	UART_Configuration structure	*********/
	UART_ConfigType	  UART_Configuration = {EIGHT_DATA_BITS, DISABLED_PARITY, ONE_STOP_BIT, 9600};
     b9a:	ce 01       	movw	r24, r28
     b9c:	07 96       	adiw	r24, 0x07	; 7
     b9e:	9c 8b       	std	Y+20, r25	; 0x14
     ba0:	8b 8b       	std	Y+19, r24	; 0x13
     ba2:	e4 ed       	ldi	r30, 0xD4	; 212
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	fe 8b       	std	Y+22, r31	; 0x16
     ba8:	ed 8b       	std	Y+21, r30	; 0x15
     baa:	f7 e0       	ldi	r31, 0x07	; 7
     bac:	ff 8b       	std	Y+23, r31	; 0x17
     bae:	ed 89       	ldd	r30, Y+21	; 0x15
     bb0:	fe 89       	ldd	r31, Y+22	; 0x16
     bb2:	00 80       	ld	r0, Z
     bb4:	8d 89       	ldd	r24, Y+21	; 0x15
     bb6:	9e 89       	ldd	r25, Y+22	; 0x16
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	9e 8b       	std	Y+22, r25	; 0x16
     bbc:	8d 8b       	std	Y+21, r24	; 0x15
     bbe:	eb 89       	ldd	r30, Y+19	; 0x13
     bc0:	fc 89       	ldd	r31, Y+20	; 0x14
     bc2:	00 82       	st	Z, r0
     bc4:	8b 89       	ldd	r24, Y+19	; 0x13
     bc6:	9c 89       	ldd	r25, Y+20	; 0x14
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	9c 8b       	std	Y+20, r25	; 0x14
     bcc:	8b 8b       	std	Y+19, r24	; 0x13
     bce:	9f 89       	ldd	r25, Y+23	; 0x17
     bd0:	91 50       	subi	r25, 0x01	; 1
     bd2:	9f 8b       	std	Y+23, r25	; 0x17
     bd4:	ef 89       	ldd	r30, Y+23	; 0x17
     bd6:	ee 23       	and	r30, r30
     bd8:	51 f7       	brne	.-44     	; 0xbae <main+0x68>

	UART_init(&UART_Configuration);	//Initialize UART
     bda:	ce 01       	movw	r24, r28
     bdc:	07 96       	adiw	r24, 0x07	; 7
     bde:	0e 94 4e 14 	call	0x289c	; 0x289c <UART_init>
	LCD_init();						//Initialize LCD
     be2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_init>

	Timer1_setCallBack(messageTimer);
     be6:	87 e6       	ldi	r24, 0x67	; 103
     be8:	96 e0       	ldi	r25, 0x06	; 6
     bea:	0e 94 3c 14 	call	0x2878	; 0x2878 <Timer1_setCallBack>
     bee:	15 c0       	rjmp	.+42     	; 0xc1a <main+0xd4>

	while(1){

		/****	Make PASS and CONFIRMATION PAASS for first time ****/
		while(pass_match == 0){				//Passwords matching result is set to zero initially to enter the while loop
			create_pass();
     bf0:	0e 94 73 06 	call	0xce6	; 0xce6 <create_pass>
/*
 * Enter the create_pass function, if passwords are matched will exit the function and send both passwords to CONTROL_ECU
 */
			send_pass(pass);
     bf4:	84 ee       	ldi	r24, 0xE4	; 228
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 87 09 	call	0x130e	; 0x130e <send_pass>
			send_confirm(confirm);
     bfc:	89 ee       	ldi	r24, 0xE9	; 233
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 b0 09 	call	0x1360	; 0x1360 <send_confirm>
			while(UART_recieveByte()!= CHECK){}	//Wait for CHECK instruction from CONTROL_ECU
     c04:	0e 94 db 14 	call	0x29b6	; 0x29b6 <UART_recieveByte>
     c08:	84 30       	cpi	r24, 0x04	; 4
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <main+0xbe>
			UART_sendByte(MC1_READY);			//Send Ready to CONTROL_ECU to receive the check result
     c0c:	85 e0       	ldi	r24, 0x05	; 5
     c0e:	0e 94 c4 14 	call	0x2988	; 0x2988 <UART_sendByte>
			pass_match = UART_recieveByte();	//Receive pass_match result (if both passwords are matched or not)
     c12:	0e 94 db 14 	call	0x29b6	; 0x29b6 <UART_recieveByte>
     c16:	80 93 ee 00 	sts	0x00EE, r24
	Timer1_setCallBack(messageTimer);

	while(1){

		/****	Make PASS and CONFIRMATION PAASS for first time ****/
		while(pass_match == 0){				//Passwords matching result is set to zero initially to enter the while loop
     c1a:	80 91 ee 00 	lds	r24, 0x00EE
     c1e:	88 23       	and	r24, r24
     c20:	39 f3       	breq	.-50     	; 0xbf0 <main+0xaa>
			/***** If both passwords are matched, will exit the loop. If not, will stay in the loop *****/
		}


		/*****	Enter the option screen to receive + or - instruction ******/
		option_screen();
     c22:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <option_screen>
		/*****	If user chose + or - and entered the password correctly, it will exit the loop *****/


		if(eeprom_match == 0 && pass_error == 3){	//Check if the password is entered wrongly 3 times
     c26:	80 91 f5 00 	lds	r24, 0x00F5
     c2a:	88 23       	and	r24, r24
     c2c:	e1 f4       	brne	.+56     	; 0xc66 <main+0x120>
     c2e:	80 91 f7 00 	lds	r24, 0x00F7
     c32:	83 30       	cpi	r24, 0x03	; 3
     c34:	c1 f4       	brne	.+48     	; 0xc66 <main+0x120>
			Timer1_init(&Timer1_Configuration);		//Initialize Timer1
     c36:	ce 01       	movw	r24, r28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	0e 94 b7 13 	call	0x276e	; 0x276e <Timer1_init>
			message_time = 0;						//Initialize counting time to zero
     c3e:	10 92 f6 00 	sts	0x00F6, r1
			LCD_clearScreen();
     c42:	0e 94 47 13 	call	0x268e	; 0x268e <LCD_clearScreen>
			LCD_moveCursor(0,0);
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
			LCD_displayString("Error");				//Display Error Message
     c4e:	80 e6       	ldi	r24, 0x60	; 96
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
			while(message_time < 60){				//Delay time using Timer1
     c56:	80 91 f6 00 	lds	r24, 0x00F6
     c5a:	8c 33       	cpi	r24, 0x3C	; 60
     c5c:	e0 f3       	brcs	.-8      	; 0xc56 <main+0x110>
			}
			Timer1_deInit();						//Deactivate Timer1
     c5e:	0e 94 20 14 	call	0x2840	; 0x2840 <Timer1_deInit>
			pass_error = 0;							//Reset Password error variable
     c62:	10 92 f7 00 	sts	0x00F7, r1
		}

		if(eeprom_match == 1 && option == '+'){
     c66:	80 91 f5 00 	lds	r24, 0x00F5
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	09 f5       	brne	.+66     	; 0xcb0 <main+0x16a>
     c6e:	80 91 ef 00 	lds	r24, 0x00EF
     c72:	8b 32       	cpi	r24, 0x2B	; 43
     c74:	e9 f4       	brne	.+58     	; 0xcb0 <main+0x16a>
			Timer1_init(&Timer1_Configuration);		//Initialize Timer1
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	0e 94 b7 13 	call	0x276e	; 0x276e <Timer1_init>
			message_time = 0;						//Reset counting time to zero
     c7e:	10 92 f6 00 	sts	0x00F6, r1
			LCD_clearScreen();
     c82:	0e 94 47 13 	call	0x268e	; 0x268e <LCD_clearScreen>
			Door_Unlocking();						//Display "Door Unocking"
     c86:	0e 94 78 09 	call	0x12f0	; 0x12f0 <Door_Unlocking>
			while(message_time < 18){				//Delay time using Timer1
     c8a:	80 91 f6 00 	lds	r24, 0x00F6
     c8e:	82 31       	cpi	r24, 0x12	; 18
     c90:	e0 f3       	brcs	.-8      	; 0xc8a <main+0x144>
			}
			message_time = 0;						//Reset counting time to zero
     c92:	10 92 f6 00 	sts	0x00F6, r1
			LCD_clearScreen();
     c96:	0e 94 47 13 	call	0x268e	; 0x268e <LCD_clearScreen>
			Door_Locking();							//Display "Door Locking"
     c9a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <Door_Locking>
			while(message_time < 15){				//Delay time using Timer1
     c9e:	80 91 f6 00 	lds	r24, 0x00F6
     ca2:	8f 30       	cpi	r24, 0x0F	; 15
     ca4:	e0 f3       	brcs	.-8      	; 0xc9e <main+0x158>
			}
			LCD_clearScreen();
     ca6:	0e 94 47 13 	call	0x268e	; 0x268e <LCD_clearScreen>
			Timer1_deInit();						//Deactivate Timer1
     caa:	0e 94 20 14 	call	0x2840	; 0x2840 <Timer1_deInit>
     cae:	0c c0       	rjmp	.+24     	; 0xcc8 <main+0x182>
		}
		else if(eeprom_match == 1 && option == '-'){
     cb0:	80 91 f5 00 	lds	r24, 0x00F5
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	41 f4       	brne	.+16     	; 0xcc8 <main+0x182>
     cb8:	80 91 ef 00 	lds	r24, 0x00EF
     cbc:	8d 32       	cpi	r24, 0x2D	; 45
     cbe:	21 f4       	brne	.+8      	; 0xcc8 <main+0x182>
			pass_match = 0;			/***** Reset pass_match to go back to create_pass function *****/
     cc0:	10 92 ee 00 	sts	0x00EE, r1
			LCD_clearScreen();
     cc4:	0e 94 47 13 	call	0x268e	; 0x268e <LCD_clearScreen>
		}
		eeprom_match = 0;			/***** Reset eeprom_match to go back to option screen *****/
     cc8:	10 92 f5 00 	sts	0x00F5, r1
     ccc:	a6 cf       	rjmp	.-180    	; 0xc1a <main+0xd4>

00000cce <messageTimer>:
	}
}
/***********************************  Function Definition  ***************************************/

void messageTimer(void){	//SET CALLBACK Function
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
	message_time++;			//Increment number of seconds every time interrupt occurs and set callback function is called
     cd6:	80 91 f6 00 	lds	r24, 0x00F6
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	80 93 f6 00 	sts	0x00F6, r24
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <create_pass>:

void create_pass(void){
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	6c 97       	sbiw	r28, 0x1c	; 28
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
	key = 0;
     cfa:	10 92 e2 00 	sts	0x00E2, r1
	counter = 0;
     cfe:	10 92 e3 00 	sts	0x00E3, r1
	LCD_moveCursor(0,0);
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
	LCD_displayString("Plz enter pass:");	//Display Enter Password to create new password
     d0a:	86 e6       	ldi	r24, 0x66	; 102
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
	LCD_moveCursor(1,0);
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
     d1a:	8c c0       	rjmp	.+280    	; 0xe34 <create_pass+0x14e>
	while(key != '%'){						// '%' is used as the enter key
		key = KEYPAD_getPressedKey();		//Wait for a key to be pressed
     d1c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <KEYPAD_getPressedKey>
     d20:	80 93 e2 00 	sts	0x00E2, r24
		if(key != '%'){
     d24:	80 91 e2 00 	lds	r24, 0x00E2
     d28:	85 32       	cpi	r24, 0x25	; 37
     d2a:	69 f0       	breq	.+26     	; 0xd46 <create_pass+0x60>
			LCD_displayCharacter('*');		//Display '*' every time a key is pressed
     d2c:	8a e2       	ldi	r24, 0x2A	; 42
     d2e:	0e 94 b1 10 	call	0x2162	; 0x2162 <LCD_displayCharacter>
			pass[counter] = key;			//Store the value in pass[] array
     d32:	80 91 e3 00 	lds	r24, 0x00E3
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	20 91 e2 00 	lds	r18, 0x00E2
     d3e:	fc 01       	movw	r30, r24
     d40:	ec 51       	subi	r30, 0x1C	; 28
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	20 83       	st	Z, r18
		}
		counter++;							//Increment counter to store the whole password
     d46:	80 91 e3 00 	lds	r24, 0x00E3
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
     d4c:	80 93 e3 00 	sts	0x00E3, r24
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	aa ef       	ldi	r26, 0xFA	; 250
     d56:	b3 e4       	ldi	r27, 0x43	; 67
     d58:	89 8f       	std	Y+25, r24	; 0x19
     d5a:	9a 8f       	std	Y+26, r25	; 0x1a
     d5c:	ab 8f       	std	Y+27, r26	; 0x1b
     d5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d60:	69 8d       	ldd	r22, Y+25	; 0x19
     d62:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	4a e7       	ldi	r20, 0x7A	; 122
     d6e:	53 e4       	ldi	r21, 0x43	; 67
     d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	8d 8b       	std	Y+21, r24	; 0x15
     d7a:	9e 8b       	std	Y+22, r25	; 0x16
     d7c:	af 8b       	std	Y+23, r26	; 0x17
     d7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d80:	6d 89       	ldd	r22, Y+21	; 0x15
     d82:	7e 89       	ldd	r23, Y+22	; 0x16
     d84:	8f 89       	ldd	r24, Y+23	; 0x17
     d86:	98 8d       	ldd	r25, Y+24	; 0x18
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e8       	ldi	r20, 0x80	; 128
     d8e:	5f e3       	ldi	r21, 0x3F	; 63
     d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d94:	88 23       	and	r24, r24
     d96:	2c f4       	brge	.+10     	; 0xda2 <create_pass+0xbc>
		__ticks = 1;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9c 8b       	std	Y+20, r25	; 0x14
     d9e:	8b 8b       	std	Y+19, r24	; 0x13
     da0:	3f c0       	rjmp	.+126    	; 0xe20 <create_pass+0x13a>
	else if (__tmp > 65535)
     da2:	6d 89       	ldd	r22, Y+21	; 0x15
     da4:	7e 89       	ldd	r23, Y+22	; 0x16
     da6:	8f 89       	ldd	r24, Y+23	; 0x17
     da8:	98 8d       	ldd	r25, Y+24	; 0x18
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	3f ef       	ldi	r19, 0xFF	; 255
     dae:	4f e7       	ldi	r20, 0x7F	; 127
     db0:	57 e4       	ldi	r21, 0x47	; 71
     db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     db6:	18 16       	cp	r1, r24
     db8:	4c f5       	brge	.+82     	; 0xe0c <create_pass+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dba:	69 8d       	ldd	r22, Y+25	; 0x19
     dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e2       	ldi	r20, 0x20	; 32
     dc8:	51 e4       	ldi	r21, 0x41	; 65
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	bc 01       	movw	r22, r24
     dd4:	cd 01       	movw	r24, r26
     dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	9c 8b       	std	Y+20, r25	; 0x14
     de0:	8b 8b       	std	Y+19, r24	; 0x13
     de2:	0f c0       	rjmp	.+30     	; 0xe02 <create_pass+0x11c>
     de4:	89 e1       	ldi	r24, 0x19	; 25
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9a 8b       	std	Y+18, r25	; 0x12
     dea:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dec:	89 89       	ldd	r24, Y+17	; 0x11
     dee:	9a 89       	ldd	r25, Y+18	; 0x12
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <create_pass+0x10a>
     df4:	9a 8b       	std	Y+18, r25	; 0x12
     df6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df8:	8b 89       	ldd	r24, Y+19	; 0x13
     dfa:	9c 89       	ldd	r25, Y+20	; 0x14
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9c 8b       	std	Y+20, r25	; 0x14
     e00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	8b 89       	ldd	r24, Y+19	; 0x13
     e04:	9c 89       	ldd	r25, Y+20	; 0x14
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	69 f7       	brne	.-38     	; 0xde4 <create_pass+0xfe>
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <create_pass+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0c:	6d 89       	ldd	r22, Y+21	; 0x15
     e0e:	7e 89       	ldd	r23, Y+22	; 0x16
     e10:	8f 89       	ldd	r24, Y+23	; 0x17
     e12:	98 8d       	ldd	r25, Y+24	; 0x18
     e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9c 8b       	std	Y+20, r25	; 0x14
     e1e:	8b 8b       	std	Y+19, r24	; 0x13
     e20:	8b 89       	ldd	r24, Y+19	; 0x13
     e22:	9c 89       	ldd	r25, Y+20	; 0x14
     e24:	98 8b       	std	Y+16, r25	; 0x10
     e26:	8f 87       	std	Y+15, r24	; 0x0f
     e28:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2a:	98 89       	ldd	r25, Y+16	; 0x10
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <create_pass+0x146>
     e30:	98 8b       	std	Y+16, r25	; 0x10
     e32:	8f 87       	std	Y+15, r24	; 0x0f
	key = 0;
	counter = 0;
	LCD_moveCursor(0,0);
	LCD_displayString("Plz enter pass:");	//Display Enter Password to create new password
	LCD_moveCursor(1,0);
	while(key != '%'){						// '%' is used as the enter key
     e34:	80 91 e2 00 	lds	r24, 0x00E2
     e38:	85 32       	cpi	r24, 0x25	; 37
     e3a:	09 f0       	breq	.+2      	; 0xe3e <create_pass+0x158>
     e3c:	6f cf       	rjmp	.-290    	; 0xd1c <create_pass+0x36>
			pass[counter] = key;			//Store the value in pass[] array
		}
		counter++;							//Increment counter to store the whole password
		_delay_ms(500);
	}
	key = 0;
     e3e:	10 92 e2 00 	sts	0x00E2, r1
	counter = 0;
     e42:	10 92 e3 00 	sts	0x00E3, r1
	LCD_clearScreen();
     e46:	0e 94 47 13 	call	0x268e	; 0x268e <LCD_clearScreen>
	LCD_moveCursor(0,0);
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
	LCD_displayString("Plz re-enter the");	//Display re enter password to take confirmation password
     e52:	86 e7       	ldi	r24, 0x76	; 118
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
	LCD_moveCursor(1,0);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
	LCD_displayString("same pass:");
     e62:	87 e8       	ldi	r24, 0x87	; 135
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
	LCD_moveCursor(1,11);
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	6b e0       	ldi	r22, 0x0B	; 11
     e6e:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
     e72:	8c c0       	rjmp	.+280    	; 0xf8c <create_pass+0x2a6>
	while(key != '%'){
		key = KEYPAD_getPressedKey();
     e74:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <KEYPAD_getPressedKey>
     e78:	80 93 e2 00 	sts	0x00E2, r24
		if(key != '%'){
     e7c:	80 91 e2 00 	lds	r24, 0x00E2
     e80:	85 32       	cpi	r24, 0x25	; 37
     e82:	69 f0       	breq	.+26     	; 0xe9e <create_pass+0x1b8>
			LCD_displayCharacter('*');
     e84:	8a e2       	ldi	r24, 0x2A	; 42
     e86:	0e 94 b1 10 	call	0x2162	; 0x2162 <LCD_displayCharacter>
			confirm[counter] = key;			//Store the confirmation password in confirm[] array
     e8a:	80 91 e3 00 	lds	r24, 0x00E3
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	20 91 e2 00 	lds	r18, 0x00E2
     e96:	fc 01       	movw	r30, r24
     e98:	e7 51       	subi	r30, 0x17	; 23
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	20 83       	st	Z, r18
		}
		counter++;
     e9e:	80 91 e3 00 	lds	r24, 0x00E3
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	80 93 e3 00 	sts	0x00E3, r24
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	aa ef       	ldi	r26, 0xFA	; 250
     eae:	b3 e4       	ldi	r27, 0x43	; 67
     eb0:	8b 87       	std	Y+11, r24	; 0x0b
     eb2:	9c 87       	std	Y+12, r25	; 0x0c
     eb4:	ad 87       	std	Y+13, r26	; 0x0d
     eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eba:	7c 85       	ldd	r23, Y+12	; 0x0c
     ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	4a e7       	ldi	r20, 0x7A	; 122
     ec6:	53 e4       	ldi	r21, 0x43	; 67
     ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	8f 83       	std	Y+7, r24	; 0x07
     ed2:	98 87       	std	Y+8, r25	; 0x08
     ed4:	a9 87       	std	Y+9, r26	; 0x09
     ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed8:	6f 81       	ldd	r22, Y+7	; 0x07
     eda:	78 85       	ldd	r23, Y+8	; 0x08
     edc:	89 85       	ldd	r24, Y+9	; 0x09
     ede:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e8       	ldi	r20, 0x80	; 128
     ee6:	5f e3       	ldi	r21, 0x3F	; 63
     ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eec:	88 23       	and	r24, r24
     eee:	2c f4       	brge	.+10     	; 0xefa <create_pass+0x214>
		__ticks = 1;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9e 83       	std	Y+6, r25	; 0x06
     ef6:	8d 83       	std	Y+5, r24	; 0x05
     ef8:	3f c0       	rjmp	.+126    	; 0xf78 <create_pass+0x292>
	else if (__tmp > 65535)
     efa:	6f 81       	ldd	r22, Y+7	; 0x07
     efc:	78 85       	ldd	r23, Y+8	; 0x08
     efe:	89 85       	ldd	r24, Y+9	; 0x09
     f00:	9a 85       	ldd	r25, Y+10	; 0x0a
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	3f ef       	ldi	r19, 0xFF	; 255
     f06:	4f e7       	ldi	r20, 0x7F	; 127
     f08:	57 e4       	ldi	r21, 0x47	; 71
     f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0e:	18 16       	cp	r1, r24
     f10:	4c f5       	brge	.+82     	; 0xf64 <create_pass+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f12:	6b 85       	ldd	r22, Y+11	; 0x0b
     f14:	7c 85       	ldd	r23, Y+12	; 0x0c
     f16:	8d 85       	ldd	r24, Y+13	; 0x0d
     f18:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e2       	ldi	r20, 0x20	; 32
     f20:	51 e4       	ldi	r21, 0x41	; 65
     f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	bc 01       	movw	r22, r24
     f2c:	cd 01       	movw	r24, r26
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <create_pass+0x274>
     f3c:	89 e1       	ldi	r24, 0x19	; 25
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9c 83       	std	Y+4, r25	; 0x04
     f42:	8b 83       	std	Y+3, r24	; 0x03
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <create_pass+0x262>
     f4c:	9c 83       	std	Y+4, r25	; 0x04
     f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	69 f7       	brne	.-38     	; 0xf3c <create_pass+0x256>
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <create_pass+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f64:	6f 81       	ldd	r22, Y+7	; 0x07
     f66:	78 85       	ldd	r23, Y+8	; 0x08
     f68:	89 85       	ldd	r24, Y+9	; 0x09
     f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	9e 83       	std	Y+6, r25	; 0x06
     f76:	8d 83       	std	Y+5, r24	; 0x05
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <create_pass+0x29e>
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
	LCD_moveCursor(0,0);
	LCD_displayString("Plz re-enter the");	//Display re enter password to take confirmation password
	LCD_moveCursor(1,0);
	LCD_displayString("same pass:");
	LCD_moveCursor(1,11);
	while(key != '%'){
     f8c:	80 91 e2 00 	lds	r24, 0x00E2
     f90:	85 32       	cpi	r24, 0x25	; 37
     f92:	09 f0       	breq	.+2      	; 0xf96 <create_pass+0x2b0>
     f94:	6f cf       	rjmp	.-290    	; 0xe74 <create_pass+0x18e>
			confirm[counter] = key;			//Store the confirmation password in confirm[] array
		}
		counter++;
		_delay_ms(500);
	}
}
     f96:	6c 96       	adiw	r28, 0x1c	; 28
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <option_screen>:

void option_screen(void){	/*** Allow user to choose operation and asks him to enter the password then it will check on it ***/
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	6c 97       	sbiw	r28, 0x1c	; 28
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
	pass_error = 0;			//Initialize pass_error to zero
     fbc:	10 92 f7 00 	sts	0x00F7, r1
	LCD_clearScreen();
     fc0:	0e 94 47 13 	call	0x268e	; 0x268e <LCD_clearScreen>
	LCD_moveCursor(0,0);
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
	LCD_displayString("+:Open the Door");
     fcc:	82 e9       	ldi	r24, 0x92	; 146
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
	LCD_moveCursor(1,0);
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
	LCD_displayString("-:Change Pass");
     fdc:	82 ea       	ldi	r24, 0xA2	; 162
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
	key = KEYPAD_getPressedKey();				//Wait for key to be pressed
     fe4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <KEYPAD_getPressedKey>
     fe8:	80 93 e2 00 	sts	0x00E2, r24
	option = key;								//Store the value of key in option variable to be sent later to CONTROL_ECU
     fec:	80 91 e2 00 	lds	r24, 0x00E2
     ff0:	80 93 ef 00 	sts	0x00EF, r24
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	aa ef       	ldi	r26, 0xFA	; 250
     ffa:	b3 e4       	ldi	r27, 0x43	; 67
     ffc:	89 8f       	std	Y+25, r24	; 0x19
     ffe:	9a 8f       	std	Y+26, r25	; 0x1a
    1000:	ab 8f       	std	Y+27, r26	; 0x1b
    1002:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1004:	69 8d       	ldd	r22, Y+25	; 0x19
    1006:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1008:	8b 8d       	ldd	r24, Y+27	; 0x1b
    100a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	4a e7       	ldi	r20, 0x7A	; 122
    1012:	53 e4       	ldi	r21, 0x43	; 67
    1014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	8d 8b       	std	Y+21, r24	; 0x15
    101e:	9e 8b       	std	Y+22, r25	; 0x16
    1020:	af 8b       	std	Y+23, r26	; 0x17
    1022:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1024:	6d 89       	ldd	r22, Y+21	; 0x15
    1026:	7e 89       	ldd	r23, Y+22	; 0x16
    1028:	8f 89       	ldd	r24, Y+23	; 0x17
    102a:	98 8d       	ldd	r25, Y+24	; 0x18
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e8       	ldi	r20, 0x80	; 128
    1032:	5f e3       	ldi	r21, 0x3F	; 63
    1034:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1038:	88 23       	and	r24, r24
    103a:	2c f4       	brge	.+10     	; 0x1046 <option_screen+0x9e>
		__ticks = 1;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	9c 8b       	std	Y+20, r25	; 0x14
    1042:	8b 8b       	std	Y+19, r24	; 0x13
    1044:	3f c0       	rjmp	.+126    	; 0x10c4 <option_screen+0x11c>
	else if (__tmp > 65535)
    1046:	6d 89       	ldd	r22, Y+21	; 0x15
    1048:	7e 89       	ldd	r23, Y+22	; 0x16
    104a:	8f 89       	ldd	r24, Y+23	; 0x17
    104c:	98 8d       	ldd	r25, Y+24	; 0x18
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	3f ef       	ldi	r19, 0xFF	; 255
    1052:	4f e7       	ldi	r20, 0x7F	; 127
    1054:	57 e4       	ldi	r21, 0x47	; 71
    1056:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    105a:	18 16       	cp	r1, r24
    105c:	4c f5       	brge	.+82     	; 0x10b0 <option_screen+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105e:	69 8d       	ldd	r22, Y+25	; 0x19
    1060:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1062:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1064:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e2       	ldi	r20, 0x20	; 32
    106c:	51 e4       	ldi	r21, 0x41	; 65
    106e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9c 8b       	std	Y+20, r25	; 0x14
    1084:	8b 8b       	std	Y+19, r24	; 0x13
    1086:	0f c0       	rjmp	.+30     	; 0x10a6 <option_screen+0xfe>
    1088:	89 e1       	ldi	r24, 0x19	; 25
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9a 8b       	std	Y+18, r25	; 0x12
    108e:	89 8b       	std	Y+17, r24	; 0x11
    1090:	89 89       	ldd	r24, Y+17	; 0x11
    1092:	9a 89       	ldd	r25, Y+18	; 0x12
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <option_screen+0xec>
    1098:	9a 8b       	std	Y+18, r25	; 0x12
    109a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109c:	8b 89       	ldd	r24, Y+19	; 0x13
    109e:	9c 89       	ldd	r25, Y+20	; 0x14
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	9c 8b       	std	Y+20, r25	; 0x14
    10a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a6:	8b 89       	ldd	r24, Y+19	; 0x13
    10a8:	9c 89       	ldd	r25, Y+20	; 0x14
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	69 f7       	brne	.-38     	; 0x1088 <option_screen+0xe0>
    10ae:	14 c0       	rjmp	.+40     	; 0x10d8 <option_screen+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b0:	6d 89       	ldd	r22, Y+21	; 0x15
    10b2:	7e 89       	ldd	r23, Y+22	; 0x16
    10b4:	8f 89       	ldd	r24, Y+23	; 0x17
    10b6:	98 8d       	ldd	r25, Y+24	; 0x18
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	9c 8b       	std	Y+20, r25	; 0x14
    10c2:	8b 8b       	std	Y+19, r24	; 0x13
    10c4:	8b 89       	ldd	r24, Y+19	; 0x13
    10c6:	9c 89       	ldd	r25, Y+20	; 0x14
    10c8:	98 8b       	std	Y+16, r25	; 0x10
    10ca:	8f 87       	std	Y+15, r24	; 0x0f
    10cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ce:	98 89       	ldd	r25, Y+16	; 0x10
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <option_screen+0x128>
    10d4:	98 8b       	std	Y+16, r25	; 0x10
    10d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	UART_sendByte(OPTION);						// Prepare CONTROL_ECU for option instruction
    10d8:	86 e0       	ldi	r24, 0x06	; 6
    10da:	0e 94 c4 14 	call	0x2988	; 0x2988 <UART_sendByte>
	while(UART_recieveByte() != MC2_READY){}	// Wait for CONTROL_ECU to be ready
    10de:	0e 94 db 14 	call	0x29b6	; 0x29b6 <UART_recieveByte>
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	e1 f7       	brne	.-8      	; 0x10de <option_screen+0x136>
	UART_sendByte(option);						// Send the option
    10e6:	80 91 ef 00 	lds	r24, 0x00EF
    10ea:	0e 94 c4 14 	call	0x2988	; 0x2988 <UART_sendByte>

	if(key == '+' || key == '-'){
    10ee:	80 91 e2 00 	lds	r24, 0x00E2
    10f2:	8b 32       	cpi	r24, 0x2B	; 43
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <option_screen+0x150>
    10f6:	db c0       	rjmp	.+438    	; 0x12ae <option_screen+0x306>
    10f8:	80 91 e2 00 	lds	r24, 0x00E2
    10fc:	8d 32       	cpi	r24, 0x2D	; 45
    10fe:	09 f0       	breq	.+2      	; 0x1102 <option_screen+0x15a>
    1100:	df c0       	rjmp	.+446    	; 0x12c0 <option_screen+0x318>
    1102:	d5 c0       	rjmp	.+426    	; 0x12ae <option_screen+0x306>
		while(eeprom_match == 0 && pass_error < 3 ){//Stay in the while loop if the password is entered wrongly 3 times
			key = 0;								//Initialize key to zero
    1104:	10 92 e2 00 	sts	0x00E2, r1
			counter = 0;							//Initialize counter to zero
    1108:	10 92 e3 00 	sts	0x00E3, r1
			LCD_clearScreen();
    110c:	0e 94 47 13 	call	0x268e	; 0x268e <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
			LCD_displayString("Plz enter pass:");	//Asks user to enter password to compare it with the one stored in EEPROM
    1118:	86 e6       	ldi	r24, 0x66	; 102
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
			LCD_moveCursor(1,0);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
    1128:	8c c0       	rjmp	.+280    	; 0x1242 <option_screen+0x29a>
			while(key != '%'){
				key = KEYPAD_getPressedKey();		//Wait for key to be pressed
    112a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <KEYPAD_getPressedKey>
    112e:	80 93 e2 00 	sts	0x00E2, r24
				if(key != '%'){
    1132:	80 91 e2 00 	lds	r24, 0x00E2
    1136:	85 32       	cpi	r24, 0x25	; 37
    1138:	69 f0       	breq	.+26     	; 0x1154 <option_screen+0x1ac>
					LCD_displayCharacter('*');		//Display '*' instead of the key pressed
    113a:	8a e2       	ldi	r24, 0x2A	; 42
    113c:	0e 94 b1 10 	call	0x2162	; 0x2162 <LCD_displayCharacter>

				//Store the key pressed in the check_pass[] array to be sent to CONTROL_ECU to compare it with Pass in EEPROM
					check_pass[counter] = key;
    1140:	80 91 e3 00 	lds	r24, 0x00E3
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	20 91 e2 00 	lds	r18, 0x00E2
    114c:	fc 01       	movw	r30, r24
    114e:	e0 51       	subi	r30, 0x10	; 16
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	20 83       	st	Z, r18
				}
				counter++;
    1154:	80 91 e3 00 	lds	r24, 0x00E3
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	80 93 e3 00 	sts	0x00E3, r24
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	aa ef       	ldi	r26, 0xFA	; 250
    1164:	b3 e4       	ldi	r27, 0x43	; 67
    1166:	8b 87       	std	Y+11, r24	; 0x0b
    1168:	9c 87       	std	Y+12, r25	; 0x0c
    116a:	ad 87       	std	Y+13, r26	; 0x0d
    116c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    116e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1170:	7c 85       	ldd	r23, Y+12	; 0x0c
    1172:	8d 85       	ldd	r24, Y+13	; 0x0d
    1174:	9e 85       	ldd	r25, Y+14	; 0x0e
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	4a e7       	ldi	r20, 0x7A	; 122
    117c:	53 e4       	ldi	r21, 0x43	; 67
    117e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	8f 83       	std	Y+7, r24	; 0x07
    1188:	98 87       	std	Y+8, r25	; 0x08
    118a:	a9 87       	std	Y+9, r26	; 0x09
    118c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    118e:	6f 81       	ldd	r22, Y+7	; 0x07
    1190:	78 85       	ldd	r23, Y+8	; 0x08
    1192:	89 85       	ldd	r24, Y+9	; 0x09
    1194:	9a 85       	ldd	r25, Y+10	; 0x0a
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e8       	ldi	r20, 0x80	; 128
    119c:	5f e3       	ldi	r21, 0x3F	; 63
    119e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a2:	88 23       	and	r24, r24
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <option_screen+0x208>
		__ticks = 1;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	3f c0       	rjmp	.+126    	; 0x122e <option_screen+0x286>
	else if (__tmp > 65535)
    11b0:	6f 81       	ldd	r22, Y+7	; 0x07
    11b2:	78 85       	ldd	r23, Y+8	; 0x08
    11b4:	89 85       	ldd	r24, Y+9	; 0x09
    11b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	3f ef       	ldi	r19, 0xFF	; 255
    11bc:	4f e7       	ldi	r20, 0x7F	; 127
    11be:	57 e4       	ldi	r21, 0x47	; 71
    11c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c4:	18 16       	cp	r1, r24
    11c6:	4c f5       	brge	.+82     	; 0x121a <option_screen+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    11cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e2       	ldi	r20, 0x20	; 32
    11d6:	51 e4       	ldi	r21, 0x41	; 65
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	9e 83       	std	Y+6, r25	; 0x06
    11ee:	8d 83       	std	Y+5, r24	; 0x05
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <option_screen+0x268>
    11f2:	89 e1       	ldi	r24, 0x19	; 25
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9c 83       	std	Y+4, r25	; 0x04
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <option_screen+0x256>
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	9e 83       	std	Y+6, r25	; 0x06
    120e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	69 f7       	brne	.-38     	; 0x11f2 <option_screen+0x24a>
    1218:	14 c0       	rjmp	.+40     	; 0x1242 <option_screen+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121a:	6f 81       	ldd	r22, Y+7	; 0x07
    121c:	78 85       	ldd	r23, Y+8	; 0x08
    121e:	89 85       	ldd	r24, Y+9	; 0x09
    1220:	9a 85       	ldd	r25, Y+10	; 0x0a
    1222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	9e 83       	std	Y+6, r25	; 0x06
    122c:	8d 83       	std	Y+5, r24	; 0x05
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	9a 81       	ldd	r25, Y+2	; 0x02
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <option_screen+0x292>
    123e:	9a 83       	std	Y+2, r25	; 0x02
    1240:	89 83       	std	Y+1, r24	; 0x01
			counter = 0;							//Initialize counter to zero
			LCD_clearScreen();
			LCD_moveCursor(0,0);
			LCD_displayString("Plz enter pass:");	//Asks user to enter password to compare it with the one stored in EEPROM
			LCD_moveCursor(1,0);
			while(key != '%'){
    1242:	80 91 e2 00 	lds	r24, 0x00E2
    1246:	85 32       	cpi	r24, 0x25	; 37
    1248:	09 f0       	breq	.+2      	; 0x124c <option_screen+0x2a4>
    124a:	6f cf       	rjmp	.-290    	; 0x112a <option_screen+0x182>
				}
				counter++;
				_delay_ms(500);
			}

			while(UART_recieveByte() != MC2_READY){}	// Wait for the CONTROL_ECU to be ready
    124c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <UART_recieveByte>
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	e1 f7       	brne	.-8      	; 0x124c <option_screen+0x2a4>
			UART_sendByte(PASS_READY);					// Prepare CONTROL_ECU for the check_pass
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	0e 94 c4 14 	call	0x2988	; 0x2988 <UART_sendByte>
			while(UART_recieveByte() != MC2_READY){}	// Wait for the CONTROL_ECU to be ready
    125a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <UART_recieveByte>
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	e1 f7       	brne	.-8      	; 0x125a <option_screen+0x2b2>

			for(counter = 0; counter<5; counter++){		// Send the check_pass
    1262:	10 92 e3 00 	sts	0x00E3, r1
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <option_screen+0x2de>
				UART_sendByte(check_pass[counter]);
    1268:	80 91 e3 00 	lds	r24, 0x00E3
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	fc 01       	movw	r30, r24
    1272:	e0 51       	subi	r30, 0x10	; 16
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	80 81       	ld	r24, Z
    1278:	0e 94 c4 14 	call	0x2988	; 0x2988 <UART_sendByte>

			while(UART_recieveByte() != MC2_READY){}	// Wait for the CONTROL_ECU to be ready
			UART_sendByte(PASS_READY);					// Prepare CONTROL_ECU for the check_pass
			while(UART_recieveByte() != MC2_READY){}	// Wait for the CONTROL_ECU to be ready

			for(counter = 0; counter<5; counter++){		// Send the check_pass
    127c:	80 91 e3 00 	lds	r24, 0x00E3
    1280:	8f 5f       	subi	r24, 0xFF	; 255
    1282:	80 93 e3 00 	sts	0x00E3, r24
    1286:	80 91 e3 00 	lds	r24, 0x00E3
    128a:	85 30       	cpi	r24, 0x05	; 5
    128c:	68 f3       	brcs	.-38     	; 0x1268 <option_screen+0x2c0>
				UART_sendByte(check_pass[counter]);
			}
			while(UART_recieveByte()!= CHECK){}			// Wait for the CHECK instruction
    128e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <UART_recieveByte>
    1292:	84 30       	cpi	r24, 0x04	; 4
    1294:	e1 f7       	brne	.-8      	; 0x128e <option_screen+0x2e6>
			UART_sendByte(MC1_READY);					// Sending ready to receive the match result from CONTROL_ECU
    1296:	85 e0       	ldi	r24, 0x05	; 5
    1298:	0e 94 c4 14 	call	0x2988	; 0x2988 <UART_sendByte>
			eeprom_match = UART_recieveByte();
    129c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <UART_recieveByte>
    12a0:	80 93 f5 00 	sts	0x00F5, r24
			/*
			 * Receive the result of password matching, if the password matches the PASS in EEPROM the operation will be carried
			 * if not, it will stay in the loop and asks the user to enter the password again for 3 times
			 */
			pass_error++;	//Increment the pass_error if the password is entered wrongly
    12a4:	80 91 f7 00 	lds	r24, 0x00F7
    12a8:	8f 5f       	subi	r24, 0xFF	; 255
    12aa:	80 93 f7 00 	sts	0x00F7, r24
	UART_sendByte(OPTION);						// Prepare CONTROL_ECU for option instruction
	while(UART_recieveByte() != MC2_READY){}	// Wait for CONTROL_ECU to be ready
	UART_sendByte(option);						// Send the option

	if(key == '+' || key == '-'){
		while(eeprom_match == 0 && pass_error < 3 ){//Stay in the while loop if the password is entered wrongly 3 times
    12ae:	80 91 f5 00 	lds	r24, 0x00F5
    12b2:	88 23       	and	r24, r24
    12b4:	29 f4       	brne	.+10     	; 0x12c0 <option_screen+0x318>
    12b6:	80 91 f7 00 	lds	r24, 0x00F7
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	08 f4       	brcc	.+2      	; 0x12c0 <option_screen+0x318>
    12be:	22 cf       	rjmp	.-444    	; 0x1104 <option_screen+0x15c>
			 * if not, it will stay in the loop and asks the user to enter the password again for 3 times
			 */
			pass_error++;	//Increment the pass_error if the password is entered wrongly
		}
	}
}
    12c0:	6c 96       	adiw	r28, 0x1c	; 28
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <Door_Locking>:
void Door_Locking(void){
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(0,0);
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
	LCD_displayString("Door Locking");	/***** Display "Door Locking" *****/
    12e2:	80 eb       	ldi	r24, 0xB0	; 176
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <Door_Unlocking>:
void Door_Unlocking(void){
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(0,0);
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
	LCD_displayString("Door Unlocking");/***** Display "Door Unlocking" *****/
    1300:	8d eb       	ldi	r24, 0xBD	; 189
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <send_pass>:
void send_pass(uint8 arr[]){
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <send_pass+0x6>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(PASS_READY);		/*
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	0e 94 c4 14 	call	0x2988	; 0x2988 <UART_sendByte>
	 	 	 	 	 	 	 	 	 *Send PASS_READY instruction to CONTROL_ECU to prepare it to receive the PASS
	 	 	 	 	 	 	 	 	 * to be stored later in EEPROM */
	while(UART_recieveByte() != MC2_READY){}	//Wait for CONTROL_ECU to be ready
    1322:	0e 94 db 14 	call	0x29b6	; 0x29b6 <UART_recieveByte>
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	e1 f7       	brne	.-8      	; 0x1322 <send_pass+0x14>
	for(counter = 0; counter<5; counter++){		//Send the Password
    132a:	10 92 e3 00 	sts	0x00E3, r1
    132e:	0f c0       	rjmp	.+30     	; 0x134e <send_pass+0x40>
		UART_sendByte(pass[counter]);
    1330:	80 91 e3 00 	lds	r24, 0x00E3
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	fc 01       	movw	r30, r24
    133a:	ec 51       	subi	r30, 0x1C	; 28
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	80 81       	ld	r24, Z
    1340:	0e 94 c4 14 	call	0x2988	; 0x2988 <UART_sendByte>
void send_pass(uint8 arr[]){
	UART_sendByte(PASS_READY);		/*
	 	 	 	 	 	 	 	 	 *Send PASS_READY instruction to CONTROL_ECU to prepare it to receive the PASS
	 	 	 	 	 	 	 	 	 * to be stored later in EEPROM */
	while(UART_recieveByte() != MC2_READY){}	//Wait for CONTROL_ECU to be ready
	for(counter = 0; counter<5; counter++){		//Send the Password
    1344:	80 91 e3 00 	lds	r24, 0x00E3
    1348:	8f 5f       	subi	r24, 0xFF	; 255
    134a:	80 93 e3 00 	sts	0x00E3, r24
    134e:	80 91 e3 00 	lds	r24, 0x00E3
    1352:	85 30       	cpi	r24, 0x05	; 5
    1354:	68 f3       	brcs	.-38     	; 0x1330 <send_pass+0x22>
		UART_sendByte(pass[counter]);
	}
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <send_confirm>:
void send_confirm(uint8 arr[]){
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <send_confirm+0x6>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(CONFIRM_READY);	/*
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	0e 94 c4 14 	call	0x2988	; 0x2988 <UART_sendByte>
	 	 	 	 	 	 	 	 	 *Send PASS_READY instruction to CONTROL_ECU to prepare it to receive the CONFIRMATION PASS
	 	 	 	 	 	 	 	 	 * to be stored later in EEPROM */
	while(UART_recieveByte() != MC2_READY){}	//Wait for CONTROL_ECU to be ready
    1374:	0e 94 db 14 	call	0x29b6	; 0x29b6 <UART_recieveByte>
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	e1 f7       	brne	.-8      	; 0x1374 <send_confirm+0x14>
	for(counter = 0; counter<5; counter++){		//Send the Confirmation Password
    137c:	10 92 e3 00 	sts	0x00E3, r1
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <send_confirm+0x40>
		UART_sendByte(confirm[counter]);
    1382:	80 91 e3 00 	lds	r24, 0x00E3
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	fc 01       	movw	r30, r24
    138c:	e7 51       	subi	r30, 0x17	; 23
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	80 81       	ld	r24, Z
    1392:	0e 94 c4 14 	call	0x2988	; 0x2988 <UART_sendByte>
void send_confirm(uint8 arr[]){
	UART_sendByte(CONFIRM_READY);	/*
	 	 	 	 	 	 	 	 	 *Send PASS_READY instruction to CONTROL_ECU to prepare it to receive the CONFIRMATION PASS
	 	 	 	 	 	 	 	 	 * to be stored later in EEPROM */
	while(UART_recieveByte() != MC2_READY){}	//Wait for CONTROL_ECU to be ready
	for(counter = 0; counter<5; counter++){		//Send the Confirmation Password
    1396:	80 91 e3 00 	lds	r24, 0x00E3
    139a:	8f 5f       	subi	r24, 0xFF	; 255
    139c:	80 93 e3 00 	sts	0x00E3, r24
    13a0:	80 91 e3 00 	lds	r24, 0x00E3
    13a4:	85 30       	cpi	r24, 0x05	; 5
    13a6:	68 f3       	brcs	.-38     	; 0x1382 <send_confirm+0x22>
		UART_sendByte(confirm[counter]);
	}
}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <GPIO_setupPinDirection+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <GPIO_setupPinDirection+0x8>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	6a 83       	std	Y+2, r22	; 0x02
    13c4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	88 30       	cpi	r24, 0x08	; 8
    13ca:	08 f0       	brcs	.+2      	; 0x13ce <GPIO_setupPinDirection+0x1c>
    13cc:	d5 c0       	rjmp	.+426    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	84 30       	cpi	r24, 0x04	; 4
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <GPIO_setupPinDirection+0x24>
    13d4:	d1 c0       	rjmp	.+418    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3d 83       	std	Y+5, r19	; 0x05
    13de:	2c 83       	std	Y+4, r18	; 0x04
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	9d 81       	ldd	r25, Y+5	; 0x05
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	09 f4       	brne	.+2      	; 0x13ec <GPIO_setupPinDirection+0x3a>
    13ea:	43 c0       	rjmp	.+134    	; 0x1472 <GPIO_setupPinDirection+0xc0>
    13ec:	2c 81       	ldd	r18, Y+4	; 0x04
    13ee:	3d 81       	ldd	r19, Y+5	; 0x05
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	2c f4       	brge	.+10     	; 0x1400 <GPIO_setupPinDirection+0x4e>
    13f6:	8c 81       	ldd	r24, Y+4	; 0x04
    13f8:	9d 81       	ldd	r25, Y+5	; 0x05
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	71 f0       	breq	.+28     	; 0x141a <GPIO_setupPinDirection+0x68>
    13fe:	bc c0       	rjmp	.+376    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
    1400:	2c 81       	ldd	r18, Y+4	; 0x04
    1402:	3d 81       	ldd	r19, Y+5	; 0x05
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <GPIO_setupPinDirection+0x5a>
    140a:	5f c0       	rjmp	.+190    	; 0x14ca <GPIO_setupPinDirection+0x118>
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	83 30       	cpi	r24, 0x03	; 3
    1412:	91 05       	cpc	r25, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <GPIO_setupPinDirection+0x66>
    1416:	85 c0       	rjmp	.+266    	; 0x1522 <GPIO_setupPinDirection+0x170>
    1418:	af c0       	rjmp	.+350    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	a1 f4       	brne	.+40     	; 0x1448 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1420:	aa e3       	ldi	r26, 0x3A	; 58
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ea e3       	ldi	r30, 0x3A	; 58
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <GPIO_setupPinDirection+0x8c>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <GPIO_setupPinDirection+0x88>
    1442:	84 2b       	or	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	98 c0       	rjmp	.+304    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1448:	aa e3       	ldi	r26, 0x3A	; 58
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ea e3       	ldi	r30, 0x3A	; 58
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <GPIO_setupPinDirection+0xb4>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <GPIO_setupPinDirection+0xb0>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	83 c0       	rjmp	.+262    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	a1 f4       	brne	.+40     	; 0x14a0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1478:	a7 e3       	ldi	r26, 0x37	; 55
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e7 e3       	ldi	r30, 0x37	; 55
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <GPIO_setupPinDirection+0xe4>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <GPIO_setupPinDirection+0xe0>
    149a:	84 2b       	or	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	6c c0       	rjmp	.+216    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    14a0:	a7 e3       	ldi	r26, 0x37	; 55
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e7 e3       	ldi	r30, 0x37	; 55
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	48 2f       	mov	r20, r24
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 2e       	mov	r0, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <GPIO_setupPinDirection+0x10c>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <GPIO_setupPinDirection+0x108>
    14c2:	80 95       	com	r24
    14c4:	84 23       	and	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	57 c0       	rjmp	.+174    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	a1 f4       	brne	.+40     	; 0x14f8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14d0:	a4 e3       	ldi	r26, 0x34	; 52
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e4 e3       	ldi	r30, 0x34	; 52
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 2e       	mov	r0, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <GPIO_setupPinDirection+0x13c>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <GPIO_setupPinDirection+0x138>
    14f2:	84 2b       	or	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	40 c0       	rjmp	.+128    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    14f8:	a4 e3       	ldi	r26, 0x34	; 52
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e4 e3       	ldi	r30, 0x34	; 52
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <GPIO_setupPinDirection+0x164>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <GPIO_setupPinDirection+0x160>
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	2b c0       	rjmp	.+86     	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	a1 f4       	brne	.+40     	; 0x1550 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1528:	a1 e3       	ldi	r26, 0x31	; 49
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e1 e3       	ldi	r30, 0x31	; 49
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <GPIO_setupPinDirection+0x194>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <GPIO_setupPinDirection+0x190>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	14 c0       	rjmp	.+40     	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1550:	a1 e3       	ldi	r26, 0x31	; 49
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e1 e3       	ldi	r30, 0x31	; 49
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <GPIO_setupPinDirection+0x1bc>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <GPIO_setupPinDirection+0x1b8>
    1572:	80 95       	com	r24
    1574:	84 23       	and	r24, r20
    1576:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	00 d0       	rcall	.+0      	; 0x158e <GPIO_writePin+0x6>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <GPIO_writePin+0x8>
    1590:	0f 92       	push	r0
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	6a 83       	std	Y+2, r22	; 0x02
    159a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	88 30       	cpi	r24, 0x08	; 8
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <GPIO_writePin+0x1c>
    15a2:	d5 c0       	rjmp	.+426    	; 0x174e <GPIO_writePin+0x1c6>
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <GPIO_writePin+0x24>
    15aa:	d1 c0       	rjmp	.+418    	; 0x174e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	3d 83       	std	Y+5, r19	; 0x05
    15b4:	2c 83       	std	Y+4, r18	; 0x04
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	91 05       	cpc	r25, r1
    15be:	09 f4       	brne	.+2      	; 0x15c2 <GPIO_writePin+0x3a>
    15c0:	43 c0       	rjmp	.+134    	; 0x1648 <GPIO_writePin+0xc0>
    15c2:	2c 81       	ldd	r18, Y+4	; 0x04
    15c4:	3d 81       	ldd	r19, Y+5	; 0x05
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <GPIO_writePin+0x4e>
    15cc:	8c 81       	ldd	r24, Y+4	; 0x04
    15ce:	9d 81       	ldd	r25, Y+5	; 0x05
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	71 f0       	breq	.+28     	; 0x15f0 <GPIO_writePin+0x68>
    15d4:	bc c0       	rjmp	.+376    	; 0x174e <GPIO_writePin+0x1c6>
    15d6:	2c 81       	ldd	r18, Y+4	; 0x04
    15d8:	3d 81       	ldd	r19, Y+5	; 0x05
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	09 f4       	brne	.+2      	; 0x15e2 <GPIO_writePin+0x5a>
    15e0:	5f c0       	rjmp	.+190    	; 0x16a0 <GPIO_writePin+0x118>
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	91 05       	cpc	r25, r1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <GPIO_writePin+0x66>
    15ec:	85 c0       	rjmp	.+266    	; 0x16f8 <GPIO_writePin+0x170>
    15ee:	af c0       	rjmp	.+350    	; 0x174e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	a1 f4       	brne	.+40     	; 0x161e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    15f6:	ab e3       	ldi	r26, 0x3B	; 59
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	eb e3       	ldi	r30, 0x3B	; 59
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <GPIO_writePin+0x8c>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <GPIO_writePin+0x88>
    1618:	84 2b       	or	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	98 c0       	rjmp	.+304    	; 0x174e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    161e:	ab e3       	ldi	r26, 0x3B	; 59
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	eb e3       	ldi	r30, 0x3B	; 59
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <GPIO_writePin+0xb4>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <GPIO_writePin+0xb0>
    1640:	80 95       	com	r24
    1642:	84 23       	and	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	83 c0       	rjmp	.+262    	; 0x174e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	a1 f4       	brne	.+40     	; 0x1676 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    164e:	a8 e3       	ldi	r26, 0x38	; 56
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e8 e3       	ldi	r30, 0x38	; 56
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <GPIO_writePin+0xe4>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <GPIO_writePin+0xe0>
    1670:	84 2b       	or	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	6c c0       	rjmp	.+216    	; 0x174e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1676:	a8 e3       	ldi	r26, 0x38	; 56
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e8 e3       	ldi	r30, 0x38	; 56
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <GPIO_writePin+0x10c>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <GPIO_writePin+0x108>
    1698:	80 95       	com	r24
    169a:	84 23       	and	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	57 c0       	rjmp	.+174    	; 0x174e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	a1 f4       	brne	.+40     	; 0x16ce <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    16a6:	a5 e3       	ldi	r26, 0x35	; 53
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e5 e3       	ldi	r30, 0x35	; 53
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <GPIO_writePin+0x13c>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <GPIO_writePin+0x138>
    16c8:	84 2b       	or	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	40 c0       	rjmp	.+128    	; 0x174e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    16ce:	a5 e3       	ldi	r26, 0x35	; 53
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e5 e3       	ldi	r30, 0x35	; 53
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <GPIO_writePin+0x164>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <GPIO_writePin+0x160>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	2b c0       	rjmp	.+86     	; 0x174e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	a1 f4       	brne	.+40     	; 0x1726 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    16fe:	a2 e3       	ldi	r26, 0x32	; 50
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e2 e3       	ldi	r30, 0x32	; 50
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GPIO_writePin+0x194>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <GPIO_writePin+0x190>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	14 c0       	rjmp	.+40     	; 0x174e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1726:	a2 e3       	ldi	r26, 0x32	; 50
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e2 e3       	ldi	r30, 0x32	; 50
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_writePin+0x1bc>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_writePin+0x1b8>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <GPIO_readPin+0x6>
    1764:	00 d0       	rcall	.+0      	; 0x1766 <GPIO_readPin+0x8>
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	8a 83       	std	Y+2, r24	; 0x02
    176e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1770:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 30       	cpi	r24, 0x08	; 8
    1776:	08 f0       	brcs	.+2      	; 0x177a <GPIO_readPin+0x1c>
    1778:	84 c0       	rjmp	.+264    	; 0x1882 <GPIO_readPin+0x124>
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	84 30       	cpi	r24, 0x04	; 4
    177e:	08 f0       	brcs	.+2      	; 0x1782 <GPIO_readPin+0x24>
    1780:	80 c0       	rjmp	.+256    	; 0x1882 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	3d 83       	std	Y+5, r19	; 0x05
    178a:	2c 83       	std	Y+4, r18	; 0x04
    178c:	4c 81       	ldd	r20, Y+4	; 0x04
    178e:	5d 81       	ldd	r21, Y+5	; 0x05
    1790:	41 30       	cpi	r20, 0x01	; 1
    1792:	51 05       	cpc	r21, r1
    1794:	79 f1       	breq	.+94     	; 0x17f4 <GPIO_readPin+0x96>
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	91 05       	cpc	r25, r1
    179e:	34 f4       	brge	.+12     	; 0x17ac <GPIO_readPin+0x4e>
    17a0:	2c 81       	ldd	r18, Y+4	; 0x04
    17a2:	3d 81       	ldd	r19, Y+5	; 0x05
    17a4:	21 15       	cp	r18, r1
    17a6:	31 05       	cpc	r19, r1
    17a8:	69 f0       	breq	.+26     	; 0x17c4 <GPIO_readPin+0x66>
    17aa:	6b c0       	rjmp	.+214    	; 0x1882 <GPIO_readPin+0x124>
    17ac:	4c 81       	ldd	r20, Y+4	; 0x04
    17ae:	5d 81       	ldd	r21, Y+5	; 0x05
    17b0:	42 30       	cpi	r20, 0x02	; 2
    17b2:	51 05       	cpc	r21, r1
    17b4:	b9 f1       	breq	.+110    	; 0x1824 <GPIO_readPin+0xc6>
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	91 05       	cpc	r25, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <GPIO_readPin+0x64>
    17c0:	49 c0       	rjmp	.+146    	; 0x1854 <GPIO_readPin+0xf6>
    17c2:	5f c0       	rjmp	.+190    	; 0x1882 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    17c4:	e9 e3       	ldi	r30, 0x39	; 57
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <GPIO_readPin+0x7e>
    17d8:	55 95       	asr	r21
    17da:	47 95       	ror	r20
    17dc:	8a 95       	dec	r24
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <GPIO_readPin+0x7a>
    17e0:	ca 01       	movw	r24, r20
    17e2:	81 70       	andi	r24, 0x01	; 1
    17e4:	90 70       	andi	r25, 0x00	; 0
    17e6:	88 23       	and	r24, r24
    17e8:	19 f0       	breq	.+6      	; 0x17f0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	49 c0       	rjmp	.+146    	; 0x1882 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17f0:	19 82       	std	Y+1, r1	; 0x01
    17f2:	47 c0       	rjmp	.+142    	; 0x1882 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    17f4:	e6 e3       	ldi	r30, 0x36	; 54
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	88 2f       	mov	r24, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a9 01       	movw	r20, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_readPin+0xae>
    1808:	55 95       	asr	r21
    180a:	47 95       	ror	r20
    180c:	8a 95       	dec	r24
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <GPIO_readPin+0xaa>
    1810:	ca 01       	movw	r24, r20
    1812:	81 70       	andi	r24, 0x01	; 1
    1814:	90 70       	andi	r25, 0x00	; 0
    1816:	88 23       	and	r24, r24
    1818:	19 f0       	breq	.+6      	; 0x1820 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	31 c0       	rjmp	.+98     	; 0x1882 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	2f c0       	rjmp	.+94     	; 0x1882 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1824:	e3 e3       	ldi	r30, 0x33	; 51
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	a9 01       	movw	r20, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <GPIO_readPin+0xde>
    1838:	55 95       	asr	r21
    183a:	47 95       	ror	r20
    183c:	8a 95       	dec	r24
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <GPIO_readPin+0xda>
    1840:	ca 01       	movw	r24, r20
    1842:	81 70       	andi	r24, 0x01	; 1
    1844:	90 70       	andi	r25, 0x00	; 0
    1846:	88 23       	and	r24, r24
    1848:	19 f0       	breq	.+6      	; 0x1850 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	19 c0       	rjmp	.+50     	; 0x1882 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1850:	19 82       	std	Y+1, r1	; 0x01
    1852:	17 c0       	rjmp	.+46     	; 0x1882 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1854:	e0 e3       	ldi	r30, 0x30	; 48
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a9 01       	movw	r20, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <GPIO_readPin+0x10e>
    1868:	55 95       	asr	r21
    186a:	47 95       	ror	r20
    186c:	8a 95       	dec	r24
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <GPIO_readPin+0x10a>
    1870:	ca 01       	movw	r24, r20
    1872:	81 70       	andi	r24, 0x01	; 1
    1874:	90 70       	andi	r25, 0x00	; 0
    1876:	88 23       	and	r24, r24
    1878:	19 f0       	breq	.+6      	; 0x1880 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1880:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1882:	89 81       	ldd	r24, Y+1	; 0x01
}
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	00 d0       	rcall	.+0      	; 0x189a <GPIO_setupPortDirection+0x6>
    189a:	00 d0       	rcall	.+0      	; 0x189c <GPIO_setupPortDirection+0x8>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	84 30       	cpi	r24, 0x04	; 4
    18a8:	90 f5       	brcc	.+100    	; 0x190e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	3c 83       	std	Y+4, r19	; 0x04
    18b2:	2b 83       	std	Y+3, r18	; 0x03
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	81 30       	cpi	r24, 0x01	; 1
    18ba:	91 05       	cpc	r25, r1
    18bc:	d1 f0       	breq	.+52     	; 0x18f2 <GPIO_setupPortDirection+0x5e>
    18be:	2b 81       	ldd	r18, Y+3	; 0x03
    18c0:	3c 81       	ldd	r19, Y+4	; 0x04
    18c2:	22 30       	cpi	r18, 0x02	; 2
    18c4:	31 05       	cpc	r19, r1
    18c6:	2c f4       	brge	.+10     	; 0x18d2 <GPIO_setupPortDirection+0x3e>
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	61 f0       	breq	.+24     	; 0x18e8 <GPIO_setupPortDirection+0x54>
    18d0:	1e c0       	rjmp	.+60     	; 0x190e <GPIO_setupPortDirection+0x7a>
    18d2:	2b 81       	ldd	r18, Y+3	; 0x03
    18d4:	3c 81       	ldd	r19, Y+4	; 0x04
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 05       	cpc	r19, r1
    18da:	81 f0       	breq	.+32     	; 0x18fc <GPIO_setupPortDirection+0x68>
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	83 30       	cpi	r24, 0x03	; 3
    18e2:	91 05       	cpc	r25, r1
    18e4:	81 f0       	breq	.+32     	; 0x1906 <GPIO_setupPortDirection+0x72>
    18e6:	13 c0       	rjmp	.+38     	; 0x190e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    18e8:	ea e3       	ldi	r30, 0x3A	; 58
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	80 83       	st	Z, r24
    18f0:	0e c0       	rjmp	.+28     	; 0x190e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18f2:	e7 e3       	ldi	r30, 0x37	; 55
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	80 83       	st	Z, r24
    18fa:	09 c0       	rjmp	.+18     	; 0x190e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18fc:	e4 e3       	ldi	r30, 0x34	; 52
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	80 83       	st	Z, r24
    1904:	04 c0       	rjmp	.+8      	; 0x190e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1906:	e1 e3       	ldi	r30, 0x31	; 49
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	80 83       	st	Z, r24
			break;
		}
	}
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	00 d0       	rcall	.+0      	; 0x1922 <GPIO_writePort+0x6>
    1922:	00 d0       	rcall	.+0      	; 0x1924 <GPIO_writePort+0x8>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	84 30       	cpi	r24, 0x04	; 4
    1930:	90 f5       	brcc	.+100    	; 0x1996 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	3c 83       	std	Y+4, r19	; 0x04
    193a:	2b 83       	std	Y+3, r18	; 0x03
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	91 05       	cpc	r25, r1
    1944:	d1 f0       	breq	.+52     	; 0x197a <GPIO_writePort+0x5e>
    1946:	2b 81       	ldd	r18, Y+3	; 0x03
    1948:	3c 81       	ldd	r19, Y+4	; 0x04
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	2c f4       	brge	.+10     	; 0x195a <GPIO_writePort+0x3e>
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	61 f0       	breq	.+24     	; 0x1970 <GPIO_writePort+0x54>
    1958:	1e c0       	rjmp	.+60     	; 0x1996 <GPIO_writePort+0x7a>
    195a:	2b 81       	ldd	r18, Y+3	; 0x03
    195c:	3c 81       	ldd	r19, Y+4	; 0x04
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	81 f0       	breq	.+32     	; 0x1984 <GPIO_writePort+0x68>
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	83 30       	cpi	r24, 0x03	; 3
    196a:	91 05       	cpc	r25, r1
    196c:	81 f0       	breq	.+32     	; 0x198e <GPIO_writePort+0x72>
    196e:	13 c0       	rjmp	.+38     	; 0x1996 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1970:	eb e3       	ldi	r30, 0x3B	; 59
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	80 83       	st	Z, r24
    1978:	0e c0       	rjmp	.+28     	; 0x1996 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    197a:	e8 e3       	ldi	r30, 0x38	; 56
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	80 83       	st	Z, r24
    1982:	09 c0       	rjmp	.+18     	; 0x1996 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1984:	e5 e3       	ldi	r30, 0x35	; 53
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	80 83       	st	Z, r24
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    198e:	e2 e3       	ldi	r30, 0x32	; 50
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	80 83       	st	Z, r24
			break;
		}
	}
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <GPIO_readPort+0x6>
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <GPIO_readPort+0x8>
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    19b2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	90 f5       	brcc	.+100    	; 0x1a1e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	3c 83       	std	Y+4, r19	; 0x04
    19c2:	2b 83       	std	Y+3, r18	; 0x03
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	91 05       	cpc	r25, r1
    19cc:	d1 f0       	breq	.+52     	; 0x1a02 <GPIO_readPort+0x5e>
    19ce:	2b 81       	ldd	r18, Y+3	; 0x03
    19d0:	3c 81       	ldd	r19, Y+4	; 0x04
    19d2:	22 30       	cpi	r18, 0x02	; 2
    19d4:	31 05       	cpc	r19, r1
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <GPIO_readPort+0x3e>
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	61 f0       	breq	.+24     	; 0x19f8 <GPIO_readPort+0x54>
    19e0:	1e c0       	rjmp	.+60     	; 0x1a1e <GPIO_readPort+0x7a>
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	3c 81       	ldd	r19, Y+4	; 0x04
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	81 f0       	breq	.+32     	; 0x1a0c <GPIO_readPort+0x68>
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	83 30       	cpi	r24, 0x03	; 3
    19f2:	91 05       	cpc	r25, r1
    19f4:	81 f0       	breq	.+32     	; 0x1a16 <GPIO_readPort+0x72>
    19f6:	13 c0       	rjmp	.+38     	; 0x1a1e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    19f8:	e9 e3       	ldi	r30, 0x39	; 57
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	0e c0       	rjmp	.+28     	; 0x1a1e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a02:	e6 e3       	ldi	r30, 0x36	; 54
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a0c:	e3 e3       	ldi	r30, 0x33	; 51
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a16:	e0 e3       	ldi	r30, 0x30	; 48
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <KEYPAD_getPressedKey+0x6>
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	62 e0       	ldi	r22, 0x02	; 2
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	63 e0       	ldi	r22, 0x03	; 3
    1a5a:	40 e0       	ldi	r20, 0x00	; 0
    1a5c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	64 e0       	ldi	r22, 0x04	; 4
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	65 e0       	ldi	r22, 0x05	; 5
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	66 e0       	ldi	r22, 0x06	; 6
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	67 e0       	ldi	r22, 0x07	; 7
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1a88:	19 82       	std	Y+1, r1	; 0x01
    1a8a:	35 c0       	rjmp	.+106    	; 0x1af6 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	69 81       	ldd	r22, Y+1	; 0x01
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	69 81       	ldd	r22, Y+1	; 0x01
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1aa0:	1a 82       	std	Y+2, r1	; 0x02
    1aa2:	1e c0       	rjmp	.+60     	; 0x1ae0 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	9c 5f       	subi	r25, 0xFC	; 252
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	69 2f       	mov	r22, r25
    1aae:	0e 94 af 0b 	call	0x175e	; 0x175e <GPIO_readPin>
    1ab2:	88 23       	and	r24, r24
    1ab4:	91 f4       	brne	.+36     	; 0x1ada <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	89 0f       	add	r24, r25
    1aca:	8f 5f       	subi	r24, 0xFF	; 255
    1acc:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <KEYPAD_4x4_adjustKeyNumber>
#if 0
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
#endif
		}
	}	
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	8f 5f       	subi	r24, 0xFF	; 255
    1ade:	8a 83       	std	Y+2, r24	; 0x02
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	84 30       	cpi	r24, 0x04	; 4
    1ae4:	f8 f2       	brcs	.-66     	; 0x1aa4 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, LOGIC_HIGH);
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	69 81       	ldd	r22, Y+1	; 0x01
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	8f 5f       	subi	r24, 0xFF	; 255
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	84 30       	cpi	r24, 0x04	; 4
    1afa:	40 f2       	brcs	.-112    	; 0x1a8c <KEYPAD_getPressedKey+0x5e>
    1afc:	c5 cf       	rjmp	.-118    	; 0x1a88 <KEYPAD_getPressedKey+0x5a>

00001afe <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1b0c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	3c 83       	std	Y+4, r19	; 0x04
    1b16:	2b 83       	std	Y+3, r18	; 0x03
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	88 30       	cpi	r24, 0x08	; 8
    1b1e:	91 05       	cpc	r25, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1b22:	70 c0       	rjmp	.+224    	; 0x1c04 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b24:	2b 81       	ldd	r18, Y+3	; 0x03
    1b26:	3c 81       	ldd	r19, Y+4	; 0x04
    1b28:	29 30       	cpi	r18, 0x09	; 9
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	5c f5       	brge	.+86     	; 0x1b84 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	91 05       	cpc	r25, r1
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1b38:	59 c0       	rjmp	.+178    	; 0x1bec <KEYPAD_4x4_adjustKeyNumber+0xee>
    1b3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3e:	25 30       	cpi	r18, 0x05	; 5
    1b40:	31 05       	cpc	r19, r1
    1b42:	9c f4       	brge	.+38     	; 0x1b6a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	82 30       	cpi	r24, 0x02	; 2
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1b4e:	48 c0       	rjmp	.+144    	; 0x1be0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1b50:	2b 81       	ldd	r18, Y+3	; 0x03
    1b52:	3c 81       	ldd	r19, Y+4	; 0x04
    1b54:	23 30       	cpi	r18, 0x03	; 3
    1b56:	31 05       	cpc	r19, r1
    1b58:	0c f0       	brlt	.+2      	; 0x1b5c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1b5a:	45 c0       	rjmp	.+138    	; 0x1be6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	91 05       	cpc	r25, r1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1b66:	39 c0       	rjmp	.+114    	; 0x1bda <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1b68:	67 c0       	rjmp	.+206    	; 0x1c38 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1b6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b6e:	26 30       	cpi	r18, 0x06	; 6
    1b70:	31 05       	cpc	r19, r1
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1b74:	41 c0       	rjmp	.+130    	; 0x1bf8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	87 30       	cpi	r24, 0x07	; 7
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	0c f0       	brlt	.+2      	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1b80:	3e c0       	rjmp	.+124    	; 0x1bfe <KEYPAD_4x4_adjustKeyNumber+0x100>
    1b82:	37 c0       	rjmp	.+110    	; 0x1bf2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1b84:	2b 81       	ldd	r18, Y+3	; 0x03
    1b86:	3c 81       	ldd	r19, Y+4	; 0x04
    1b88:	2c 30       	cpi	r18, 0x0C	; 12
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1b8e:	46 c0       	rjmp	.+140    	; 0x1c1c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	8d 30       	cpi	r24, 0x0D	; 13
    1b96:	91 05       	cpc	r25, r1
    1b98:	5c f4       	brge	.+22     	; 0x1bb0 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1b9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9e:	2a 30       	cpi	r18, 0x0A	; 10
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	b1 f1       	breq	.+108    	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	8b 30       	cpi	r24, 0x0B	; 11
    1baa:	91 05       	cpc	r25, r1
    1bac:	a4 f5       	brge	.+104    	; 0x1c16 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1bae:	2d c0       	rjmp	.+90     	; 0x1c0a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb4:	2e 30       	cpi	r18, 0x0E	; 14
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	b9 f1       	breq	.+110    	; 0x1c28 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	8e 30       	cpi	r24, 0x0E	; 14
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	7c f1       	brlt	.+94     	; 0x1c22 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc8:	2f 30       	cpi	r18, 0x0F	; 15
    1bca:	31 05       	cpc	r19, r1
    1bcc:	79 f1       	breq	.+94     	; 0x1c2c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	80 31       	cpi	r24, 0x10	; 16
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	69 f1       	breq	.+90     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1bd8:	2f c0       	rjmp	.+94     	; 0x1c38 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1bda:	87 e0       	ldi	r24, 0x07	; 7
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	2e c0       	rjmp	.+92     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1be0:	88 e0       	ldi	r24, 0x08	; 8
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	2b c0       	rjmp	.+86     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1be6:	89 e0       	ldi	r24, 0x09	; 9
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	28 c0       	rjmp	.+80     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1bec:	85 e2       	ldi	r24, 0x25	; 37
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	25 c0       	rjmp	.+74     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1bf2:	84 e0       	ldi	r24, 0x04	; 4
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	22 c0       	rjmp	.+68     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1bf8:	85 e0       	ldi	r24, 0x05	; 5
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	1f c0       	rjmp	.+62     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1bfe:	86 e0       	ldi	r24, 0x06	; 6
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	1c c0       	rjmp	.+56     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c04:	8a e2       	ldi	r24, 0x2A	; 42
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	19 c0       	rjmp	.+50     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	16 c0       	rjmp	.+44     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	13 c0       	rjmp	.+38     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1c16:	83 e0       	ldi	r24, 0x03	; 3
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	10 c0       	rjmp	.+32     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c1c:	8d e2       	ldi	r24, 0x2D	; 45
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	0d c0       	rjmp	.+26     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1c22:	8d e0       	ldi	r24, 0x0D	; 13
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	0a c0       	rjmp	.+20     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1c28:	19 82       	std	Y+1, r1	; 0x01
    1c2a:	08 c0       	rjmp	.+16     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c2c:	8d e3       	ldi	r24, 0x3D	; 61
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	05 c0       	rjmp	.+10     	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c32:	8b e2       	ldi	r24, 0x2B	; 43
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	2e 97       	sbiw	r28, 0x0e	; 14
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	61 e0       	ldi	r22, 0x01	; 1
    1c64:	41 e0       	ldi	r20, 0x01	; 1
    1c66:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	62 e0       	ldi	r22, 0x02	; 2
    1c6e:	41 e0       	ldi	r20, 0x01	; 1
    1c70:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	a0 ea       	ldi	r26, 0xA0	; 160
    1c7a:	b1 e4       	ldi	r27, 0x41	; 65
    1c7c:	8b 87       	std	Y+11, r24	; 0x0b
    1c7e:	9c 87       	std	Y+12, r25	; 0x0c
    1c80:	ad 87       	std	Y+13, r26	; 0x0d
    1c82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	4a e7       	ldi	r20, 0x7A	; 122
    1c92:	53 e4       	ldi	r21, 0x43	; 67
    1c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	8f 83       	std	Y+7, r24	; 0x07
    1c9e:	98 87       	std	Y+8, r25	; 0x08
    1ca0:	a9 87       	std	Y+9, r26	; 0x09
    1ca2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e8       	ldi	r20, 0x80	; 128
    1cb2:	5f e3       	ldi	r21, 0x3F	; 63
    1cb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb8:	88 23       	and	r24, r24
    1cba:	2c f4       	brge	.+10     	; 0x1cc6 <LCD_init+0x7a>
		__ticks = 1;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
    1cc4:	3f c0       	rjmp	.+126    	; 0x1d44 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	3f ef       	ldi	r19, 0xFF	; 255
    1cd2:	4f e7       	ldi	r20, 0x7F	; 127
    1cd4:	57 e4       	ldi	r21, 0x47	; 71
    1cd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cda:	18 16       	cp	r1, r24
    1cdc:	4c f5       	brge	.+82     	; 0x1d30 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e2       	ldi	r20, 0x20	; 32
    1cec:	51 e4       	ldi	r21, 0x41	; 65
    1cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	bc 01       	movw	r22, r24
    1cf8:	cd 01       	movw	r24, r26
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
    1d06:	0f c0       	rjmp	.+30     	; 0x1d26 <LCD_init+0xda>
    1d08:	89 e1       	ldi	r24, 0x19	; 25
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9c 83       	std	Y+4, r25	; 0x04
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_init+0xc8>
    1d18:	9c 83       	std	Y+4, r25	; 0x04
    1d1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	69 f7       	brne	.-38     	; 0x1d08 <LCD_init+0xbc>
    1d2e:	14 c0       	rjmp	.+40     	; 0x1d58 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <LCD_init+0x104>
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	6f ef       	ldi	r22, 0xFF	; 255
    1d5c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1d60:	88 e3       	ldi	r24, 0x38	; 56
    1d62:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d66:	8c e0       	ldi	r24, 0x0C	; 12
    1d68:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <LCD_sendCommand>
}
    1d72:	2e 96       	adiw	r28, 0x0e	; 14
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	e9 97       	sbiw	r28, 0x39	; 57
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a0 e8       	ldi	r26, 0x80	; 128
    1daa:	bf e3       	ldi	r27, 0x3F	; 63
    1dac:	8d ab       	std	Y+53, r24	; 0x35
    1dae:	9e ab       	std	Y+54, r25	; 0x36
    1db0:	af ab       	std	Y+55, r26	; 0x37
    1db2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db4:	6d a9       	ldd	r22, Y+53	; 0x35
    1db6:	7e a9       	ldd	r23, Y+54	; 0x36
    1db8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dba:	98 ad       	ldd	r25, Y+56	; 0x38
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a e7       	ldi	r20, 0x7A	; 122
    1dc2:	53 e4       	ldi	r21, 0x43	; 67
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	89 ab       	std	Y+49, r24	; 0x31
    1dce:	9a ab       	std	Y+50, r25	; 0x32
    1dd0:	ab ab       	std	Y+51, r26	; 0x33
    1dd2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dd4:	69 a9       	ldd	r22, Y+49	; 0x31
    1dd6:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dda:	9c a9       	ldd	r25, Y+52	; 0x34
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <LCD_sendCommand+0x72>
		__ticks = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	98 ab       	std	Y+48, r25	; 0x30
    1df2:	8f a7       	std	Y+47, r24	; 0x2f
    1df4:	3f c0       	rjmp	.+126    	; 0x1e74 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1df6:	69 a9       	ldd	r22, Y+49	; 0x31
    1df8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	4c f5       	brge	.+82     	; 0x1e60 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e10:	7e a9       	ldd	r23, Y+54	; 0x36
    1e12:	8f a9       	ldd	r24, Y+55	; 0x37
    1e14:	98 ad       	ldd	r25, Y+56	; 0x38
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	98 ab       	std	Y+48, r25	; 0x30
    1e34:	8f a7       	std	Y+47, r24	; 0x2f
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <LCD_sendCommand+0xd2>
    1e38:	89 e1       	ldi	r24, 0x19	; 25
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9e a7       	std	Y+46, r25	; 0x2e
    1e3e:	8d a7       	std	Y+45, r24	; 0x2d
    1e40:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e42:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_sendCommand+0xc0>
    1e48:	9e a7       	std	Y+46, r25	; 0x2e
    1e4a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	98 ab       	std	Y+48, r25	; 0x30
    1e54:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e58:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	69 f7       	brne	.-38     	; 0x1e38 <LCD_sendCommand+0xb4>
    1e5e:	14 c0       	rjmp	.+40     	; 0x1e88 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e60:	69 a9       	ldd	r22, Y+49	; 0x31
    1e62:	7a a9       	ldd	r23, Y+50	; 0x32
    1e64:	8b a9       	ldd	r24, Y+51	; 0x33
    1e66:	9c a9       	ldd	r25, Y+52	; 0x34
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	98 ab       	std	Y+48, r25	; 0x30
    1e72:	8f a7       	std	Y+47, r24	; 0x2f
    1e74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e76:	98 a9       	ldd	r25, Y+48	; 0x30
    1e78:	9c a7       	std	Y+44, r25	; 0x2c
    1e7a:	8b a7       	std	Y+43, r24	; 0x2b
    1e7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_sendCommand+0xfc>
    1e84:	9c a7       	std	Y+44, r25	; 0x2c
    1e86:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	62 e0       	ldi	r22, 0x02	; 2
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 e8       	ldi	r26, 0x80	; 128
    1e98:	bf e3       	ldi	r27, 0x3F	; 63
    1e9a:	8f a3       	std	Y+39, r24	; 0x27
    1e9c:	98 a7       	std	Y+40, r25	; 0x28
    1e9e:	a9 a7       	std	Y+41, r26	; 0x29
    1ea0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ea4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ea6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ea8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a e7       	ldi	r20, 0x7A	; 122
    1eb0:	53 e4       	ldi	r21, 0x43	; 67
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	8b a3       	std	Y+35, r24	; 0x23
    1ebc:	9c a3       	std	Y+36, r25	; 0x24
    1ebe:	ad a3       	std	Y+37, r26	; 0x25
    1ec0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ec2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <LCD_sendCommand+0x160>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9a a3       	std	Y+34, r25	; 0x22
    1ee0:	89 a3       	std	Y+33, r24	; 0x21
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eea:	9e a1       	ldd	r25, Y+38	; 0x26
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	6f a1       	ldd	r22, Y+39	; 0x27
    1efe:	78 a5       	ldd	r23, Y+40	; 0x28
    1f00:	89 a5       	ldd	r24, Y+41	; 0x29
    1f02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9a a3       	std	Y+34, r25	; 0x22
    1f22:	89 a3       	std	Y+33, r24	; 0x21
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <LCD_sendCommand+0x1c0>
    1f26:	89 e1       	ldi	r24, 0x19	; 25
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	98 a3       	std	Y+32, r25	; 0x20
    1f2c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f30:	98 a1       	ldd	r25, Y+32	; 0x20
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_sendCommand+0x1ae>
    1f36:	98 a3       	std	Y+32, r25	; 0x20
    1f38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	9a a3       	std	Y+34, r25	; 0x22
    1f42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	89 a1       	ldd	r24, Y+33	; 0x21
    1f46:	9a a1       	ldd	r25, Y+34	; 0x22
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <LCD_sendCommand+0x1a2>
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f50:	7c a1       	ldd	r23, Y+36	; 0x24
    1f52:	8d a1       	ldd	r24, Y+37	; 0x25
    1f54:	9e a1       	ldd	r25, Y+38	; 0x26
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9a a3       	std	Y+34, r25	; 0x22
    1f60:	89 a3       	std	Y+33, r24	; 0x21
    1f62:	89 a1       	ldd	r24, Y+33	; 0x21
    1f64:	9a a1       	ldd	r25, Y+34	; 0x22
    1f66:	9e 8f       	std	Y+30, r25	; 0x1e
    1f68:	8d 8f       	std	Y+29, r24	; 0x1d
    1f6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <LCD_sendCommand+0x1ea>
    1f72:	9e 8f       	std	Y+30, r25	; 0x1e
    1f74:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	69 ad       	ldd	r22, Y+57	; 0x39
    1f7a:	0e 94 8e 0c 	call	0x191c	; 0x191c <GPIO_writePort>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a0 e8       	ldi	r26, 0x80	; 128
    1f84:	bf e3       	ldi	r27, 0x3F	; 63
    1f86:	89 8f       	std	Y+25, r24	; 0x19
    1f88:	9a 8f       	std	Y+26, r25	; 0x1a
    1f8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a e7       	ldi	r20, 0x7A	; 122
    1f9c:	53 e4       	ldi	r21, 0x43	; 67
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	8d 8b       	std	Y+21, r24	; 0x15
    1fa8:	9e 8b       	std	Y+22, r25	; 0x16
    1faa:	af 8b       	std	Y+23, r26	; 0x17
    1fac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fae:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e8       	ldi	r20, 0x80	; 128
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	2c f4       	brge	.+10     	; 0x1fd0 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9c 8b       	std	Y+20, r25	; 0x14
    1fcc:	8b 8b       	std	Y+19, r24	; 0x13
    1fce:	3f c0       	rjmp	.+126    	; 0x204e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1fd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	3f ef       	ldi	r19, 0xFF	; 255
    1fdc:	4f e7       	ldi	r20, 0x7F	; 127
    1fde:	57 e4       	ldi	r21, 0x47	; 71
    1fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	4c f5       	brge	.+82     	; 0x203a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e2       	ldi	r20, 0x20	; 32
    1ff6:	51 e4       	ldi	r21, 0x41	; 65
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9c 8b       	std	Y+20, r25	; 0x14
    200e:	8b 8b       	std	Y+19, r24	; 0x13
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <LCD_sendCommand+0x2ac>
    2012:	89 e1       	ldi	r24, 0x19	; 25
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9a 8b       	std	Y+18, r25	; 0x12
    2018:	89 8b       	std	Y+17, r24	; 0x11
    201a:	89 89       	ldd	r24, Y+17	; 0x11
    201c:	9a 89       	ldd	r25, Y+18	; 0x12
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_sendCommand+0x29a>
    2022:	9a 8b       	std	Y+18, r25	; 0x12
    2024:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2026:	8b 89       	ldd	r24, Y+19	; 0x13
    2028:	9c 89       	ldd	r25, Y+20	; 0x14
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	9c 8b       	std	Y+20, r25	; 0x14
    202e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	8b 89       	ldd	r24, Y+19	; 0x13
    2032:	9c 89       	ldd	r25, Y+20	; 0x14
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	69 f7       	brne	.-38     	; 0x2012 <LCD_sendCommand+0x28e>
    2038:	14 c0       	rjmp	.+40     	; 0x2062 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203a:	6d 89       	ldd	r22, Y+21	; 0x15
    203c:	7e 89       	ldd	r23, Y+22	; 0x16
    203e:	8f 89       	ldd	r24, Y+23	; 0x17
    2040:	98 8d       	ldd	r25, Y+24	; 0x18
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9c 8b       	std	Y+20, r25	; 0x14
    204c:	8b 8b       	std	Y+19, r24	; 0x13
    204e:	8b 89       	ldd	r24, Y+19	; 0x13
    2050:	9c 89       	ldd	r25, Y+20	; 0x14
    2052:	98 8b       	std	Y+16, r25	; 0x10
    2054:	8f 87       	std	Y+15, r24	; 0x0f
    2056:	8f 85       	ldd	r24, Y+15	; 0x0f
    2058:	98 89       	ldd	r25, Y+16	; 0x10
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_sendCommand+0x2d6>
    205e:	98 8b       	std	Y+16, r25	; 0x10
    2060:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	62 e0       	ldi	r22, 0x02	; 2
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e8       	ldi	r26, 0x80	; 128
    2072:	bf e3       	ldi	r27, 0x3F	; 63
    2074:	8b 87       	std	Y+11, r24	; 0x0b
    2076:	9c 87       	std	Y+12, r25	; 0x0c
    2078:	ad 87       	std	Y+13, r26	; 0x0d
    207a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6b 85       	ldd	r22, Y+11	; 0x0b
    207e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2080:	8d 85       	ldd	r24, Y+13	; 0x0d
    2082:	9e 85       	ldd	r25, Y+14	; 0x0e
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	53 e4       	ldi	r21, 0x43	; 67
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8f 83       	std	Y+7, r24	; 0x07
    2096:	98 87       	std	Y+8, r25	; 0x08
    2098:	a9 87       	std	Y+9, r26	; 0x09
    209a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <LCD_sendCommand+0x33a>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    20be:	6f 81       	ldd	r22, Y+7	; 0x07
    20c0:	78 85       	ldd	r23, Y+8	; 0x08
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20da:	8d 85       	ldd	r24, Y+13	; 0x0d
    20dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <LCD_sendCommand+0x39a>
    2100:	89 e1       	ldi	r24, 0x19	; 25
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9c 83       	std	Y+4, r25	; 0x04
    2106:	8b 83       	std	Y+3, r24	; 0x03
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_sendCommand+0x388>
    2110:	9c 83       	std	Y+4, r25	; 0x04
    2112:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9e 83       	std	Y+6, r25	; 0x06
    211c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8d 81       	ldd	r24, Y+5	; 0x05
    2120:	9e 81       	ldd	r25, Y+6	; 0x06
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <LCD_sendCommand+0x37c>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_sendCommand+0x3c4>
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2150:	e9 96       	adiw	r28, 0x39	; 57
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	08 95       	ret

00002162 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	e9 97       	sbiw	r28, 0x39	; 57
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e8       	ldi	r26, 0x80	; 128
    2188:	bf e3       	ldi	r27, 0x3F	; 63
    218a:	8d ab       	std	Y+53, r24	; 0x35
    218c:	9e ab       	std	Y+54, r25	; 0x36
    218e:	af ab       	std	Y+55, r26	; 0x37
    2190:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	6d a9       	ldd	r22, Y+53	; 0x35
    2194:	7e a9       	ldd	r23, Y+54	; 0x36
    2196:	8f a9       	ldd	r24, Y+55	; 0x37
    2198:	98 ad       	ldd	r25, Y+56	; 0x38
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a e7       	ldi	r20, 0x7A	; 122
    21a0:	53 e4       	ldi	r21, 0x43	; 67
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	89 ab       	std	Y+49, r24	; 0x31
    21ac:	9a ab       	std	Y+50, r25	; 0x32
    21ae:	ab ab       	std	Y+51, r26	; 0x33
    21b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21b2:	69 a9       	ldd	r22, Y+49	; 0x31
    21b4:	7a a9       	ldd	r23, Y+50	; 0x32
    21b6:	8b a9       	ldd	r24, Y+51	; 0x33
    21b8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <LCD_displayCharacter+0x72>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	98 ab       	std	Y+48, r25	; 0x30
    21d0:	8f a7       	std	Y+47, r24	; 0x2f
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    21d4:	69 a9       	ldd	r22, Y+49	; 0x31
    21d6:	7a a9       	ldd	r23, Y+50	; 0x32
    21d8:	8b a9       	ldd	r24, Y+51	; 0x33
    21da:	9c a9       	ldd	r25, Y+52	; 0x34
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	6d a9       	ldd	r22, Y+53	; 0x35
    21ee:	7e a9       	ldd	r23, Y+54	; 0x36
    21f0:	8f a9       	ldd	r24, Y+55	; 0x37
    21f2:	98 ad       	ldd	r25, Y+56	; 0x38
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	98 ab       	std	Y+48, r25	; 0x30
    2212:	8f a7       	std	Y+47, r24	; 0x2f
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <LCD_displayCharacter+0xd2>
    2216:	89 e1       	ldi	r24, 0x19	; 25
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9e a7       	std	Y+46, r25	; 0x2e
    221c:	8d a7       	std	Y+45, r24	; 0x2d
    221e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2220:	9e a5       	ldd	r25, Y+46	; 0x2e
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_displayCharacter+0xc0>
    2226:	9e a7       	std	Y+46, r25	; 0x2e
    2228:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8f a5       	ldd	r24, Y+47	; 0x2f
    222c:	98 a9       	ldd	r25, Y+48	; 0x30
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	98 ab       	std	Y+48, r25	; 0x30
    2232:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8f a5       	ldd	r24, Y+47	; 0x2f
    2236:	98 a9       	ldd	r25, Y+48	; 0x30
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <LCD_displayCharacter+0xb4>
    223c:	14 c0       	rjmp	.+40     	; 0x2266 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	69 a9       	ldd	r22, Y+49	; 0x31
    2240:	7a a9       	ldd	r23, Y+50	; 0x32
    2242:	8b a9       	ldd	r24, Y+51	; 0x33
    2244:	9c a9       	ldd	r25, Y+52	; 0x34
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	98 ab       	std	Y+48, r25	; 0x30
    2250:	8f a7       	std	Y+47, r24	; 0x2f
    2252:	8f a5       	ldd	r24, Y+47	; 0x2f
    2254:	98 a9       	ldd	r25, Y+48	; 0x30
    2256:	9c a7       	std	Y+44, r25	; 0x2c
    2258:	8b a7       	std	Y+43, r24	; 0x2b
    225a:	8b a5       	ldd	r24, Y+43	; 0x2b
    225c:	9c a5       	ldd	r25, Y+44	; 0x2c
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_displayCharacter+0xfc>
    2262:	9c a7       	std	Y+44, r25	; 0x2c
    2264:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	62 e0       	ldi	r22, 0x02	; 2
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a0 e8       	ldi	r26, 0x80	; 128
    2276:	bf e3       	ldi	r27, 0x3F	; 63
    2278:	8f a3       	std	Y+39, r24	; 0x27
    227a:	98 a7       	std	Y+40, r25	; 0x28
    227c:	a9 a7       	std	Y+41, r26	; 0x29
    227e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	6f a1       	ldd	r22, Y+39	; 0x27
    2282:	78 a5       	ldd	r23, Y+40	; 0x28
    2284:	89 a5       	ldd	r24, Y+41	; 0x29
    2286:	9a a5       	ldd	r25, Y+42	; 0x2a
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a e7       	ldi	r20, 0x7A	; 122
    228e:	53 e4       	ldi	r21, 0x43	; 67
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8b a3       	std	Y+35, r24	; 0x23
    229a:	9c a3       	std	Y+36, r25	; 0x24
    229c:	ad a3       	std	Y+37, r26	; 0x25
    229e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22a0:	6b a1       	ldd	r22, Y+35	; 0x23
    22a2:	7c a1       	ldd	r23, Y+36	; 0x24
    22a4:	8d a1       	ldd	r24, Y+37	; 0x25
    22a6:	9e a1       	ldd	r25, Y+38	; 0x26
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <LCD_displayCharacter+0x160>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    22c2:	6b a1       	ldd	r22, Y+35	; 0x23
    22c4:	7c a1       	ldd	r23, Y+36	; 0x24
    22c6:	8d a1       	ldd	r24, Y+37	; 0x25
    22c8:	9e a1       	ldd	r25, Y+38	; 0x26
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	6f a1       	ldd	r22, Y+39	; 0x27
    22dc:	78 a5       	ldd	r23, Y+40	; 0x28
    22de:	89 a5       	ldd	r24, Y+41	; 0x29
    22e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9a a3       	std	Y+34, r25	; 0x22
    2300:	89 a3       	std	Y+33, r24	; 0x21
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <LCD_displayCharacter+0x1c0>
    2304:	89 e1       	ldi	r24, 0x19	; 25
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	98 a3       	std	Y+32, r25	; 0x20
    230a:	8f 8f       	std	Y+31, r24	; 0x1f
    230c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    230e:	98 a1       	ldd	r25, Y+32	; 0x20
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_displayCharacter+0x1ae>
    2314:	98 a3       	std	Y+32, r25	; 0x20
    2316:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	89 a1       	ldd	r24, Y+33	; 0x21
    231a:	9a a1       	ldd	r25, Y+34	; 0x22
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9a a3       	std	Y+34, r25	; 0x22
    2320:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	89 a1       	ldd	r24, Y+33	; 0x21
    2324:	9a a1       	ldd	r25, Y+34	; 0x22
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <LCD_displayCharacter+0x1a2>
    232a:	14 c0       	rjmp	.+40     	; 0x2354 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	6b a1       	ldd	r22, Y+35	; 0x23
    232e:	7c a1       	ldd	r23, Y+36	; 0x24
    2330:	8d a1       	ldd	r24, Y+37	; 0x25
    2332:	9e a1       	ldd	r25, Y+38	; 0x26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9a a3       	std	Y+34, r25	; 0x22
    233e:	89 a3       	std	Y+33, r24	; 0x21
    2340:	89 a1       	ldd	r24, Y+33	; 0x21
    2342:	9a a1       	ldd	r25, Y+34	; 0x22
    2344:	9e 8f       	std	Y+30, r25	; 0x1e
    2346:	8d 8f       	std	Y+29, r24	; 0x1d
    2348:	8d 8d       	ldd	r24, Y+29	; 0x1d
    234a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_displayCharacter+0x1ea>
    2350:	9e 8f       	std	Y+30, r25	; 0x1e
    2352:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2354:	82 e0       	ldi	r24, 0x02	; 2
    2356:	69 ad       	ldd	r22, Y+57	; 0x39
    2358:	0e 94 8e 0c 	call	0x191c	; 0x191c <GPIO_writePort>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a0 e8       	ldi	r26, 0x80	; 128
    2362:	bf e3       	ldi	r27, 0x3F	; 63
    2364:	89 8f       	std	Y+25, r24	; 0x19
    2366:	9a 8f       	std	Y+26, r25	; 0x1a
    2368:	ab 8f       	std	Y+27, r26	; 0x1b
    236a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236c:	69 8d       	ldd	r22, Y+25	; 0x19
    236e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2370:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2372:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	4a e7       	ldi	r20, 0x7A	; 122
    237a:	53 e4       	ldi	r21, 0x43	; 67
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	8d 8b       	std	Y+21, r24	; 0x15
    2386:	9e 8b       	std	Y+22, r25	; 0x16
    2388:	af 8b       	std	Y+23, r26	; 0x17
    238a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    238c:	6d 89       	ldd	r22, Y+21	; 0x15
    238e:	7e 89       	ldd	r23, Y+22	; 0x16
    2390:	8f 89       	ldd	r24, Y+23	; 0x17
    2392:	98 8d       	ldd	r25, Y+24	; 0x18
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e8       	ldi	r20, 0x80	; 128
    239a:	5f e3       	ldi	r21, 0x3F	; 63
    239c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	2c f4       	brge	.+10     	; 0x23ae <LCD_displayCharacter+0x24c>
		__ticks = 1;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9c 8b       	std	Y+20, r25	; 0x14
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
    23ac:	3f c0       	rjmp	.+126    	; 0x242c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    23ae:	6d 89       	ldd	r22, Y+21	; 0x15
    23b0:	7e 89       	ldd	r23, Y+22	; 0x16
    23b2:	8f 89       	ldd	r24, Y+23	; 0x17
    23b4:	98 8d       	ldd	r25, Y+24	; 0x18
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	3f ef       	ldi	r19, 0xFF	; 255
    23ba:	4f e7       	ldi	r20, 0x7F	; 127
    23bc:	57 e4       	ldi	r21, 0x47	; 71
    23be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c2:	18 16       	cp	r1, r24
    23c4:	4c f5       	brge	.+82     	; 0x2418 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c6:	69 8d       	ldd	r22, Y+25	; 0x19
    23c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e2       	ldi	r20, 0x20	; 32
    23d4:	51 e4       	ldi	r21, 0x41	; 65
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9c 8b       	std	Y+20, r25	; 0x14
    23ec:	8b 8b       	std	Y+19, r24	; 0x13
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <LCD_displayCharacter+0x2ac>
    23f0:	89 e1       	ldi	r24, 0x19	; 25
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9a 8b       	std	Y+18, r25	; 0x12
    23f6:	89 8b       	std	Y+17, r24	; 0x11
    23f8:	89 89       	ldd	r24, Y+17	; 0x11
    23fa:	9a 89       	ldd	r25, Y+18	; 0x12
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <LCD_displayCharacter+0x29a>
    2400:	9a 8b       	std	Y+18, r25	; 0x12
    2402:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2404:	8b 89       	ldd	r24, Y+19	; 0x13
    2406:	9c 89       	ldd	r25, Y+20	; 0x14
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	9c 8b       	std	Y+20, r25	; 0x14
    240c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240e:	8b 89       	ldd	r24, Y+19	; 0x13
    2410:	9c 89       	ldd	r25, Y+20	; 0x14
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	69 f7       	brne	.-38     	; 0x23f0 <LCD_displayCharacter+0x28e>
    2416:	14 c0       	rjmp	.+40     	; 0x2440 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2418:	6d 89       	ldd	r22, Y+21	; 0x15
    241a:	7e 89       	ldd	r23, Y+22	; 0x16
    241c:	8f 89       	ldd	r24, Y+23	; 0x17
    241e:	98 8d       	ldd	r25, Y+24	; 0x18
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9c 8b       	std	Y+20, r25	; 0x14
    242a:	8b 8b       	std	Y+19, r24	; 0x13
    242c:	8b 89       	ldd	r24, Y+19	; 0x13
    242e:	9c 89       	ldd	r25, Y+20	; 0x14
    2430:	98 8b       	std	Y+16, r25	; 0x10
    2432:	8f 87       	std	Y+15, r24	; 0x0f
    2434:	8f 85       	ldd	r24, Y+15	; 0x0f
    2436:	98 89       	ldd	r25, Y+16	; 0x10
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <LCD_displayCharacter+0x2d6>
    243c:	98 8b       	std	Y+16, r25	; 0x10
    243e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	62 e0       	ldi	r22, 0x02	; 2
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	a0 e8       	ldi	r26, 0x80	; 128
    2450:	bf e3       	ldi	r27, 0x3F	; 63
    2452:	8b 87       	std	Y+11, r24	; 0x0b
    2454:	9c 87       	std	Y+12, r25	; 0x0c
    2456:	ad 87       	std	Y+13, r26	; 0x0d
    2458:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245a:	6b 85       	ldd	r22, Y+11	; 0x0b
    245c:	7c 85       	ldd	r23, Y+12	; 0x0c
    245e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2460:	9e 85       	ldd	r25, Y+14	; 0x0e
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a e7       	ldi	r20, 0x7A	; 122
    2468:	53 e4       	ldi	r21, 0x43	; 67
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	8f 83       	std	Y+7, r24	; 0x07
    2474:	98 87       	std	Y+8, r25	; 0x08
    2476:	a9 87       	std	Y+9, r26	; 0x09
    2478:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    247a:	6f 81       	ldd	r22, Y+7	; 0x07
    247c:	78 85       	ldd	r23, Y+8	; 0x08
    247e:	89 85       	ldd	r24, Y+9	; 0x09
    2480:	9a 85       	ldd	r25, Y+10	; 0x0a
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e8       	ldi	r20, 0x80	; 128
    2488:	5f e3       	ldi	r21, 0x3F	; 63
    248a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248e:	88 23       	and	r24, r24
    2490:	2c f4       	brge	.+10     	; 0x249c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	3f c0       	rjmp	.+126    	; 0x251a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    249c:	6f 81       	ldd	r22, Y+7	; 0x07
    249e:	78 85       	ldd	r23, Y+8	; 0x08
    24a0:	89 85       	ldd	r24, Y+9	; 0x09
    24a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	3f ef       	ldi	r19, 0xFF	; 255
    24a8:	4f e7       	ldi	r20, 0x7F	; 127
    24aa:	57 e4       	ldi	r21, 0x47	; 71
    24ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b0:	18 16       	cp	r1, r24
    24b2:	4c f5       	brge	.+82     	; 0x2506 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e2       	ldi	r20, 0x20	; 32
    24c2:	51 e4       	ldi	r21, 0x41	; 65
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	9e 83       	std	Y+6, r25	; 0x06
    24da:	8d 83       	std	Y+5, r24	; 0x05
    24dc:	0f c0       	rjmp	.+30     	; 0x24fc <LCD_displayCharacter+0x39a>
    24de:	89 e1       	ldi	r24, 0x19	; 25
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9c 83       	std	Y+4, r25	; 0x04
    24e4:	8b 83       	std	Y+3, r24	; 0x03
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <LCD_displayCharacter+0x388>
    24ee:	9c 83       	std	Y+4, r25	; 0x04
    24f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
    24f4:	9e 81       	ldd	r25, Y+6	; 0x06
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	69 f7       	brne	.-38     	; 0x24de <LCD_displayCharacter+0x37c>
    2504:	14 c0       	rjmp	.+40     	; 0x252e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	6f 81       	ldd	r22, Y+7	; 0x07
    2508:	78 85       	ldd	r23, Y+8	; 0x08
    250a:	89 85       	ldd	r24, Y+9	; 0x09
    250c:	9a 85       	ldd	r25, Y+10	; 0x0a
    250e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	9e 83       	std	Y+6, r25	; 0x06
    2518:	8d 83       	std	Y+5, r24	; 0x05
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	9e 81       	ldd	r25, Y+6	; 0x06
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	9a 81       	ldd	r25, Y+2	; 0x02
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <LCD_displayCharacter+0x3c4>
    252a:	9a 83       	std	Y+2, r25	; 0x02
    252c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    252e:	e9 96       	adiw	r28, 0x39	; 57
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	08 95       	ret

00002540 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	00 d0       	rcall	.+0      	; 0x2546 <LCD_displayString+0x6>
    2546:	0f 92       	push	r0
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	9b 83       	std	Y+3, r25	; 0x03
    254e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2550:	19 82       	std	Y+1, r1	; 0x01
    2552:	0e c0       	rjmp	.+28     	; 0x2570 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	9b 81       	ldd	r25, Y+3	; 0x03
    255e:	fc 01       	movw	r30, r24
    2560:	e2 0f       	add	r30, r18
    2562:	f3 1f       	adc	r31, r19
    2564:	80 81       	ld	r24, Z
    2566:	0e 94 b1 10 	call	0x2162	; 0x2162 <LCD_displayCharacter>
		i++;
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	9b 81       	ldd	r25, Y+3	; 0x03
    257a:	fc 01       	movw	r30, r24
    257c:	e2 0f       	add	r30, r18
    257e:	f3 1f       	adc	r31, r19
    2580:	80 81       	ld	r24, Z
    2582:	88 23       	and	r24, r24
    2584:	39 f7       	brne	.-50     	; 0x2554 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	00 d0       	rcall	.+0      	; 0x2598 <LCD_moveCursor+0x6>
    2598:	00 d0       	rcall	.+0      	; 0x259a <LCD_moveCursor+0x8>
    259a:	0f 92       	push	r0
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	8a 83       	std	Y+2, r24	; 0x02
    25a2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	3d 83       	std	Y+5, r19	; 0x05
    25ac:	2c 83       	std	Y+4, r18	; 0x04
    25ae:	8c 81       	ldd	r24, Y+4	; 0x04
    25b0:	9d 81       	ldd	r25, Y+5	; 0x05
    25b2:	81 30       	cpi	r24, 0x01	; 1
    25b4:	91 05       	cpc	r25, r1
    25b6:	c1 f0       	breq	.+48     	; 0x25e8 <LCD_moveCursor+0x56>
    25b8:	2c 81       	ldd	r18, Y+4	; 0x04
    25ba:	3d 81       	ldd	r19, Y+5	; 0x05
    25bc:	22 30       	cpi	r18, 0x02	; 2
    25be:	31 05       	cpc	r19, r1
    25c0:	2c f4       	brge	.+10     	; 0x25cc <LCD_moveCursor+0x3a>
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	9d 81       	ldd	r25, Y+5	; 0x05
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	61 f0       	breq	.+24     	; 0x25e2 <LCD_moveCursor+0x50>
    25ca:	19 c0       	rjmp	.+50     	; 0x25fe <LCD_moveCursor+0x6c>
    25cc:	2c 81       	ldd	r18, Y+4	; 0x04
    25ce:	3d 81       	ldd	r19, Y+5	; 0x05
    25d0:	22 30       	cpi	r18, 0x02	; 2
    25d2:	31 05       	cpc	r19, r1
    25d4:	69 f0       	breq	.+26     	; 0x25f0 <LCD_moveCursor+0x5e>
    25d6:	8c 81       	ldd	r24, Y+4	; 0x04
    25d8:	9d 81       	ldd	r25, Y+5	; 0x05
    25da:	83 30       	cpi	r24, 0x03	; 3
    25dc:	91 05       	cpc	r25, r1
    25de:	61 f0       	breq	.+24     	; 0x25f8 <LCD_moveCursor+0x66>
    25e0:	0e c0       	rjmp	.+28     	; 0x25fe <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	0b c0       	rjmp	.+22     	; 0x25fe <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	80 5c       	subi	r24, 0xC0	; 192
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	07 c0       	rjmp	.+14     	; 0x25fe <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	80 5f       	subi	r24, 0xF0	; 240
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	03 c0       	rjmp	.+6      	; 0x25fe <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	80 5b       	subi	r24, 0xB0	; 176
    25fc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	80 68       	ori	r24, 0x80	; 128
    2602:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <LCD_sendCommand>
}
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	00 d0       	rcall	.+0      	; 0x261c <LCD_displayStringRowColumn+0x6>
    261c:	00 d0       	rcall	.+0      	; 0x261e <LCD_displayStringRowColumn+0x8>
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	6a 83       	std	Y+2, r22	; 0x02
    2626:	5c 83       	std	Y+4, r21	; 0x04
    2628:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	6a 81       	ldd	r22, Y+2	; 0x02
    262e:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
}
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	62 97       	sbiw	r28, 0x12	; 18
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	9a 8b       	std	Y+18, r25	; 0x12
    265e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2660:	89 89       	ldd	r24, Y+17	; 0x11
    2662:	9a 89       	ldd	r25, Y+18	; 0x12
    2664:	9e 01       	movw	r18, r28
    2666:	2f 5f       	subi	r18, 0xFF	; 255
    2668:	3f 4f       	sbci	r19, 0xFF	; 255
    266a:	b9 01       	movw	r22, r18
    266c:	4a e0       	ldi	r20, 0x0A	; 10
    266e:	50 e0       	ldi	r21, 0x00	; 0
    2670:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <itoa>
   LCD_displayString(buff); /* Display the string */
    2674:	ce 01       	movw	r24, r28
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
}
    267c:	62 96       	adiw	r28, 0x12	; 18
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <LCD_sendCommand>
}
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <__vector_7>:
/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;


ISR(TIMER1_COMPA_vect)
{
    26a2:	1f 92       	push	r1
    26a4:	0f 92       	push	r0
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	0f 92       	push	r0
    26aa:	11 24       	eor	r1, r1
    26ac:	2f 93       	push	r18
    26ae:	3f 93       	push	r19
    26b0:	4f 93       	push	r20
    26b2:	5f 93       	push	r21
    26b4:	6f 93       	push	r22
    26b6:	7f 93       	push	r23
    26b8:	8f 93       	push	r24
    26ba:	9f 93       	push	r25
    26bc:	af 93       	push	r26
    26be:	bf 93       	push	r27
    26c0:	ef 93       	push	r30
    26c2:	ff 93       	push	r31
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    26cc:	80 91 f8 00 	lds	r24, 0x00F8
    26d0:	90 91 f9 00 	lds	r25, 0x00F9
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	29 f0       	breq	.+10     	; 0x26e2 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application*/
		(*g_callBackPtr)();
    26d8:	e0 91 f8 00 	lds	r30, 0x00F8
    26dc:	f0 91 f9 00 	lds	r31, 0x00F9
    26e0:	09 95       	icall
	}
}
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	7f 91       	pop	r23
    26f4:	6f 91       	pop	r22
    26f6:	5f 91       	pop	r21
    26f8:	4f 91       	pop	r20
    26fa:	3f 91       	pop	r19
    26fc:	2f 91       	pop	r18
    26fe:	0f 90       	pop	r0
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	0f 90       	pop	r0
    2704:	1f 90       	pop	r1
    2706:	18 95       	reti

00002708 <__vector_9>:


ISR(TIMER1_OVF_vect)
{
    2708:	1f 92       	push	r1
    270a:	0f 92       	push	r0
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	0f 92       	push	r0
    2710:	11 24       	eor	r1, r1
    2712:	2f 93       	push	r18
    2714:	3f 93       	push	r19
    2716:	4f 93       	push	r20
    2718:	5f 93       	push	r21
    271a:	6f 93       	push	r22
    271c:	7f 93       	push	r23
    271e:	8f 93       	push	r24
    2720:	9f 93       	push	r25
    2722:	af 93       	push	r26
    2724:	bf 93       	push	r27
    2726:	ef 93       	push	r30
    2728:	ff 93       	push	r31
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2732:	80 91 f8 00 	lds	r24, 0x00F8
    2736:	90 91 f9 00 	lds	r25, 0x00F9
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	29 f0       	breq	.+10     	; 0x2748 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application*/
		(*g_callBackPtr)();
    273e:	e0 91 f8 00 	lds	r30, 0x00F8
    2742:	f0 91 f9 00 	lds	r31, 0x00F9
    2746:	09 95       	icall
	}
}
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	ff 91       	pop	r31
    274e:	ef 91       	pop	r30
    2750:	bf 91       	pop	r27
    2752:	af 91       	pop	r26
    2754:	9f 91       	pop	r25
    2756:	8f 91       	pop	r24
    2758:	7f 91       	pop	r23
    275a:	6f 91       	pop	r22
    275c:	5f 91       	pop	r21
    275e:	4f 91       	pop	r20
    2760:	3f 91       	pop	r19
    2762:	2f 91       	pop	r18
    2764:	0f 90       	pop	r0
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	0f 90       	pop	r0
    276a:	1f 90       	pop	r1
    276c:	18 95       	reti

0000276e <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	00 d0       	rcall	.+0      	; 0x2774 <Timer1_init+0x6>
    2774:	00 d0       	rcall	.+0      	; 0x2776 <Timer1_init+0x8>
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	9a 83       	std	Y+2, r25	; 0x02
    277c:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A = (1<<FOC1A) | (((Config_Ptr->mode)& 0b0011)<< WGM10);
    277e:	af e4       	ldi	r26, 0x4F	; 79
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e9 81       	ldd	r30, Y+1	; 0x01
    2784:	fa 81       	ldd	r31, Y+2	; 0x02
    2786:	85 81       	ldd	r24, Z+5	; 0x05
    2788:	83 70       	andi	r24, 0x03	; 3
    278a:	88 60       	ori	r24, 0x08	; 8
    278c:	8c 93       	st	X, r24
	TCCR1B = ((((Config_Ptr->mode)& 0b1100)>>2)<< WGM12) | ((Config_Ptr->prescaler)<<CS10);
    278e:	ae e4       	ldi	r26, 0x4E	; 78
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	e9 81       	ldd	r30, Y+1	; 0x01
    2794:	fa 81       	ldd	r31, Y+2	; 0x02
    2796:	85 81       	ldd	r24, Z+5	; 0x05
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	8c 70       	andi	r24, 0x0C	; 12
    279e:	90 70       	andi	r25, 0x00	; 0
    27a0:	95 95       	asr	r25
    27a2:	87 95       	ror	r24
    27a4:	95 95       	asr	r25
    27a6:	87 95       	ror	r24
    27a8:	88 0f       	add	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	88 0f       	add	r24, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	98 2f       	mov	r25, r24
    27b6:	e9 81       	ldd	r30, Y+1	; 0x01
    27b8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ba:	84 81       	ldd	r24, Z+4	; 0x04
    27bc:	89 2b       	or	r24, r25
    27be:	8c 93       	st	X, r24
	TCNT1 = (Config_Ptr->initial_value);		/* Set timer1 initial count to initial value */
    27c0:	ac e4       	ldi	r26, 0x4C	; 76
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e9 81       	ldd	r30, Y+1	; 0x01
    27c6:	fa 81       	ldd	r31, Y+2	; 0x02
    27c8:	80 81       	ld	r24, Z
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	11 96       	adiw	r26, 0x01	; 1
    27ce:	9c 93       	st	X, r25
    27d0:	8e 93       	st	-X, r24

	SREG |= (1<<7);
    27d2:	af e5       	ldi	r26, 0x5F	; 95
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	ef e5       	ldi	r30, 0x5F	; 95
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	80 68       	ori	r24, 0x80	; 128
    27de:	8c 93       	st	X, r24

	switch((Config_Ptr->mode)){
    27e0:	e9 81       	ldd	r30, Y+1	; 0x01
    27e2:	fa 81       	ldd	r31, Y+2	; 0x02
    27e4:	85 81       	ldd	r24, Z+5	; 0x05
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	3c 83       	std	Y+4, r19	; 0x04
    27ec:	2b 83       	std	Y+3, r18	; 0x03
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	31 f0       	breq	.+12     	; 0x2802 <Timer1_init+0x94>
    27f6:	2b 81       	ldd	r18, Y+3	; 0x03
    27f8:	3c 81       	ldd	r19, Y+4	; 0x04
    27fa:	24 30       	cpi	r18, 0x04	; 4
    27fc:	31 05       	cpc	r19, r1
    27fe:	49 f0       	breq	.+18     	; 0x2812 <Timer1_init+0xa4>
    2800:	18 c0       	rjmp	.+48     	; 0x2832 <Timer1_init+0xc4>
	case NORMAL:
		TIMSK |= (1<<TOIE1); /* Enable Timer1 Overflow Interrupt */
    2802:	a9 e5       	ldi	r26, 0x59	; 89
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e9 e5       	ldi	r30, 0x59	; 89
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	84 60       	ori	r24, 0x04	; 4
    280e:	8c 93       	st	X, r24
    2810:	10 c0       	rjmp	.+32     	; 0x2832 <Timer1_init+0xc4>
		break;
	case CTC:
		OCR1A = (Config_Ptr->compare_value);		/* Set the Compare value */
    2812:	aa e4       	ldi	r26, 0x4A	; 74
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e9 81       	ldd	r30, Y+1	; 0x01
    2818:	fa 81       	ldd	r31, Y+2	; 0x02
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	11 96       	adiw	r26, 0x01	; 1
    2820:	9c 93       	st	X, r25
    2822:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    2824:	a9 e5       	ldi	r26, 0x59	; 89
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e9 e5       	ldi	r30, 0x59	; 89
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	80 61       	ori	r24, 0x10	; 16
    2830:	8c 93       	st	X, r24
		break;
	}
}
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret

00002840 <Timer1_deInit>:

void Timer1_deInit(void){
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2848:	ef e4       	ldi	r30, 0x4F	; 79
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	10 82       	st	Z, r1
	TCCR1B = 0;
    284e:	ee e4       	ldi	r30, 0x4E	; 78
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	10 82       	st	Z, r1
	TCNT1 = 0;
    2854:	ec e4       	ldi	r30, 0x4C	; 76
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	11 82       	std	Z+1, r1	; 0x01
    285a:	10 82       	st	Z, r1
	OCR1A = 0;
    285c:	ea e4       	ldi	r30, 0x4A	; 74
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	11 82       	std	Z+1, r1	; 0x01
    2862:	10 82       	st	Z, r1

	/* Disable the Timer1 Compare interrupt */
	TIMSK &= ~(1<<OCIE1A);
    2864:	a9 e5       	ldi	r26, 0x59	; 89
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e9 e5       	ldi	r30, 0x59	; 89
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	8f 7e       	andi	r24, 0xEF	; 239
    2870:	8c 93       	st	X, r24
}
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	00 d0       	rcall	.+0      	; 0x287e <Timer1_setCallBack+0x6>
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	9a 83       	std	Y+2, r25	; 0x02
    2884:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	90 93 f9 00 	sts	0x00F9, r25
    288e:	80 93 f8 00 	sts	0x00F8, r24
}
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <UART_init+0x6>
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <UART_init+0x8>
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	9c 83       	std	Y+4, r25	; 0x04
    28aa:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    28ac:	1a 82       	std	Y+2, r1	; 0x02
    28ae:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    28b0:	eb e2       	ldi	r30, 0x2B	; 43
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)|((((Config_Ptr->bit_data)&0b0100)>>2)<<UCSZ2);
    28b8:	aa e2       	ldi	r26, 0x2A	; 42
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	eb 81       	ldd	r30, Y+3	; 0x03
    28be:	fc 81       	ldd	r31, Y+4	; 0x04
    28c0:	80 81       	ld	r24, Z
    28c2:	84 70       	andi	r24, 0x04	; 4
    28c4:	88 61       	ori	r24, 0x18	; 24
    28c6:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (((Config_Ptr->bit_data)&0b0011)<<UCSZ0);
    28c8:	a0 e4       	ldi	r26, 0x40	; 64
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	eb 81       	ldd	r30, Y+3	; 0x03
    28ce:	fc 81       	ldd	r31, Y+4	; 0x04
    28d0:	80 81       	ld	r24, Z
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	83 70       	andi	r24, 0x03	; 3
    28d8:	90 70       	andi	r25, 0x00	; 0
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	80 68       	ori	r24, 0x80	; 128
    28e0:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr->stop_bit)<<USBS) | ((Config_Ptr->parity)<<UPM0);
    28e2:	a0 e4       	ldi	r26, 0x40	; 64
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	e0 e4       	ldi	r30, 0x40	; 64
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	38 2f       	mov	r19, r24
    28ee:	eb 81       	ldd	r30, Y+3	; 0x03
    28f0:	fc 81       	ldd	r31, Y+4	; 0x04
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	88 2f       	mov	r24, r24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	88 0f       	add	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	28 2f       	mov	r18, r24
    2906:	eb 81       	ldd	r30, Y+3	; 0x03
    2908:	fc 81       	ldd	r31, Y+4	; 0x04
    290a:	81 81       	ldd	r24, Z+1	; 0x01
    290c:	88 2f       	mov	r24, r24
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	82 95       	swap	r24
    2912:	92 95       	swap	r25
    2914:	90 7f       	andi	r25, 0xF0	; 240
    2916:	98 27       	eor	r25, r24
    2918:	80 7f       	andi	r24, 0xF0	; 240
    291a:	98 27       	eor	r25, r24
    291c:	82 2b       	or	r24, r18
    291e:	83 2b       	or	r24, r19
    2920:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2922:	eb 81       	ldd	r30, Y+3	; 0x03
    2924:	fc 81       	ldd	r31, Y+4	; 0x04
    2926:	83 81       	ldd	r24, Z+3	; 0x03
    2928:	94 81       	ldd	r25, Z+4	; 0x04
    292a:	a5 81       	ldd	r26, Z+5	; 0x05
    292c:	b6 81       	ldd	r27, Z+6	; 0x06
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	aa 1f       	adc	r26, r26
    2934:	bb 1f       	adc	r27, r27
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	aa 1f       	adc	r26, r26
    293c:	bb 1f       	adc	r27, r27
    293e:	88 0f       	add	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	aa 1f       	adc	r26, r26
    2944:	bb 1f       	adc	r27, r27
    2946:	9c 01       	movw	r18, r24
    2948:	ad 01       	movw	r20, r26
    294a:	80 e4       	ldi	r24, 0x40	; 64
    294c:	92 e4       	ldi	r25, 0x42	; 66
    294e:	af e0       	ldi	r26, 0x0F	; 15
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 56 15 	call	0x2aac	; 0x2aac <__udivmodsi4>
    295a:	da 01       	movw	r26, r20
    295c:	c9 01       	movw	r24, r18
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	9a 83       	std	Y+2, r25	; 0x02
    2962:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2964:	e0 e4       	ldi	r30, 0x40	; 64
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	89 2f       	mov	r24, r25
    296e:	99 27       	eor	r25, r25
    2970:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2972:	e9 e2       	ldi	r30, 0x29	; 41
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	80 83       	st	Z, r24
}
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	0f 92       	push	r0
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2994:	eb e2       	ldi	r30, 0x2B	; 43
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	88 2f       	mov	r24, r24
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	80 72       	andi	r24, 0x20	; 32
    29a0:	90 70       	andi	r25, 0x00	; 0
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	b9 f3       	breq	.-18     	; 0x2994 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    29a6:	ec e2       	ldi	r30, 0x2C	; 44
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    29ae:	0f 90       	pop	r0
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    29be:	eb e2       	ldi	r30, 0x2B	; 43
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	88 23       	and	r24, r24
    29c6:	dc f7       	brge	.-10     	; 0x29be <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    29c8:	ec e2       	ldi	r30, 0x2C	; 44
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
}
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	00 d0       	rcall	.+0      	; 0x29da <UART_sendString+0x6>
    29da:	0f 92       	push	r0
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	9b 83       	std	Y+3, r25	; 0x03
    29e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29e4:	19 82       	std	Y+1, r1	; 0x01
    29e6:	0e c0       	rjmp	.+28     	; 0x2a04 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	9b 81       	ldd	r25, Y+3	; 0x03
    29f2:	fc 01       	movw	r30, r24
    29f4:	e2 0f       	add	r30, r18
    29f6:	f3 1f       	adc	r31, r19
    29f8:	80 81       	ld	r24, Z
    29fa:	0e 94 c4 14 	call	0x2988	; 0x2988 <UART_sendByte>
		i++;
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0e:	fc 01       	movw	r30, r24
    2a10:	e2 0f       	add	r30, r18
    2a12:	f3 1f       	adc	r31, r19
    2a14:	80 81       	ld	r24, Z
    2a16:	88 23       	and	r24, r24
    2a18:	39 f7       	brne	.-50     	; 0x29e8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <UART_receiveString+0xa>
    2a30:	0f 92       	push	r0
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	9b 83       	std	Y+3, r25	; 0x03
    2a38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a3a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	8c 01       	movw	r16, r24
    2a48:	02 0f       	add	r16, r18
    2a4a:	13 1f       	adc	r17, r19
    2a4c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <UART_recieveByte>
    2a50:	f8 01       	movw	r30, r16
    2a52:	80 83       	st	Z, r24
    2a54:	0f c0       	rjmp	.+30     	; 0x2a74 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	8f 5f       	subi	r24, 0xFF	; 255
    2a5a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	28 2f       	mov	r18, r24
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	9b 81       	ldd	r25, Y+3	; 0x03
    2a66:	8c 01       	movw	r16, r24
    2a68:	02 0f       	add	r16, r18
    2a6a:	13 1f       	adc	r17, r19
    2a6c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <UART_recieveByte>
    2a70:	f8 01       	movw	r30, r16
    2a72:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7e:	fc 01       	movw	r30, r24
    2a80:	e2 0f       	add	r30, r18
    2a82:	f3 1f       	adc	r31, r19
    2a84:	80 81       	ld	r24, Z
    2a86:	83 32       	cpi	r24, 0x23	; 35
    2a88:	31 f7       	brne	.-52     	; 0x2a56 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	9b 81       	ldd	r25, Y+3	; 0x03
    2a94:	fc 01       	movw	r30, r24
    2a96:	e2 0f       	add	r30, r18
    2a98:	f3 1f       	adc	r31, r19
    2a9a:	10 82       	st	Z, r1
}
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	1f 91       	pop	r17
    2aa8:	0f 91       	pop	r16
    2aaa:	08 95       	ret

00002aac <__udivmodsi4>:
    2aac:	a1 e2       	ldi	r26, 0x21	; 33
    2aae:	1a 2e       	mov	r1, r26
    2ab0:	aa 1b       	sub	r26, r26
    2ab2:	bb 1b       	sub	r27, r27
    2ab4:	fd 01       	movw	r30, r26
    2ab6:	0d c0       	rjmp	.+26     	; 0x2ad2 <__udivmodsi4_ep>

00002ab8 <__udivmodsi4_loop>:
    2ab8:	aa 1f       	adc	r26, r26
    2aba:	bb 1f       	adc	r27, r27
    2abc:	ee 1f       	adc	r30, r30
    2abe:	ff 1f       	adc	r31, r31
    2ac0:	a2 17       	cp	r26, r18
    2ac2:	b3 07       	cpc	r27, r19
    2ac4:	e4 07       	cpc	r30, r20
    2ac6:	f5 07       	cpc	r31, r21
    2ac8:	20 f0       	brcs	.+8      	; 0x2ad2 <__udivmodsi4_ep>
    2aca:	a2 1b       	sub	r26, r18
    2acc:	b3 0b       	sbc	r27, r19
    2ace:	e4 0b       	sbc	r30, r20
    2ad0:	f5 0b       	sbc	r31, r21

00002ad2 <__udivmodsi4_ep>:
    2ad2:	66 1f       	adc	r22, r22
    2ad4:	77 1f       	adc	r23, r23
    2ad6:	88 1f       	adc	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	1a 94       	dec	r1
    2adc:	69 f7       	brne	.-38     	; 0x2ab8 <__udivmodsi4_loop>
    2ade:	60 95       	com	r22
    2ae0:	70 95       	com	r23
    2ae2:	80 95       	com	r24
    2ae4:	90 95       	com	r25
    2ae6:	9b 01       	movw	r18, r22
    2ae8:	ac 01       	movw	r20, r24
    2aea:	bd 01       	movw	r22, r26
    2aec:	cf 01       	movw	r24, r30
    2aee:	08 95       	ret

00002af0 <__prologue_saves__>:
    2af0:	2f 92       	push	r2
    2af2:	3f 92       	push	r3
    2af4:	4f 92       	push	r4
    2af6:	5f 92       	push	r5
    2af8:	6f 92       	push	r6
    2afa:	7f 92       	push	r7
    2afc:	8f 92       	push	r8
    2afe:	9f 92       	push	r9
    2b00:	af 92       	push	r10
    2b02:	bf 92       	push	r11
    2b04:	cf 92       	push	r12
    2b06:	df 92       	push	r13
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	ca 1b       	sub	r28, r26
    2b1a:	db 0b       	sbc	r29, r27
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	09 94       	ijmp

00002b28 <__epilogue_restores__>:
    2b28:	2a 88       	ldd	r2, Y+18	; 0x12
    2b2a:	39 88       	ldd	r3, Y+17	; 0x11
    2b2c:	48 88       	ldd	r4, Y+16	; 0x10
    2b2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b30:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b32:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b34:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b36:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b38:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b3a:	b9 84       	ldd	r11, Y+9	; 0x09
    2b3c:	c8 84       	ldd	r12, Y+8	; 0x08
    2b3e:	df 80       	ldd	r13, Y+7	; 0x07
    2b40:	ee 80       	ldd	r14, Y+6	; 0x06
    2b42:	fd 80       	ldd	r15, Y+5	; 0x05
    2b44:	0c 81       	ldd	r16, Y+4	; 0x04
    2b46:	1b 81       	ldd	r17, Y+3	; 0x03
    2b48:	aa 81       	ldd	r26, Y+2	; 0x02
    2b4a:	b9 81       	ldd	r27, Y+1	; 0x01
    2b4c:	ce 0f       	add	r28, r30
    2b4e:	d1 1d       	adc	r29, r1
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	de bf       	out	0x3e, r29	; 62
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	ed 01       	movw	r28, r26
    2b5c:	08 95       	ret

00002b5e <itoa>:
    2b5e:	fb 01       	movw	r30, r22
    2b60:	9f 01       	movw	r18, r30
    2b62:	e8 94       	clt
    2b64:	42 30       	cpi	r20, 0x02	; 2
    2b66:	c4 f0       	brlt	.+48     	; 0x2b98 <itoa+0x3a>
    2b68:	45 32       	cpi	r20, 0x25	; 37
    2b6a:	b4 f4       	brge	.+44     	; 0x2b98 <itoa+0x3a>
    2b6c:	4a 30       	cpi	r20, 0x0A	; 10
    2b6e:	29 f4       	brne	.+10     	; 0x2b7a <itoa+0x1c>
    2b70:	97 fb       	bst	r25, 7
    2b72:	1e f4       	brtc	.+6      	; 0x2b7a <itoa+0x1c>
    2b74:	90 95       	com	r25
    2b76:	81 95       	neg	r24
    2b78:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7a:	64 2f       	mov	r22, r20
    2b7c:	77 27       	eor	r23, r23
    2b7e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__udivmodhi4>
    2b82:	80 5d       	subi	r24, 0xD0	; 208
    2b84:	8a 33       	cpi	r24, 0x3A	; 58
    2b86:	0c f0       	brlt	.+2      	; 0x2b8a <itoa+0x2c>
    2b88:	89 5d       	subi	r24, 0xD9	; 217
    2b8a:	81 93       	st	Z+, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	00 97       	sbiw	r24, 0x00	; 0
    2b90:	a1 f7       	brne	.-24     	; 0x2b7a <itoa+0x1c>
    2b92:	16 f4       	brtc	.+4      	; 0x2b98 <itoa+0x3a>
    2b94:	5d e2       	ldi	r21, 0x2D	; 45
    2b96:	51 93       	st	Z+, r21
    2b98:	10 82       	st	Z, r1
    2b9a:	c9 01       	movw	r24, r18
    2b9c:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <strrev>

00002ba0 <strrev>:
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	67 2f       	mov	r22, r23
    2ba6:	71 91       	ld	r23, Z+
    2ba8:	77 23       	and	r23, r23
    2baa:	e1 f7       	brne	.-8      	; 0x2ba4 <strrev+0x4>
    2bac:	32 97       	sbiw	r30, 0x02	; 2
    2bae:	04 c0       	rjmp	.+8      	; 0x2bb8 <strrev+0x18>
    2bb0:	7c 91       	ld	r23, X
    2bb2:	6d 93       	st	X+, r22
    2bb4:	70 83       	st	Z, r23
    2bb6:	62 91       	ld	r22, -Z
    2bb8:	ae 17       	cp	r26, r30
    2bba:	bf 07       	cpc	r27, r31
    2bbc:	c8 f3       	brcs	.-14     	; 0x2bb0 <strrev+0x10>
    2bbe:	08 95       	ret

00002bc0 <__udivmodhi4>:
    2bc0:	aa 1b       	sub	r26, r26
    2bc2:	bb 1b       	sub	r27, r27
    2bc4:	51 e1       	ldi	r21, 0x11	; 17
    2bc6:	07 c0       	rjmp	.+14     	; 0x2bd6 <__udivmodhi4_ep>

00002bc8 <__udivmodhi4_loop>:
    2bc8:	aa 1f       	adc	r26, r26
    2bca:	bb 1f       	adc	r27, r27
    2bcc:	a6 17       	cp	r26, r22
    2bce:	b7 07       	cpc	r27, r23
    2bd0:	10 f0       	brcs	.+4      	; 0x2bd6 <__udivmodhi4_ep>
    2bd2:	a6 1b       	sub	r26, r22
    2bd4:	b7 0b       	sbc	r27, r23

00002bd6 <__udivmodhi4_ep>:
    2bd6:	88 1f       	adc	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	5a 95       	dec	r21
    2bdc:	a9 f7       	brne	.-22     	; 0x2bc8 <__udivmodhi4_loop>
    2bde:	80 95       	com	r24
    2be0:	90 95       	com	r25
    2be2:	bc 01       	movw	r22, r24
    2be4:	cd 01       	movw	r24, r26
    2be6:	08 95       	ret

00002be8 <_exit>:
    2be8:	f8 94       	cli

00002bea <__stop_program>:
    2bea:	ff cf       	rjmp	.-2      	; 0x2bea <__stop_program>
