/*
 * control.c
 *
 *  Created on: Nov 1, 2022
 *      Author: USER
 */
#include"std_types.h"
#include"buzzer.h"
#include"dc_motor.h"
#include"uart.h"
#include"twi.h"
#include"external_eeprom.h"
#include"timer1.h"
#include"gpio.h"
#include<avr/io.h>
#include<util/delay.h>
#include"ctrl.h"

uint8 key = 0;
uint8 counter = 0;
uint8 pass_match = 0;

uint8 pass[5]={0};
uint8 confirm[5]={0};

uint8 eeprom_match = 0;
uint8 passEEPROM[5] = {0};
uint8 confirmEEPROM = 0;

uint8 option = 0;
uint8 check_pass[5]={0};
volatile unsigned char motor_time = 0;
uint8 pass_error = 0;

void main(void){

	/*********	Timer1_Configuration structure	*********/
	Timer1_ConfigType Timer1_Configuration = {0, 1000, PRESCALER_1024, CTC};

	/*********	UART_Configuration structure	*********/
	UART_ConfigType	  UART_Configuration = {EIGHT_DATA_BITS, DISABLED_PARITY, ONE_STOP_BIT, 9600};

	/*********	TWI_Configuration structure		*********/
	TWI_ConfigType	  TWI_Configuration = {0b00000010,400000};

	UART_init(&UART_Configuration);		//Initialize UART
	DCMotor_init();						//Initialize DC Motor
	TWI_init(&TWI_Configuration);		//Initialize TWI
	Buzzer_init();						//Initialize Buzzer


	Timer1_setCallBack(motorTimer);
	SREG |= (1<<7);


	while(1){
		/****	RECIEVE PASS and CONFIRM from HMI_ECU ****/

		while(pass_match == 0){
			create_pass();			//Call create_pass function to check on passwords
			UART_sendByte(CHECK);	//Sending CHECK instruction to HMI_ECU
			while(UART_recieveByte()!= MC1_READY){}
			UART_sendByte(pass_match);

			if(pass_match == 1){
				/****** SAVE PASS in EEPROM *******/
				EEPROM_WRITE_PASS(pass);
				EEPROM_WRITE_CONFRIM(confirm);
			}
		}

		/***** RECIEVE OPTION *****/
		option_processing();

		if(eeprom_match == 0 && pass_error == 3){
			Timer1_init(&Timer1_Configuration);
			motor_time = 0;
			Buzzer_on();
			while(motor_time <= 5){
			}
			Timer1_deInit();
			Buzzer_off();

			pass_error = 0;
		}

		if (eeprom_match == 1 && option == '+'){
			Timer1_init(&Timer1_Configuration);
			motor_time = 0;
			DcMotor_Rotate(CW, 255);
			while(motor_time < 5){
			}
			motor_time = 0;
			DcMotor_Rotate(STOP, 0);
			while(motor_time < 5){
			}
			motor_time = 0;
			DcMotor_Rotate(CW, 255);
			while(motor_time < 5){
			}
			DcMotor_Rotate(STOP, 0);
			Timer1_deInit();
		}
		else if(eeprom_match == 1 && option == '-'){
			pass_match = 0;
		}

		eeprom_match = 0;
	}

}



void motorTimer(void){
	motor_time++;
}

void option_processing(void){
	pass_error = 0;
	while(UART_recieveByte()!= OPTION){}	// Wait for option instruction
	UART_sendByte(MC2_READY);				// Send ready to receive the option
	option = UART_recieveByte();			// Store the option
	if(option == '+' || option == '-'){
		while(eeprom_match == 0 && pass_error < 3 ){

			UART_sendByte(MC2_READY);					// Send ready to receive the password
			while(UART_recieveByte()!= PASS_READY){}	// Wait for password confirmation from HMI_ECU
			counter = 0;
			UART_sendByte(MC2_READY);					// Send ready to receive the password
			for(counter = 0; counter<5; counter++){
				check_pass[counter] = UART_recieveByte();
			}

			EEPROM_readByte(PASS_ADDRESS		, passEEPROM);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x8	, passEEPROM+1);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x10	, passEEPROM+2);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x18	, passEEPROM+3);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x20	, passEEPROM+4);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			for(counter = 0; counter<5; counter++){
				if(check_pass[0] == passEEPROM[0] ){					   		// Check if password is correct
					eeprom_match = 1;
				}else{
					eeprom_match = 0;
					break;
				}
			}
			UART_sendByte(CHECK);								// 0x8	0x10
			while(UART_recieveByte()!= MC1_READY){}
			UART_sendByte(eeprom_match);
			if(eeprom_match == 0){
				pass_error++;
			}
		}
	}
}

void create_pass(void){
	while(UART_recieveByte()!= PASS_READY){}	/****	Wait for PASS_READY instruction from HMI_ECU ****/
	UART_sendByte(MC2_READY);					/****	Send READY	instruction to HMI_ECU to receive PASSWORD	****/
	for(counter=0; counter<5; counter++){
		pass[counter] = UART_recieveByte();		/**** Receive PASSWORD form HMI_ECU	****/
	}

	while(UART_recieveByte()!= CONFIRM_READY){}	/****	Wait for CONFIRM_READY instruction from HMI_ECU ****/
	UART_sendByte(MC2_READY);					/****	Send READY	instruction to HMI_ECU to receive CONFIRM_PASS	****/
	for(counter=0; counter<5; counter++){
		confirm[counter] = UART_recieveByte();
	}

	for(counter = 0; counter<5; counter++){		/****	Check if the two passwords match	****/
		if(pass[counter] == confirm[counter]){
			pass_match = 1;
		}else{
			pass_match = 0;
			break;
		}
	}
}

void EEPROM_WRITE_PASS(uint8 arr[]){
	EEPROM_writeByte(PASS_ADDRESS		, pass[0]);  		/* Write PASS in the external EEPROM */
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x8	, pass[1]);  		/* Write PASS in the external EEPROM */
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x10	, pass[2]);  		/* Write PASS in the external EEPROM */
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x18	, pass[3]);  		/* Write PASS in the external EEPROM */
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x20	, pass[4]);  		/* Write PASS in the external EEPROM */
	_delay_ms(10);
}
void EEPROM_WRITE_CONFRIM(uint8 arr[]){
	EEPROM_writeByte(RECONFIRM_ADDRESS		, pass[0]);  		/* Write PASS in the external EEPROM */
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+0x8	, pass[1]);  		/* Write PASS in the external EEPROM */
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+0x10, pass[2]);  		/* Write PASS in the external EEPROM */
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+0x18, pass[3]);  		/* Write PASS in the external EEPROM */
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+0x20, pass[4]);  		/* Write PASS in the external EEPROM */
	_delay_ms(10);
}
