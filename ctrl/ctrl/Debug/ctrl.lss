
ctrl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003014  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00003014  000030a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800178  00800178  000031c0  2**0
                  ALLOC
  3 .stab         00002c64  00000000  00000000  000031c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000135f  00000000  00000000  00005e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007183  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007323  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007515  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000aca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000be7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c332  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cca0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 40 07 	call	0xe80	; 0xe80 <main>
      8a:	0c 94 08 18 	jmp	0x3010	; 0x3010 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Buzzer_init>:
#include"gpio.h"
#include"buzzer.h"
#include"std_types.h"


void Buzzer_init(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID, PIN5_ID, PIN_OUTPUT);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	65 e0       	ldi	r22, 0x05	; 5
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);			//Enable Pin
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	65 e0       	ldi	r22, 0x05	; 5
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Buzzer_on>:

void Buzzer_on(void){
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_HIGH);
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	65 e0       	ldi	r22, 0x05	; 5
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <Buzzer_off>:
void Buzzer_off(void){
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	65 e0       	ldi	r22, 0x05	; 5
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <main>:
uint8 option = 0;
uint8 check_pass[5]={0};
volatile uint8 motor_time = 0;
uint8 pass_error = 0;

void main(void){
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	6f 97       	sbiw	r28, 0x1f	; 31
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61

	/*********	Timer1_Configuration structure	*********/
	Timer1_ConfigType Timer1_Configuration = {0, 1000, PRESCALER_1024, CTC};
     e94:	ce 01       	movw	r24, r28
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	9a 8b       	std	Y+18, r25	; 0x12
     e9a:	89 8b       	std	Y+17, r24	; 0x11
     e9c:	e2 e7       	ldi	r30, 0x72	; 114
     e9e:	f1 e0       	ldi	r31, 0x01	; 1
     ea0:	fc 8b       	std	Y+20, r31	; 0x14
     ea2:	eb 8b       	std	Y+19, r30	; 0x13
     ea4:	f6 e0       	ldi	r31, 0x06	; 6
     ea6:	fd 8b       	std	Y+21, r31	; 0x15
     ea8:	eb 89       	ldd	r30, Y+19	; 0x13
     eaa:	fc 89       	ldd	r31, Y+20	; 0x14
     eac:	00 80       	ld	r0, Z
     eae:	8b 89       	ldd	r24, Y+19	; 0x13
     eb0:	9c 89       	ldd	r25, Y+20	; 0x14
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	9c 8b       	std	Y+20, r25	; 0x14
     eb6:	8b 8b       	std	Y+19, r24	; 0x13
     eb8:	e9 89       	ldd	r30, Y+17	; 0x11
     eba:	fa 89       	ldd	r31, Y+18	; 0x12
     ebc:	00 82       	st	Z, r0
     ebe:	89 89       	ldd	r24, Y+17	; 0x11
     ec0:	9a 89       	ldd	r25, Y+18	; 0x12
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	9a 8b       	std	Y+18, r25	; 0x12
     ec6:	89 8b       	std	Y+17, r24	; 0x11
     ec8:	9d 89       	ldd	r25, Y+21	; 0x15
     eca:	91 50       	subi	r25, 0x01	; 1
     ecc:	9d 8b       	std	Y+21, r25	; 0x15
     ece:	ed 89       	ldd	r30, Y+21	; 0x15
     ed0:	ee 23       	and	r30, r30
     ed2:	51 f7       	brne	.-44     	; 0xea8 <main+0x28>

	/*********	UART_Configuration structure	*********/
	UART_ConfigType	  UART_Configuration = {EIGHT_DATA_BITS, DISABLED_PARITY, ONE_STOP_BIT, 9600};
     ed4:	ce 01       	movw	r24, r28
     ed6:	07 96       	adiw	r24, 0x07	; 7
     ed8:	9f 8b       	std	Y+23, r25	; 0x17
     eda:	8e 8b       	std	Y+22, r24	; 0x16
     edc:	eb e6       	ldi	r30, 0x6B	; 107
     ede:	f1 e0       	ldi	r31, 0x01	; 1
     ee0:	f9 8f       	std	Y+25, r31	; 0x19
     ee2:	e8 8f       	std	Y+24, r30	; 0x18
     ee4:	f7 e0       	ldi	r31, 0x07	; 7
     ee6:	fa 8f       	std	Y+26, r31	; 0x1a
     ee8:	e8 8d       	ldd	r30, Y+24	; 0x18
     eea:	f9 8d       	ldd	r31, Y+25	; 0x19
     eec:	00 80       	ld	r0, Z
     eee:	88 8d       	ldd	r24, Y+24	; 0x18
     ef0:	99 8d       	ldd	r25, Y+25	; 0x19
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	99 8f       	std	Y+25, r25	; 0x19
     ef6:	88 8f       	std	Y+24, r24	; 0x18
     ef8:	ee 89       	ldd	r30, Y+22	; 0x16
     efa:	ff 89       	ldd	r31, Y+23	; 0x17
     efc:	00 82       	st	Z, r0
     efe:	8e 89       	ldd	r24, Y+22	; 0x16
     f00:	9f 89       	ldd	r25, Y+23	; 0x17
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	9f 8b       	std	Y+23, r25	; 0x17
     f06:	8e 8b       	std	Y+22, r24	; 0x16
     f08:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f0a:	91 50       	subi	r25, 0x01	; 1
     f0c:	9a 8f       	std	Y+26, r25	; 0x1a
     f0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f10:	ee 23       	and	r30, r30
     f12:	51 f7       	brne	.-44     	; 0xee8 <main+0x68>

	/*********	TWI_Configuration structure		*********/
	TWI_ConfigType	  TWI_Configuration = {0b00000010,400000};
     f14:	ce 01       	movw	r24, r28
     f16:	0e 96       	adiw	r24, 0x0e	; 14
     f18:	9c 8f       	std	Y+28, r25	; 0x1c
     f1a:	8b 8f       	std	Y+27, r24	; 0x1b
     f1c:	e8 e6       	ldi	r30, 0x68	; 104
     f1e:	f1 e0       	ldi	r31, 0x01	; 1
     f20:	fe 8f       	std	Y+30, r31	; 0x1e
     f22:	ed 8f       	std	Y+29, r30	; 0x1d
     f24:	f3 e0       	ldi	r31, 0x03	; 3
     f26:	ff 8f       	std	Y+31, r31	; 0x1f
     f28:	ed 8d       	ldd	r30, Y+29	; 0x1d
     f2a:	fe 8d       	ldd	r31, Y+30	; 0x1e
     f2c:	00 80       	ld	r0, Z
     f2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f30:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	9e 8f       	std	Y+30, r25	; 0x1e
     f36:	8d 8f       	std	Y+29, r24	; 0x1d
     f38:	eb 8d       	ldd	r30, Y+27	; 0x1b
     f3a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     f3c:	00 82       	st	Z, r0
     f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	9c 8f       	std	Y+28, r25	; 0x1c
     f46:	8b 8f       	std	Y+27, r24	; 0x1b
     f48:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f4a:	91 50       	subi	r25, 0x01	; 1
     f4c:	9f 8f       	std	Y+31, r25	; 0x1f
     f4e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     f50:	ee 23       	and	r30, r30
     f52:	51 f7       	brne	.-44     	; 0xf28 <main+0xa8>

	UART_init(&UART_Configuration);		//Initialize UART
     f54:	ce 01       	movw	r24, r28
     f56:	07 96       	adiw	r24, 0x07	; 7
     f58:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <UART_init>
	DCMotor_init();						//Initialize DC Motor
     f5c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <DCMotor_init>
	TWI_init(&TWI_Configuration);		//Initialize TWI
     f60:	ce 01       	movw	r24, r28
     f62:	0e 96       	adiw	r24, 0x0e	; 14
     f64:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <TWI_init>
	Buzzer_init();						//Initialize Buzzer
     f68:	0e 94 17 07 	call	0xe2e	; 0xe2e <Buzzer_init>


	Timer1_setCallBack(motorTimer);
     f6c:	82 e3       	ldi	r24, 0x32	; 50
     f6e:	98 e0       	ldi	r25, 0x08	; 8
     f70:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <Timer1_setCallBack>
     f74:	19 c0       	rjmp	.+50     	; 0xfa8 <main+0x128>

	while(1){
		/****	RECIEVE PASS and CONFIRM from HMI_ECU ****/

		while(pass_match == 0){
			create_pass();			//Call create_pass function to check on passwords
     f76:	0e 94 37 0b 	call	0x166e	; 0x166e <create_pass>
			UART_sendByte(CHECK);	//Sending CHECK instruction to HMI_ECU
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <UART_sendByte>
			while(UART_recieveByte()!= MC1_READY){}	//Wait for MC1_Ready instruction
     f80:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
     f84:	85 30       	cpi	r24, 0x05	; 5
     f86:	e1 f7       	brne	.-8      	; 0xf80 <main+0x100>
			UART_sendByte(pass_match);				//Send the check result whether passwords are matched or not
     f88:	80 91 7a 01 	lds	r24, 0x017A
     f8c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <UART_sendByte>

			if(pass_match == 1){
     f90:	80 91 7a 01 	lds	r24, 0x017A
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	41 f4       	brne	.+16     	; 0xfa8 <main+0x128>
				/****** SAVE PASS in EEPROM *******/
				EEPROM_WRITE_PASS(pass);
     f98:	8b e7       	ldi	r24, 0x7B	; 123
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <EEPROM_WRITE_PASS>
				EEPROM_WRITE_CONFRIM(confirm);
     fa0:	80 e8       	ldi	r24, 0x80	; 128
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <EEPROM_WRITE_CONFRIM>


	while(1){
		/****	RECIEVE PASS and CONFIRM from HMI_ECU ****/

		while(pass_match == 0){
     fa8:	80 91 7a 01 	lds	r24, 0x017A
     fac:	88 23       	and	r24, r24
     fae:	19 f3       	breq	.-58     	; 0xf76 <main+0xf6>
				EEPROM_WRITE_CONFRIM(confirm);
			}
		}

		/***** RECIEVE OPTION *****/
		option_processing();
     fb0:	0e 94 3e 08 	call	0x107c	; 0x107c <option_processing>

		/***** Activate Buzzer when Password is entered wrong 3 times *****/
		if(eeprom_match == 0 && pass_error == 3){
     fb4:	80 91 85 01 	lds	r24, 0x0185
     fb8:	88 23       	and	r24, r24
     fba:	b1 f4       	brne	.+44     	; 0xfe8 <main+0x168>
     fbc:	80 91 93 01 	lds	r24, 0x0193
     fc0:	83 30       	cpi	r24, 0x03	; 3
     fc2:	91 f4       	brne	.+36     	; 0xfe8 <main+0x168>
			Timer1_init(&Timer1_Configuration);	//Initialize Timer1
     fc4:	ce 01       	movw	r24, r28
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Timer1_init>
			motor_time = 0;						//Set seconds to 0
     fcc:	10 92 92 01 	sts	0x0192, r1
			Buzzer_on();						//Activate Buzzer
     fd0:	0e 94 28 07 	call	0xe50	; 0xe50 <Buzzer_on>
			while(motor_time <= 60){			//Delay 60 seconds using Timer1
     fd4:	80 91 92 01 	lds	r24, 0x0192
     fd8:	8d 33       	cpi	r24, 0x3D	; 61
     fda:	e0 f3       	brcs	.-8      	; 0xfd4 <main+0x154>
			}
			Timer1_deInit();					//Deactivate Timer1
     fdc:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <Timer1_deInit>
			Buzzer_off();						//Deactivate Buzzer
     fe0:	0e 94 34 07 	call	0xe68	; 0xe68 <Buzzer_off>

			pass_error = 0;						//Reset Password error variable
     fe4:	10 92 93 01 	sts	0x0193, r1
		}
		/***** Handling the operation chosen by the user if entered password is correct *****/
		if (eeprom_match == 1 && option == '+'){
     fe8:	80 91 85 01 	lds	r24, 0x0185
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	69 f5       	brne	.+90     	; 0x104a <main+0x1ca>
     ff0:	80 91 8c 01 	lds	r24, 0x018C
     ff4:	8b 32       	cpi	r24, 0x2B	; 43
     ff6:	49 f5       	brne	.+82     	; 0x104a <main+0x1ca>
			Timer1_init(&Timer1_Configuration);	//Initialize Timer1
     ff8:	ce 01       	movw	r24, r28
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Timer1_init>
			motor_time = 0;						//Set seconds to 0
    1000:	10 92 92 01 	sts	0x0192, r1
			DcMotor_Rotate(CW, 255);			//Activate DC Motor
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	6f ef       	ldi	r22, 0xFF	; 255
    1008:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DcMotor_Rotate>
			while(motor_time < 15){				//Delay 5 seconds using Timer1
    100c:	80 91 92 01 	lds	r24, 0x0192
    1010:	8f 30       	cpi	r24, 0x0F	; 15
    1012:	e0 f3       	brcs	.-8      	; 0x100c <main+0x18c>
			}
			motor_time = 0;						//Set seconds to 0 to reset counting
    1014:	10 92 92 01 	sts	0x0192, r1
			DcMotor_Rotate(STOP, 0);			//Deactivate DC Motor
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DcMotor_Rotate>
			while(motor_time < 3){				//Delay 5 seconds using Timer1
    1020:	80 91 92 01 	lds	r24, 0x0192
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	e0 f3       	brcs	.-8      	; 0x1020 <main+0x1a0>
			}
			motor_time = 0;						//Set seconds to 0 to reset counting
    1028:	10 92 92 01 	sts	0x0192, r1
			DcMotor_Rotate(CW, 255);			//Activate DC Motor
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	6f ef       	ldi	r22, 0xFF	; 255
    1030:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DcMotor_Rotate>
			while(motor_time < 15){				//Delay 5 seconds using Timer1
    1034:	80 91 92 01 	lds	r24, 0x0192
    1038:	8f 30       	cpi	r24, 0x0F	; 15
    103a:	e0 f3       	brcs	.-8      	; 0x1034 <main+0x1b4>
			}
			DcMotor_Rotate(STOP, 0);			//Deactivate DC Motor
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DcMotor_Rotate>
			Timer1_deInit();					//Deactivate Timer1
    1044:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <Timer1_deInit>
    1048:	0a c0       	rjmp	.+20     	; 0x105e <main+0x1de>
		}
		else if(eeprom_match == 1 && option == '-'){
    104a:	80 91 85 01 	lds	r24, 0x0185
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	31 f4       	brne	.+12     	; 0x105e <main+0x1de>
    1052:	80 91 8c 01 	lds	r24, 0x018C
    1056:	8d 32       	cpi	r24, 0x2D	; 45
    1058:	11 f4       	brne	.+4      	; 0x105e <main+0x1de>
			pass_match = 0;						/***** Reset pass_match to go back to create_pass function *****/
    105a:	10 92 7a 01 	sts	0x017A, r1
		}

		eeprom_match = 0;						/***** Reset eeprom_match to go back to option screen *****/
    105e:	10 92 85 01 	sts	0x0185, r1
    1062:	a2 cf       	rjmp	.-188    	; 0xfa8 <main+0x128>

00001064 <motorTimer>:

}

/**********************************	Function Definitions ************************************/

void motorTimer(void){	//SET CALLBACK Function
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
	motor_time++;		//Increment number of seconds every time interrupt occurs and set callback function is called
    106c:	80 91 92 01 	lds	r24, 0x0192
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	80 93 92 01 	sts	0x0192, r24
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <option_processing>:

void option_processing(void){
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	c6 54       	subi	r28, 0x46	; 70
    108a:	d0 40       	sbci	r29, 0x00	; 0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
	pass_error = 0;
    1096:	10 92 93 01 	sts	0x0193, r1
	while(UART_recieveByte()!= OPTION){}	// Wait for option instruction
    109a:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
    109e:	86 30       	cpi	r24, 0x06	; 6
    10a0:	e1 f7       	brne	.-8      	; 0x109a <option_processing+0x1e>
	UART_sendByte(MC2_READY);				// Send ready to receive the option
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <UART_sendByte>
	option = UART_recieveByte();			// Store the option
    10a8:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
    10ac:	80 93 8c 01 	sts	0x018C, r24
	if(option == '+' || option == '-'){
    10b0:	80 91 8c 01 	lds	r24, 0x018C
    10b4:	8b 32       	cpi	r24, 0x2B	; 43
    10b6:	09 f4       	brne	.+2      	; 0x10ba <option_processing+0x3e>
    10b8:	c5 c2       	rjmp	.+1418   	; 0x1644 <option_processing+0x5c8>
    10ba:	80 91 8c 01 	lds	r24, 0x018C
    10be:	8d 32       	cpi	r24, 0x2D	; 45
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <option_processing+0x48>
    10c2:	c9 c2       	rjmp	.+1426   	; 0x1656 <option_processing+0x5da>
    10c4:	bf c2       	rjmp	.+1406   	; 0x1644 <option_processing+0x5c8>
		while(eeprom_match == 0 && pass_error < 3 ){

			UART_sendByte(MC2_READY);					// Send ready to receive the password
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <UART_sendByte>
			while(UART_recieveByte()!= PASS_READY){}	// Wait for password confirmation from HMI_ECU
    10cc:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <option_processing+0x50>
			counter = 0;
    10d4:	10 92 79 01 	sts	0x0179, r1
			UART_sendByte(MC2_READY);					// Send ready to receive the password
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <UART_sendByte>
			for(counter = 0; counter<5; counter++){
    10de:	10 92 79 01 	sts	0x0179, r1
    10e2:	0f c0       	rjmp	.+30     	; 0x1102 <option_processing+0x86>
				check_pass[counter] = UART_recieveByte();
    10e4:	80 91 79 01 	lds	r24, 0x0179
    10e8:	08 2f       	mov	r16, r24
    10ea:	10 e0       	ldi	r17, 0x00	; 0
    10ec:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
    10f0:	f8 01       	movw	r30, r16
    10f2:	e3 57       	subi	r30, 0x73	; 115
    10f4:	fe 4f       	sbci	r31, 0xFE	; 254
    10f6:	80 83       	st	Z, r24

			UART_sendByte(MC2_READY);					// Send ready to receive the password
			while(UART_recieveByte()!= PASS_READY){}	// Wait for password confirmation from HMI_ECU
			counter = 0;
			UART_sendByte(MC2_READY);					// Send ready to receive the password
			for(counter = 0; counter<5; counter++){
    10f8:	80 91 79 01 	lds	r24, 0x0179
    10fc:	8f 5f       	subi	r24, 0xFF	; 255
    10fe:	80 93 79 01 	sts	0x0179, r24
    1102:	80 91 79 01 	lds	r24, 0x0179
    1106:	85 30       	cpi	r24, 0x05	; 5
    1108:	68 f3       	brcs	.-38     	; 0x10e4 <option_processing+0x68>
				check_pass[counter] = UART_recieveByte();
			}

			EEPROM_readByte(PASS_ADDRESS		, passEEPROM);  		/* Read PASS from the external EEPROM */
    110a:	26 e8       	ldi	r18, 0x86	; 134
    110c:	31 e0       	ldi	r19, 0x01	; 1
    110e:	81 e1       	ldi	r24, 0x11	; 17
    1110:	93 e0       	ldi	r25, 0x03	; 3
    1112:	b9 01       	movw	r22, r18
    1114:	0e 94 93 11 	call	0x2326	; 0x2326 <EEPROM_readByte>
    1118:	fe 01       	movw	r30, r28
    111a:	ed 5b       	subi	r30, 0xBD	; 189
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a0 e2       	ldi	r26, 0x20	; 32
    1124:	b1 e4       	ldi	r27, 0x41	; 65
    1126:	80 83       	st	Z, r24
    1128:	91 83       	std	Z+1, r25	; 0x01
    112a:	a2 83       	std	Z+2, r26	; 0x02
    112c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112e:	8e 01       	movw	r16, r28
    1130:	01 5c       	subi	r16, 0xC1	; 193
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	fe 01       	movw	r30, r28
    1136:	ed 5b       	subi	r30, 0xBD	; 189
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	60 81       	ld	r22, Z
    113c:	71 81       	ldd	r23, Z+1	; 0x01
    113e:	82 81       	ldd	r24, Z+2	; 0x02
    1140:	93 81       	ldd	r25, Z+3	; 0x03
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	4a e7       	ldi	r20, 0x7A	; 122
    1148:	53 e4       	ldi	r21, 0x43	; 67
    114a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	f8 01       	movw	r30, r16
    1154:	80 83       	st	Z, r24
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	a2 83       	std	Z+2, r26	; 0x02
    115a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    115c:	fe 01       	movw	r30, r28
    115e:	ff 96       	adiw	r30, 0x3f	; 63
    1160:	60 81       	ld	r22, Z
    1162:	71 81       	ldd	r23, Z+1	; 0x01
    1164:	82 81       	ldd	r24, Z+2	; 0x02
    1166:	93 81       	ldd	r25, Z+3	; 0x03
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	5f e3       	ldi	r21, 0x3F	; 63
    1170:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1174:	88 23       	and	r24, r24
    1176:	2c f4       	brge	.+10     	; 0x1182 <option_processing+0x106>
		__ticks = 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9e af       	std	Y+62, r25	; 0x3e
    117e:	8d af       	std	Y+61, r24	; 0x3d
    1180:	46 c0       	rjmp	.+140    	; 0x120e <option_processing+0x192>
	else if (__tmp > 65535)
    1182:	fe 01       	movw	r30, r28
    1184:	ff 96       	adiw	r30, 0x3f	; 63
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	3f ef       	ldi	r19, 0xFF	; 255
    1192:	4f e7       	ldi	r20, 0x7F	; 127
    1194:	57 e4       	ldi	r21, 0x47	; 71
    1196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    119a:	18 16       	cp	r1, r24
    119c:	64 f5       	brge	.+88     	; 0x11f6 <option_processing+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119e:	fe 01       	movw	r30, r28
    11a0:	ed 5b       	subi	r30, 0xBD	; 189
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e2       	ldi	r20, 0x20	; 32
    11b2:	51 e4       	ldi	r21, 0x41	; 65
    11b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	bc 01       	movw	r22, r24
    11be:	cd 01       	movw	r24, r26
    11c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9e af       	std	Y+62, r25	; 0x3e
    11ca:	8d af       	std	Y+61, r24	; 0x3d
    11cc:	0f c0       	rjmp	.+30     	; 0x11ec <option_processing+0x170>
    11ce:	89 e1       	ldi	r24, 0x19	; 25
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9c af       	std	Y+60, r25	; 0x3c
    11d4:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    11d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <option_processing+0x15e>
    11de:	9c af       	std	Y+60, r25	; 0x3c
    11e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    11e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	9e af       	std	Y+62, r25	; 0x3e
    11ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    11ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	69 f7       	brne	.-38     	; 0x11ce <option_processing+0x152>
    11f4:	16 c0       	rjmp	.+44     	; 0x1222 <option_processing+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f6:	fe 01       	movw	r30, r28
    11f8:	ff 96       	adiw	r30, 0x3f	; 63
    11fa:	60 81       	ld	r22, Z
    11fc:	71 81       	ldd	r23, Z+1	; 0x01
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	93 81       	ldd	r25, Z+3	; 0x03
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9e af       	std	Y+62, r25	; 0x3e
    120c:	8d af       	std	Y+61, r24	; 0x3d
    120e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1210:	9e ad       	ldd	r25, Y+62	; 0x3e
    1212:	9a af       	std	Y+58, r25	; 0x3a
    1214:	89 af       	std	Y+57, r24	; 0x39
    1216:	89 ad       	ldd	r24, Y+57	; 0x39
    1218:	9a ad       	ldd	r25, Y+58	; 0x3a
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <option_processing+0x19e>
    121e:	9a af       	std	Y+58, r25	; 0x3a
    1220:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x8	, passEEPROM+1);  		/* Read PASS from the external EEPROM */
    1222:	27 e8       	ldi	r18, 0x87	; 135
    1224:	31 e0       	ldi	r19, 0x01	; 1
    1226:	89 e1       	ldi	r24, 0x19	; 25
    1228:	93 e0       	ldi	r25, 0x03	; 3
    122a:	b9 01       	movw	r22, r18
    122c:	0e 94 93 11 	call	0x2326	; 0x2326 <EEPROM_readByte>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a0 e2       	ldi	r26, 0x20	; 32
    1236:	b1 e4       	ldi	r27, 0x41	; 65
    1238:	8d ab       	std	Y+53, r24	; 0x35
    123a:	9e ab       	std	Y+54, r25	; 0x36
    123c:	af ab       	std	Y+55, r26	; 0x37
    123e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1240:	6d a9       	ldd	r22, Y+53	; 0x35
    1242:	7e a9       	ldd	r23, Y+54	; 0x36
    1244:	8f a9       	ldd	r24, Y+55	; 0x37
    1246:	98 ad       	ldd	r25, Y+56	; 0x38
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	4a e7       	ldi	r20, 0x7A	; 122
    124e:	53 e4       	ldi	r21, 0x43	; 67
    1250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	89 ab       	std	Y+49, r24	; 0x31
    125a:	9a ab       	std	Y+50, r25	; 0x32
    125c:	ab ab       	std	Y+51, r26	; 0x33
    125e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1260:	69 a9       	ldd	r22, Y+49	; 0x31
    1262:	7a a9       	ldd	r23, Y+50	; 0x32
    1264:	8b a9       	ldd	r24, Y+51	; 0x33
    1266:	9c a9       	ldd	r25, Y+52	; 0x34
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e8       	ldi	r20, 0x80	; 128
    126e:	5f e3       	ldi	r21, 0x3F	; 63
    1270:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1274:	88 23       	and	r24, r24
    1276:	2c f4       	brge	.+10     	; 0x1282 <option_processing+0x206>
		__ticks = 1;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	98 ab       	std	Y+48, r25	; 0x30
    127e:	8f a7       	std	Y+47, r24	; 0x2f
    1280:	3f c0       	rjmp	.+126    	; 0x1300 <option_processing+0x284>
	else if (__tmp > 65535)
    1282:	69 a9       	ldd	r22, Y+49	; 0x31
    1284:	7a a9       	ldd	r23, Y+50	; 0x32
    1286:	8b a9       	ldd	r24, Y+51	; 0x33
    1288:	9c a9       	ldd	r25, Y+52	; 0x34
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	3f ef       	ldi	r19, 0xFF	; 255
    128e:	4f e7       	ldi	r20, 0x7F	; 127
    1290:	57 e4       	ldi	r21, 0x47	; 71
    1292:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1296:	18 16       	cp	r1, r24
    1298:	4c f5       	brge	.+82     	; 0x12ec <option_processing+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129a:	6d a9       	ldd	r22, Y+53	; 0x35
    129c:	7e a9       	ldd	r23, Y+54	; 0x36
    129e:	8f a9       	ldd	r24, Y+55	; 0x37
    12a0:	98 ad       	ldd	r25, Y+56	; 0x38
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e2       	ldi	r20, 0x20	; 32
    12a8:	51 e4       	ldi	r21, 0x41	; 65
    12aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	bc 01       	movw	r22, r24
    12b4:	cd 01       	movw	r24, r26
    12b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	98 ab       	std	Y+48, r25	; 0x30
    12c0:	8f a7       	std	Y+47, r24	; 0x2f
    12c2:	0f c0       	rjmp	.+30     	; 0x12e2 <option_processing+0x266>
    12c4:	89 e1       	ldi	r24, 0x19	; 25
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9e a7       	std	Y+46, r25	; 0x2e
    12ca:	8d a7       	std	Y+45, r24	; 0x2d
    12cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    12ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <option_processing+0x254>
    12d4:	9e a7       	std	Y+46, r25	; 0x2e
    12d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    12da:	98 a9       	ldd	r25, Y+48	; 0x30
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	98 ab       	std	Y+48, r25	; 0x30
    12e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12e4:	98 a9       	ldd	r25, Y+48	; 0x30
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	69 f7       	brne	.-38     	; 0x12c4 <option_processing+0x248>
    12ea:	14 c0       	rjmp	.+40     	; 0x1314 <option_processing+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ec:	69 a9       	ldd	r22, Y+49	; 0x31
    12ee:	7a a9       	ldd	r23, Y+50	; 0x32
    12f0:	8b a9       	ldd	r24, Y+51	; 0x33
    12f2:	9c a9       	ldd	r25, Y+52	; 0x34
    12f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	98 ab       	std	Y+48, r25	; 0x30
    12fe:	8f a7       	std	Y+47, r24	; 0x2f
    1300:	8f a5       	ldd	r24, Y+47	; 0x2f
    1302:	98 a9       	ldd	r25, Y+48	; 0x30
    1304:	9c a7       	std	Y+44, r25	; 0x2c
    1306:	8b a7       	std	Y+43, r24	; 0x2b
    1308:	8b a5       	ldd	r24, Y+43	; 0x2b
    130a:	9c a5       	ldd	r25, Y+44	; 0x2c
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <option_processing+0x290>
    1310:	9c a7       	std	Y+44, r25	; 0x2c
    1312:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x10	, passEEPROM+2);  		/* Read PASS from the external EEPROM */
    1314:	28 e8       	ldi	r18, 0x88	; 136
    1316:	31 e0       	ldi	r19, 0x01	; 1
    1318:	81 e2       	ldi	r24, 0x21	; 33
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	b9 01       	movw	r22, r18
    131e:	0e 94 93 11 	call	0x2326	; 0x2326 <EEPROM_readByte>
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a0 e2       	ldi	r26, 0x20	; 32
    1328:	b1 e4       	ldi	r27, 0x41	; 65
    132a:	8f a3       	std	Y+39, r24	; 0x27
    132c:	98 a7       	std	Y+40, r25	; 0x28
    132e:	a9 a7       	std	Y+41, r26	; 0x29
    1330:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1332:	6f a1       	ldd	r22, Y+39	; 0x27
    1334:	78 a5       	ldd	r23, Y+40	; 0x28
    1336:	89 a5       	ldd	r24, Y+41	; 0x29
    1338:	9a a5       	ldd	r25, Y+42	; 0x2a
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	4a e7       	ldi	r20, 0x7A	; 122
    1340:	53 e4       	ldi	r21, 0x43	; 67
    1342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	8b a3       	std	Y+35, r24	; 0x23
    134c:	9c a3       	std	Y+36, r25	; 0x24
    134e:	ad a3       	std	Y+37, r26	; 0x25
    1350:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1352:	6b a1       	ldd	r22, Y+35	; 0x23
    1354:	7c a1       	ldd	r23, Y+36	; 0x24
    1356:	8d a1       	ldd	r24, Y+37	; 0x25
    1358:	9e a1       	ldd	r25, Y+38	; 0x26
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e8       	ldi	r20, 0x80	; 128
    1360:	5f e3       	ldi	r21, 0x3F	; 63
    1362:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1366:	88 23       	and	r24, r24
    1368:	2c f4       	brge	.+10     	; 0x1374 <option_processing+0x2f8>
		__ticks = 1;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9a a3       	std	Y+34, r25	; 0x22
    1370:	89 a3       	std	Y+33, r24	; 0x21
    1372:	3f c0       	rjmp	.+126    	; 0x13f2 <option_processing+0x376>
	else if (__tmp > 65535)
    1374:	6b a1       	ldd	r22, Y+35	; 0x23
    1376:	7c a1       	ldd	r23, Y+36	; 0x24
    1378:	8d a1       	ldd	r24, Y+37	; 0x25
    137a:	9e a1       	ldd	r25, Y+38	; 0x26
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	3f ef       	ldi	r19, 0xFF	; 255
    1380:	4f e7       	ldi	r20, 0x7F	; 127
    1382:	57 e4       	ldi	r21, 0x47	; 71
    1384:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1388:	18 16       	cp	r1, r24
    138a:	4c f5       	brge	.+82     	; 0x13de <option_processing+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138c:	6f a1       	ldd	r22, Y+39	; 0x27
    138e:	78 a5       	ldd	r23, Y+40	; 0x28
    1390:	89 a5       	ldd	r24, Y+41	; 0x29
    1392:	9a a5       	ldd	r25, Y+42	; 0x2a
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e2       	ldi	r20, 0x20	; 32
    139a:	51 e4       	ldi	r21, 0x41	; 65
    139c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	bc 01       	movw	r22, r24
    13a6:	cd 01       	movw	r24, r26
    13a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	9a a3       	std	Y+34, r25	; 0x22
    13b2:	89 a3       	std	Y+33, r24	; 0x21
    13b4:	0f c0       	rjmp	.+30     	; 0x13d4 <option_processing+0x358>
    13b6:	89 e1       	ldi	r24, 0x19	; 25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	98 a3       	std	Y+32, r25	; 0x20
    13bc:	8f 8f       	std	Y+31, r24	; 0x1f
    13be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13c0:	98 a1       	ldd	r25, Y+32	; 0x20
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <option_processing+0x346>
    13c6:	98 a3       	std	Y+32, r25	; 0x20
    13c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ca:	89 a1       	ldd	r24, Y+33	; 0x21
    13cc:	9a a1       	ldd	r25, Y+34	; 0x22
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	9a a3       	std	Y+34, r25	; 0x22
    13d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d4:	89 a1       	ldd	r24, Y+33	; 0x21
    13d6:	9a a1       	ldd	r25, Y+34	; 0x22
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	69 f7       	brne	.-38     	; 0x13b6 <option_processing+0x33a>
    13dc:	14 c0       	rjmp	.+40     	; 0x1406 <option_processing+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13de:	6b a1       	ldd	r22, Y+35	; 0x23
    13e0:	7c a1       	ldd	r23, Y+36	; 0x24
    13e2:	8d a1       	ldd	r24, Y+37	; 0x25
    13e4:	9e a1       	ldd	r25, Y+38	; 0x26
    13e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	9a a3       	std	Y+34, r25	; 0x22
    13f0:	89 a3       	std	Y+33, r24	; 0x21
    13f2:	89 a1       	ldd	r24, Y+33	; 0x21
    13f4:	9a a1       	ldd	r25, Y+34	; 0x22
    13f6:	9e 8f       	std	Y+30, r25	; 0x1e
    13f8:	8d 8f       	std	Y+29, r24	; 0x1d
    13fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <option_processing+0x382>
    1402:	9e 8f       	std	Y+30, r25	; 0x1e
    1404:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x18	, passEEPROM+3);  		/* Read PASS from the external EEPROM */
    1406:	29 e8       	ldi	r18, 0x89	; 137
    1408:	31 e0       	ldi	r19, 0x01	; 1
    140a:	89 e2       	ldi	r24, 0x29	; 41
    140c:	93 e0       	ldi	r25, 0x03	; 3
    140e:	b9 01       	movw	r22, r18
    1410:	0e 94 93 11 	call	0x2326	; 0x2326 <EEPROM_readByte>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a0 e2       	ldi	r26, 0x20	; 32
    141a:	b1 e4       	ldi	r27, 0x41	; 65
    141c:	89 8f       	std	Y+25, r24	; 0x19
    141e:	9a 8f       	std	Y+26, r25	; 0x1a
    1420:	ab 8f       	std	Y+27, r26	; 0x1b
    1422:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1424:	69 8d       	ldd	r22, Y+25	; 0x19
    1426:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    142a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4a e7       	ldi	r20, 0x7A	; 122
    1432:	53 e4       	ldi	r21, 0x43	; 67
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	8d 8b       	std	Y+21, r24	; 0x15
    143e:	9e 8b       	std	Y+22, r25	; 0x16
    1440:	af 8b       	std	Y+23, r26	; 0x17
    1442:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1444:	6d 89       	ldd	r22, Y+21	; 0x15
    1446:	7e 89       	ldd	r23, Y+22	; 0x16
    1448:	8f 89       	ldd	r24, Y+23	; 0x17
    144a:	98 8d       	ldd	r25, Y+24	; 0x18
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	2c f4       	brge	.+10     	; 0x1466 <option_processing+0x3ea>
		__ticks = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9c 8b       	std	Y+20, r25	; 0x14
    1462:	8b 8b       	std	Y+19, r24	; 0x13
    1464:	3f c0       	rjmp	.+126    	; 0x14e4 <option_processing+0x468>
	else if (__tmp > 65535)
    1466:	6d 89       	ldd	r22, Y+21	; 0x15
    1468:	7e 89       	ldd	r23, Y+22	; 0x16
    146a:	8f 89       	ldd	r24, Y+23	; 0x17
    146c:	98 8d       	ldd	r25, Y+24	; 0x18
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	3f ef       	ldi	r19, 0xFF	; 255
    1472:	4f e7       	ldi	r20, 0x7F	; 127
    1474:	57 e4       	ldi	r21, 0x47	; 71
    1476:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    147a:	18 16       	cp	r1, r24
    147c:	4c f5       	brge	.+82     	; 0x14d0 <option_processing+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147e:	69 8d       	ldd	r22, Y+25	; 0x19
    1480:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1482:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1484:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e2       	ldi	r20, 0x20	; 32
    148c:	51 e4       	ldi	r21, 0x41	; 65
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9c 8b       	std	Y+20, r25	; 0x14
    14a4:	8b 8b       	std	Y+19, r24	; 0x13
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <option_processing+0x44a>
    14a8:	89 e1       	ldi	r24, 0x19	; 25
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9a 8b       	std	Y+18, r25	; 0x12
    14ae:	89 8b       	std	Y+17, r24	; 0x11
    14b0:	89 89       	ldd	r24, Y+17	; 0x11
    14b2:	9a 89       	ldd	r25, Y+18	; 0x12
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <option_processing+0x438>
    14b8:	9a 8b       	std	Y+18, r25	; 0x12
    14ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14bc:	8b 89       	ldd	r24, Y+19	; 0x13
    14be:	9c 89       	ldd	r25, Y+20	; 0x14
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	9c 8b       	std	Y+20, r25	; 0x14
    14c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c6:	8b 89       	ldd	r24, Y+19	; 0x13
    14c8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	69 f7       	brne	.-38     	; 0x14a8 <option_processing+0x42c>
    14ce:	14 c0       	rjmp	.+40     	; 0x14f8 <option_processing+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d0:	6d 89       	ldd	r22, Y+21	; 0x15
    14d2:	7e 89       	ldd	r23, Y+22	; 0x16
    14d4:	8f 89       	ldd	r24, Y+23	; 0x17
    14d6:	98 8d       	ldd	r25, Y+24	; 0x18
    14d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	9c 8b       	std	Y+20, r25	; 0x14
    14e2:	8b 8b       	std	Y+19, r24	; 0x13
    14e4:	8b 89       	ldd	r24, Y+19	; 0x13
    14e6:	9c 89       	ldd	r25, Y+20	; 0x14
    14e8:	98 8b       	std	Y+16, r25	; 0x10
    14ea:	8f 87       	std	Y+15, r24	; 0x0f
    14ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ee:	98 89       	ldd	r25, Y+16	; 0x10
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <option_processing+0x474>
    14f4:	98 8b       	std	Y+16, r25	; 0x10
    14f6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x20	, passEEPROM+4);  		/* Read PASS from the external EEPROM */
    14f8:	2a e8       	ldi	r18, 0x8A	; 138
    14fa:	31 e0       	ldi	r19, 0x01	; 1
    14fc:	81 e3       	ldi	r24, 0x31	; 49
    14fe:	93 e0       	ldi	r25, 0x03	; 3
    1500:	b9 01       	movw	r22, r18
    1502:	0e 94 93 11 	call	0x2326	; 0x2326 <EEPROM_readByte>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a0 e2       	ldi	r26, 0x20	; 32
    150c:	b1 e4       	ldi	r27, 0x41	; 65
    150e:	8b 87       	std	Y+11, r24	; 0x0b
    1510:	9c 87       	std	Y+12, r25	; 0x0c
    1512:	ad 87       	std	Y+13, r26	; 0x0d
    1514:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1516:	6b 85       	ldd	r22, Y+11	; 0x0b
    1518:	7c 85       	ldd	r23, Y+12	; 0x0c
    151a:	8d 85       	ldd	r24, Y+13	; 0x0d
    151c:	9e 85       	ldd	r25, Y+14	; 0x0e
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4a e7       	ldi	r20, 0x7A	; 122
    1524:	53 e4       	ldi	r21, 0x43	; 67
    1526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	8f 83       	std	Y+7, r24	; 0x07
    1530:	98 87       	std	Y+8, r25	; 0x08
    1532:	a9 87       	std	Y+9, r26	; 0x09
    1534:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1536:	6f 81       	ldd	r22, Y+7	; 0x07
    1538:	78 85       	ldd	r23, Y+8	; 0x08
    153a:	89 85       	ldd	r24, Y+9	; 0x09
    153c:	9a 85       	ldd	r25, Y+10	; 0x0a
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <option_processing+0x4dc>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <option_processing+0x55a>
	else if (__tmp > 65535)
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	57 e4       	ldi	r21, 0x47	; 71
    1568:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <option_processing+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	6b 85       	ldd	r22, Y+11	; 0x0b
    1572:	7c 85       	ldd	r23, Y+12	; 0x0c
    1574:	8d 85       	ldd	r24, Y+13	; 0x0d
    1576:	9e 85       	ldd	r25, Y+14	; 0x0e
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <option_processing+0x53c>
    159a:	89 e1       	ldi	r24, 0x19	; 25
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9c 83       	std	Y+4, r25	; 0x04
    15a0:	8b 83       	std	Y+3, r24	; 0x03
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <option_processing+0x52a>
    15aa:	9c 83       	std	Y+4, r25	; 0x04
    15ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <option_processing+0x51e>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <option_processing+0x56e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	6f 81       	ldd	r22, Y+7	; 0x07
    15c4:	78 85       	ldd	r23, Y+8	; 0x08
    15c6:	89 85       	ldd	r24, Y+9	; 0x09
    15c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <option_processing+0x566>
    15e6:	9a 83       	std	Y+2, r25	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			for(counter = 0; counter<5; counter++){
    15ea:	10 92 79 01 	sts	0x0179, r1
    15ee:	12 c0       	rjmp	.+36     	; 0x1614 <option_processing+0x598>
				if(check_pass[0] == passEEPROM[0] ){					// Check if password is correct
    15f0:	90 91 8d 01 	lds	r25, 0x018D
    15f4:	80 91 86 01 	lds	r24, 0x0186
    15f8:	98 17       	cp	r25, r24
    15fa:	49 f4       	brne	.+18     	; 0x160e <option_processing+0x592>
					eeprom_match = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	80 93 85 01 	sts	0x0185, r24
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x18	, passEEPROM+3);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x20	, passEEPROM+4);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			for(counter = 0; counter<5; counter++){
    1602:	80 91 79 01 	lds	r24, 0x0179
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	80 93 79 01 	sts	0x0179, r24
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <option_processing+0x598>
				if(check_pass[0] == passEEPROM[0] ){					// Check if password is correct
					eeprom_match = 1;
				}else{
					eeprom_match = 0;
    160e:	10 92 85 01 	sts	0x0185, r1
    1612:	04 c0       	rjmp	.+8      	; 0x161c <option_processing+0x5a0>
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x18	, passEEPROM+3);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x20	, passEEPROM+4);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			for(counter = 0; counter<5; counter++){
    1614:	80 91 79 01 	lds	r24, 0x0179
    1618:	85 30       	cpi	r24, 0x05	; 5
    161a:	50 f3       	brcs	.-44     	; 0x15f0 <option_processing+0x574>
				}else{
					eeprom_match = 0;
					break;
				}
			}
			UART_sendByte(CHECK);					//Send CHECK instruction to HMI_ECU
    161c:	84 e0       	ldi	r24, 0x04	; 4
    161e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <UART_sendByte>
			while(UART_recieveByte()!= MC1_READY){}	//Wait for HMI_ECU to be ready
    1622:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
    1626:	85 30       	cpi	r24, 0x05	; 5
    1628:	e1 f7       	brne	.-8      	; 0x1622 <option_processing+0x5a6>
			UART_sendByte(eeprom_match);			//Send the result of whether the password entered matches EEPROM Pass
    162a:	80 91 85 01 	lds	r24, 0x0185
    162e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <UART_sendByte>
			if(eeprom_match == 0){
    1632:	80 91 85 01 	lds	r24, 0x0185
    1636:	88 23       	and	r24, r24
    1638:	29 f4       	brne	.+10     	; 0x1644 <option_processing+0x5c8>
				pass_error++;						//Increment error value (Error limit = 3)
    163a:	80 91 93 01 	lds	r24, 0x0193
    163e:	8f 5f       	subi	r24, 0xFF	; 255
    1640:	80 93 93 01 	sts	0x0193, r24
	pass_error = 0;
	while(UART_recieveByte()!= OPTION){}	// Wait for option instruction
	UART_sendByte(MC2_READY);				// Send ready to receive the option
	option = UART_recieveByte();			// Store the option
	if(option == '+' || option == '-'){
		while(eeprom_match == 0 && pass_error < 3 ){
    1644:	80 91 85 01 	lds	r24, 0x0185
    1648:	88 23       	and	r24, r24
    164a:	29 f4       	brne	.+10     	; 0x1656 <option_processing+0x5da>
    164c:	80 91 93 01 	lds	r24, 0x0193
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	08 f4       	brcc	.+2      	; 0x1656 <option_processing+0x5da>
    1654:	38 cd       	rjmp	.-1424   	; 0x10c6 <option_processing+0x4a>
			if(eeprom_match == 0){
				pass_error++;						//Increment error value (Error limit = 3)
			}
		}
	}
}
    1656:	ca 5b       	subi	r28, 0xBA	; 186
    1658:	df 4f       	sbci	r29, 0xFF	; 255
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	08 95       	ret

0000166e <create_pass>:

void create_pass(void){
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!= PASS_READY){}	/****	Wait for PASS_READY instruction from HMI_ECU ****/
    167a:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	e1 f7       	brne	.-8      	; 0x167a <create_pass+0xc>
	UART_sendByte(MC2_READY);					/****	Send READY	instruction to HMI_ECU to receive PASSWORD	****/
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <UART_sendByte>
	for(counter=0; counter<5; counter++){
    1688:	10 92 79 01 	sts	0x0179, r1
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <create_pass+0x3e>
		pass[counter] = UART_recieveByte();		/**** Receive PASSWORD form HMI_ECU	****/
    168e:	80 91 79 01 	lds	r24, 0x0179
    1692:	08 2f       	mov	r16, r24
    1694:	10 e0       	ldi	r17, 0x00	; 0
    1696:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
    169a:	f8 01       	movw	r30, r16
    169c:	e5 58       	subi	r30, 0x85	; 133
    169e:	fe 4f       	sbci	r31, 0xFE	; 254
    16a0:	80 83       	st	Z, r24
}

void create_pass(void){
	while(UART_recieveByte()!= PASS_READY){}	/****	Wait for PASS_READY instruction from HMI_ECU ****/
	UART_sendByte(MC2_READY);					/****	Send READY	instruction to HMI_ECU to receive PASSWORD	****/
	for(counter=0; counter<5; counter++){
    16a2:	80 91 79 01 	lds	r24, 0x0179
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	80 93 79 01 	sts	0x0179, r24
    16ac:	80 91 79 01 	lds	r24, 0x0179
    16b0:	85 30       	cpi	r24, 0x05	; 5
    16b2:	68 f3       	brcs	.-38     	; 0x168e <create_pass+0x20>
		pass[counter] = UART_recieveByte();		/**** Receive PASSWORD form HMI_ECU	****/
	}

	while(UART_recieveByte()!= CONFIRM_READY){}	/****	Wait for CONFIRM_READY instruction from HMI_ECU ****/
    16b4:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
    16b8:	82 30       	cpi	r24, 0x02	; 2
    16ba:	e1 f7       	brne	.-8      	; 0x16b4 <create_pass+0x46>
	UART_sendByte(MC2_READY);					/****	Send READY	instruction to HMI_ECU to receive CONFIRM_PASS	****/
    16bc:	83 e0       	ldi	r24, 0x03	; 3
    16be:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <UART_sendByte>
	for(counter=0; counter<5; counter++){
    16c2:	10 92 79 01 	sts	0x0179, r1
    16c6:	0f c0       	rjmp	.+30     	; 0x16e6 <create_pass+0x78>
		confirm[counter] = UART_recieveByte();
    16c8:	80 91 79 01 	lds	r24, 0x0179
    16cc:	08 2f       	mov	r16, r24
    16ce:	10 e0       	ldi	r17, 0x00	; 0
    16d0:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
    16d4:	f8 01       	movw	r30, r16
    16d6:	e0 58       	subi	r30, 0x80	; 128
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
    16da:	80 83       	st	Z, r24
		pass[counter] = UART_recieveByte();		/**** Receive PASSWORD form HMI_ECU	****/
	}

	while(UART_recieveByte()!= CONFIRM_READY){}	/****	Wait for CONFIRM_READY instruction from HMI_ECU ****/
	UART_sendByte(MC2_READY);					/****	Send READY	instruction to HMI_ECU to receive CONFIRM_PASS	****/
	for(counter=0; counter<5; counter++){
    16dc:	80 91 79 01 	lds	r24, 0x0179
    16e0:	8f 5f       	subi	r24, 0xFF	; 255
    16e2:	80 93 79 01 	sts	0x0179, r24
    16e6:	80 91 79 01 	lds	r24, 0x0179
    16ea:	85 30       	cpi	r24, 0x05	; 5
    16ec:	68 f3       	brcs	.-38     	; 0x16c8 <create_pass+0x5a>
		confirm[counter] = UART_recieveByte();
	}

	for(counter = 0; counter<5; counter++){		/****	Check if the two passwords match	****/
    16ee:	10 92 79 01 	sts	0x0179, r1
    16f2:	1e c0       	rjmp	.+60     	; 0x1730 <create_pass+0xc2>
		if(pass[counter] == confirm[counter]){	//Compare between PASSWORD and CONFIRMATION PASSWORD
    16f4:	80 91 79 01 	lds	r24, 0x0179
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	fc 01       	movw	r30, r24
    16fe:	e5 58       	subi	r30, 0x85	; 133
    1700:	fe 4f       	sbci	r31, 0xFE	; 254
    1702:	20 81       	ld	r18, Z
    1704:	80 91 79 01 	lds	r24, 0x0179
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	fc 01       	movw	r30, r24
    170e:	e0 58       	subi	r30, 0x80	; 128
    1710:	fe 4f       	sbci	r31, 0xFE	; 254
    1712:	80 81       	ld	r24, Z
    1714:	28 17       	cp	r18, r24
    1716:	49 f4       	brne	.+18     	; 0x172a <create_pass+0xbc>
			pass_match = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	80 93 7a 01 	sts	0x017A, r24
	UART_sendByte(MC2_READY);					/****	Send READY	instruction to HMI_ECU to receive CONFIRM_PASS	****/
	for(counter=0; counter<5; counter++){
		confirm[counter] = UART_recieveByte();
	}

	for(counter = 0; counter<5; counter++){		/****	Check if the two passwords match	****/
    171e:	80 91 79 01 	lds	r24, 0x0179
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	80 93 79 01 	sts	0x0179, r24
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <create_pass+0xc2>
		if(pass[counter] == confirm[counter]){	//Compare between PASSWORD and CONFIRMATION PASSWORD
			pass_match = 1;
		}else{
			pass_match = 0;
    172a:	10 92 7a 01 	sts	0x017A, r1
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <create_pass+0xca>
	UART_sendByte(MC2_READY);					/****	Send READY	instruction to HMI_ECU to receive CONFIRM_PASS	****/
	for(counter=0; counter<5; counter++){
		confirm[counter] = UART_recieveByte();
	}

	for(counter = 0; counter<5; counter++){		/****	Check if the two passwords match	****/
    1730:	80 91 79 01 	lds	r24, 0x0179
    1734:	85 30       	cpi	r24, 0x05	; 5
    1736:	f0 f2       	brcs	.-68     	; 0x16f4 <create_pass+0x86>
		}else{
			pass_match = 0;
			break;
		}
	}
}
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <EEPROM_WRITE_PASS>:

void EEPROM_WRITE_PASS(uint8 arr[]){
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	c8 54       	subi	r28, 0x48	; 72
    1750:	d0 40       	sbci	r29, 0x00	; 0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	fe 01       	movw	r30, r28
    175e:	e9 5b       	subi	r30, 0xB9	; 185
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	80 83       	st	Z, r24
	EEPROM_writeByte(PASS_ADDRESS		, pass[0]);  		/* Write PASS in the external EEPROM */
    1766:	20 91 7b 01 	lds	r18, 0x017B
    176a:	81 e1       	ldi	r24, 0x11	; 17
    176c:	93 e0       	ldi	r25, 0x03	; 3
    176e:	62 2f       	mov	r22, r18
    1770:	0e 94 52 11 	call	0x22a4	; 0x22a4 <EEPROM_writeByte>
    1774:	fe 01       	movw	r30, r28
    1776:	ed 5b       	subi	r30, 0xBD	; 189
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a0 e2       	ldi	r26, 0x20	; 32
    1780:	b1 e4       	ldi	r27, 0x41	; 65
    1782:	80 83       	st	Z, r24
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	a2 83       	std	Z+2, r26	; 0x02
    1788:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178a:	8e 01       	movw	r16, r28
    178c:	01 5c       	subi	r16, 0xC1	; 193
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	fe 01       	movw	r30, r28
    1792:	ed 5b       	subi	r30, 0xBD	; 189
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	60 81       	ld	r22, Z
    1798:	71 81       	ldd	r23, Z+1	; 0x01
    179a:	82 81       	ldd	r24, Z+2	; 0x02
    179c:	93 81       	ldd	r25, Z+3	; 0x03
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	4a e7       	ldi	r20, 0x7A	; 122
    17a4:	53 e4       	ldi	r21, 0x43	; 67
    17a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	f8 01       	movw	r30, r16
    17b0:	80 83       	st	Z, r24
    17b2:	91 83       	std	Z+1, r25	; 0x01
    17b4:	a2 83       	std	Z+2, r26	; 0x02
    17b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b8:	fe 01       	movw	r30, r28
    17ba:	ff 96       	adiw	r30, 0x3f	; 63
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	82 81       	ldd	r24, Z+2	; 0x02
    17c2:	93 81       	ldd	r25, Z+3	; 0x03
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17d0:	88 23       	and	r24, r24
    17d2:	2c f4       	brge	.+10     	; 0x17de <EEPROM_WRITE_PASS+0x9c>
		__ticks = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9e af       	std	Y+62, r25	; 0x3e
    17da:	8d af       	std	Y+61, r24	; 0x3d
    17dc:	46 c0       	rjmp	.+140    	; 0x186a <EEPROM_WRITE_PASS+0x128>
	else if (__tmp > 65535)
    17de:	fe 01       	movw	r30, r28
    17e0:	ff 96       	adiw	r30, 0x3f	; 63
    17e2:	60 81       	ld	r22, Z
    17e4:	71 81       	ldd	r23, Z+1	; 0x01
    17e6:	82 81       	ldd	r24, Z+2	; 0x02
    17e8:	93 81       	ldd	r25, Z+3	; 0x03
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	3f ef       	ldi	r19, 0xFF	; 255
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	57 e4       	ldi	r21, 0x47	; 71
    17f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17f6:	18 16       	cp	r1, r24
    17f8:	64 f5       	brge	.+88     	; 0x1852 <EEPROM_WRITE_PASS+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	fe 01       	movw	r30, r28
    17fc:	ed 5b       	subi	r30, 0xBD	; 189
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e2       	ldi	r20, 0x20	; 32
    180e:	51 e4       	ldi	r21, 0x41	; 65
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	bc 01       	movw	r22, r24
    181a:	cd 01       	movw	r24, r26
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	9e af       	std	Y+62, r25	; 0x3e
    1826:	8d af       	std	Y+61, r24	; 0x3d
    1828:	0f c0       	rjmp	.+30     	; 0x1848 <EEPROM_WRITE_PASS+0x106>
    182a:	89 e1       	ldi	r24, 0x19	; 25
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	9c af       	std	Y+60, r25	; 0x3c
    1830:	8b af       	std	Y+59, r24	; 0x3b
    1832:	8b ad       	ldd	r24, Y+59	; 0x3b
    1834:	9c ad       	ldd	r25, Y+60	; 0x3c
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <EEPROM_WRITE_PASS+0xf4>
    183a:	9c af       	std	Y+60, r25	; 0x3c
    183c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1840:	9e ad       	ldd	r25, Y+62	; 0x3e
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	9e af       	std	Y+62, r25	; 0x3e
    1846:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1848:	8d ad       	ldd	r24, Y+61	; 0x3d
    184a:	9e ad       	ldd	r25, Y+62	; 0x3e
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	69 f7       	brne	.-38     	; 0x182a <EEPROM_WRITE_PASS+0xe8>
    1850:	16 c0       	rjmp	.+44     	; 0x187e <EEPROM_WRITE_PASS+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1852:	fe 01       	movw	r30, r28
    1854:	ff 96       	adiw	r30, 0x3f	; 63
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9e af       	std	Y+62, r25	; 0x3e
    1868:	8d af       	std	Y+61, r24	; 0x3d
    186a:	8d ad       	ldd	r24, Y+61	; 0x3d
    186c:	9e ad       	ldd	r25, Y+62	; 0x3e
    186e:	9a af       	std	Y+58, r25	; 0x3a
    1870:	89 af       	std	Y+57, r24	; 0x39
    1872:	89 ad       	ldd	r24, Y+57	; 0x39
    1874:	9a ad       	ldd	r25, Y+58	; 0x3a
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <EEPROM_WRITE_PASS+0x134>
    187a:	9a af       	std	Y+58, r25	; 0x3a
    187c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x8	, pass[1]);  		/* Write PASS in the external EEPROM */
    187e:	20 91 7c 01 	lds	r18, 0x017C
    1882:	89 e1       	ldi	r24, 0x19	; 25
    1884:	93 e0       	ldi	r25, 0x03	; 3
    1886:	62 2f       	mov	r22, r18
    1888:	0e 94 52 11 	call	0x22a4	; 0x22a4 <EEPROM_writeByte>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a0 e2       	ldi	r26, 0x20	; 32
    1892:	b1 e4       	ldi	r27, 0x41	; 65
    1894:	8d ab       	std	Y+53, r24	; 0x35
    1896:	9e ab       	std	Y+54, r25	; 0x36
    1898:	af ab       	std	Y+55, r26	; 0x37
    189a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189c:	6d a9       	ldd	r22, Y+53	; 0x35
    189e:	7e a9       	ldd	r23, Y+54	; 0x36
    18a0:	8f a9       	ldd	r24, Y+55	; 0x37
    18a2:	98 ad       	ldd	r25, Y+56	; 0x38
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4a e7       	ldi	r20, 0x7A	; 122
    18aa:	53 e4       	ldi	r21, 0x43	; 67
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	89 ab       	std	Y+49, r24	; 0x31
    18b6:	9a ab       	std	Y+50, r25	; 0x32
    18b8:	ab ab       	std	Y+51, r26	; 0x33
    18ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18bc:	69 a9       	ldd	r22, Y+49	; 0x31
    18be:	7a a9       	ldd	r23, Y+50	; 0x32
    18c0:	8b a9       	ldd	r24, Y+51	; 0x33
    18c2:	9c a9       	ldd	r25, Y+52	; 0x34
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	2c f4       	brge	.+10     	; 0x18de <EEPROM_WRITE_PASS+0x19c>
		__ticks = 1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	98 ab       	std	Y+48, r25	; 0x30
    18da:	8f a7       	std	Y+47, r24	; 0x2f
    18dc:	3f c0       	rjmp	.+126    	; 0x195c <EEPROM_WRITE_PASS+0x21a>
	else if (__tmp > 65535)
    18de:	69 a9       	ldd	r22, Y+49	; 0x31
    18e0:	7a a9       	ldd	r23, Y+50	; 0x32
    18e2:	8b a9       	ldd	r24, Y+51	; 0x33
    18e4:	9c a9       	ldd	r25, Y+52	; 0x34
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3f ef       	ldi	r19, 0xFF	; 255
    18ea:	4f e7       	ldi	r20, 0x7F	; 127
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	4c f5       	brge	.+82     	; 0x1948 <EEPROM_WRITE_PASS+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f6:	6d a9       	ldd	r22, Y+53	; 0x35
    18f8:	7e a9       	ldd	r23, Y+54	; 0x36
    18fa:	8f a9       	ldd	r24, Y+55	; 0x37
    18fc:	98 ad       	ldd	r25, Y+56	; 0x38
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e2       	ldi	r20, 0x20	; 32
    1904:	51 e4       	ldi	r21, 0x41	; 65
    1906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	98 ab       	std	Y+48, r25	; 0x30
    191c:	8f a7       	std	Y+47, r24	; 0x2f
    191e:	0f c0       	rjmp	.+30     	; 0x193e <EEPROM_WRITE_PASS+0x1fc>
    1920:	89 e1       	ldi	r24, 0x19	; 25
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9e a7       	std	Y+46, r25	; 0x2e
    1926:	8d a7       	std	Y+45, r24	; 0x2d
    1928:	8d a5       	ldd	r24, Y+45	; 0x2d
    192a:	9e a5       	ldd	r25, Y+46	; 0x2e
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <EEPROM_WRITE_PASS+0x1ea>
    1930:	9e a7       	std	Y+46, r25	; 0x2e
    1932:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	8f a5       	ldd	r24, Y+47	; 0x2f
    1936:	98 a9       	ldd	r25, Y+48	; 0x30
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	98 ab       	std	Y+48, r25	; 0x30
    193c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1940:	98 a9       	ldd	r25, Y+48	; 0x30
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	69 f7       	brne	.-38     	; 0x1920 <EEPROM_WRITE_PASS+0x1de>
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <EEPROM_WRITE_PASS+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	69 a9       	ldd	r22, Y+49	; 0x31
    194a:	7a a9       	ldd	r23, Y+50	; 0x32
    194c:	8b a9       	ldd	r24, Y+51	; 0x33
    194e:	9c a9       	ldd	r25, Y+52	; 0x34
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	98 ab       	std	Y+48, r25	; 0x30
    195a:	8f a7       	std	Y+47, r24	; 0x2f
    195c:	8f a5       	ldd	r24, Y+47	; 0x2f
    195e:	98 a9       	ldd	r25, Y+48	; 0x30
    1960:	9c a7       	std	Y+44, r25	; 0x2c
    1962:	8b a7       	std	Y+43, r24	; 0x2b
    1964:	8b a5       	ldd	r24, Y+43	; 0x2b
    1966:	9c a5       	ldd	r25, Y+44	; 0x2c
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <EEPROM_WRITE_PASS+0x226>
    196c:	9c a7       	std	Y+44, r25	; 0x2c
    196e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x10	, pass[2]);  		/* Write PASS in the external EEPROM */
    1970:	20 91 7d 01 	lds	r18, 0x017D
    1974:	81 e2       	ldi	r24, 0x21	; 33
    1976:	93 e0       	ldi	r25, 0x03	; 3
    1978:	62 2f       	mov	r22, r18
    197a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <EEPROM_writeByte>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a0 e2       	ldi	r26, 0x20	; 32
    1984:	b1 e4       	ldi	r27, 0x41	; 65
    1986:	8f a3       	std	Y+39, r24	; 0x27
    1988:	98 a7       	std	Y+40, r25	; 0x28
    198a:	a9 a7       	std	Y+41, r26	; 0x29
    198c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	6f a1       	ldd	r22, Y+39	; 0x27
    1990:	78 a5       	ldd	r23, Y+40	; 0x28
    1992:	89 a5       	ldd	r24, Y+41	; 0x29
    1994:	9a a5       	ldd	r25, Y+42	; 0x2a
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a e7       	ldi	r20, 0x7A	; 122
    199c:	53 e4       	ldi	r21, 0x43	; 67
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8b a3       	std	Y+35, r24	; 0x23
    19a8:	9c a3       	std	Y+36, r25	; 0x24
    19aa:	ad a3       	std	Y+37, r26	; 0x25
    19ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19ae:	6b a1       	ldd	r22, Y+35	; 0x23
    19b0:	7c a1       	ldd	r23, Y+36	; 0x24
    19b2:	8d a1       	ldd	r24, Y+37	; 0x25
    19b4:	9e a1       	ldd	r25, Y+38	; 0x26
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <EEPROM_WRITE_PASS+0x28e>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9a a3       	std	Y+34, r25	; 0x22
    19cc:	89 a3       	std	Y+33, r24	; 0x21
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <EEPROM_WRITE_PASS+0x30c>
	else if (__tmp > 65535)
    19d0:	6b a1       	ldd	r22, Y+35	; 0x23
    19d2:	7c a1       	ldd	r23, Y+36	; 0x24
    19d4:	8d a1       	ldd	r24, Y+37	; 0x25
    19d6:	9e a1       	ldd	r25, Y+38	; 0x26
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <EEPROM_WRITE_PASS+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	6f a1       	ldd	r22, Y+39	; 0x27
    19ea:	78 a5       	ldd	r23, Y+40	; 0x28
    19ec:	89 a5       	ldd	r24, Y+41	; 0x29
    19ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9a a3       	std	Y+34, r25	; 0x22
    1a0e:	89 a3       	std	Y+33, r24	; 0x21
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <EEPROM_WRITE_PASS+0x2ee>
    1a12:	89 e1       	ldi	r24, 0x19	; 25
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	98 a3       	std	Y+32, r25	; 0x20
    1a18:	8f 8f       	std	Y+31, r24	; 0x1f
    1a1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <EEPROM_WRITE_PASS+0x2dc>
    1a22:	98 a3       	std	Y+32, r25	; 0x20
    1a24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	89 a1       	ldd	r24, Y+33	; 0x21
    1a28:	9a a1       	ldd	r25, Y+34	; 0x22
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	9a a3       	std	Y+34, r25	; 0x22
    1a2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	89 a1       	ldd	r24, Y+33	; 0x21
    1a32:	9a a1       	ldd	r25, Y+34	; 0x22
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <EEPROM_WRITE_PASS+0x2d0>
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <EEPROM_WRITE_PASS+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a40:	9e a1       	ldd	r25, Y+38	; 0x26
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9a a3       	std	Y+34, r25	; 0x22
    1a4c:	89 a3       	std	Y+33, r24	; 0x21
    1a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a50:	9a a1       	ldd	r25, Y+34	; 0x22
    1a52:	9e 8f       	std	Y+30, r25	; 0x1e
    1a54:	8d 8f       	std	Y+29, r24	; 0x1d
    1a56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <EEPROM_WRITE_PASS+0x318>
    1a5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a60:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x18	, pass[3]);  		/* Write PASS in the external EEPROM */
    1a62:	20 91 7e 01 	lds	r18, 0x017E
    1a66:	89 e2       	ldi	r24, 0x29	; 41
    1a68:	93 e0       	ldi	r25, 0x03	; 3
    1a6a:	62 2f       	mov	r22, r18
    1a6c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <EEPROM_writeByte>
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a0 e2       	ldi	r26, 0x20	; 32
    1a76:	b1 e4       	ldi	r27, 0x41	; 65
    1a78:	89 8f       	std	Y+25, r24	; 0x19
    1a7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a80:	69 8d       	ldd	r22, Y+25	; 0x19
    1a82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	4a e7       	ldi	r20, 0x7A	; 122
    1a8e:	53 e4       	ldi	r21, 0x43	; 67
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	8d 8b       	std	Y+21, r24	; 0x15
    1a9a:	9e 8b       	std	Y+22, r25	; 0x16
    1a9c:	af 8b       	std	Y+23, r26	; 0x17
    1a9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <EEPROM_WRITE_PASS+0x380>
		__ticks = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9c 8b       	std	Y+20, r25	; 0x14
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
    1ac0:	3f c0       	rjmp	.+126    	; 0x1b40 <EEPROM_WRITE_PASS+0x3fe>
	else if (__tmp > 65535)
    1ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	3f ef       	ldi	r19, 0xFF	; 255
    1ace:	4f e7       	ldi	r20, 0x7F	; 127
    1ad0:	57 e4       	ldi	r21, 0x47	; 71
    1ad2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad6:	18 16       	cp	r1, r24
    1ad8:	4c f5       	brge	.+82     	; 0x1b2c <EEPROM_WRITE_PASS+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ada:	69 8d       	ldd	r22, Y+25	; 0x19
    1adc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ade:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e2       	ldi	r20, 0x20	; 32
    1ae8:	51 e4       	ldi	r21, 0x41	; 65
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	bc 01       	movw	r22, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9c 8b       	std	Y+20, r25	; 0x14
    1b00:	8b 8b       	std	Y+19, r24	; 0x13
    1b02:	0f c0       	rjmp	.+30     	; 0x1b22 <EEPROM_WRITE_PASS+0x3e0>
    1b04:	89 e1       	ldi	r24, 0x19	; 25
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9a 8b       	std	Y+18, r25	; 0x12
    1b0a:	89 8b       	std	Y+17, r24	; 0x11
    1b0c:	89 89       	ldd	r24, Y+17	; 0x11
    1b0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <EEPROM_WRITE_PASS+0x3ce>
    1b14:	9a 8b       	std	Y+18, r25	; 0x12
    1b16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b18:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	9c 8b       	std	Y+20, r25	; 0x14
    1b20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b22:	8b 89       	ldd	r24, Y+19	; 0x13
    1b24:	9c 89       	ldd	r25, Y+20	; 0x14
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	69 f7       	brne	.-38     	; 0x1b04 <EEPROM_WRITE_PASS+0x3c2>
    1b2a:	14 c0       	rjmp	.+40     	; 0x1b54 <EEPROM_WRITE_PASS+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b30:	8f 89       	ldd	r24, Y+23	; 0x17
    1b32:	98 8d       	ldd	r25, Y+24	; 0x18
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9c 8b       	std	Y+20, r25	; 0x14
    1b3e:	8b 8b       	std	Y+19, r24	; 0x13
    1b40:	8b 89       	ldd	r24, Y+19	; 0x13
    1b42:	9c 89       	ldd	r25, Y+20	; 0x14
    1b44:	98 8b       	std	Y+16, r25	; 0x10
    1b46:	8f 87       	std	Y+15, r24	; 0x0f
    1b48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b4a:	98 89       	ldd	r25, Y+16	; 0x10
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	f1 f7       	brne	.-4      	; 0x1b4c <EEPROM_WRITE_PASS+0x40a>
    1b50:	98 8b       	std	Y+16, r25	; 0x10
    1b52:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x20	, pass[4]);  		/* Write PASS in the external EEPROM */
    1b54:	20 91 7f 01 	lds	r18, 0x017F
    1b58:	81 e3       	ldi	r24, 0x31	; 49
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	62 2f       	mov	r22, r18
    1b5e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <EEPROM_writeByte>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a0 e2       	ldi	r26, 0x20	; 32
    1b68:	b1 e4       	ldi	r27, 0x41	; 65
    1b6a:	8b 87       	std	Y+11, r24	; 0x0b
    1b6c:	9c 87       	std	Y+12, r25	; 0x0c
    1b6e:	ad 87       	std	Y+13, r26	; 0x0d
    1b70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	4a e7       	ldi	r20, 0x7A	; 122
    1b80:	53 e4       	ldi	r21, 0x43	; 67
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	8f 83       	std	Y+7, r24	; 0x07
    1b8c:	98 87       	std	Y+8, r25	; 0x08
    1b8e:	a9 87       	std	Y+9, r26	; 0x09
    1b90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b92:	6f 81       	ldd	r22, Y+7	; 0x07
    1b94:	78 85       	ldd	r23, Y+8	; 0x08
    1b96:	89 85       	ldd	r24, Y+9	; 0x09
    1b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e8       	ldi	r20, 0x80	; 128
    1ba0:	5f e3       	ldi	r21, 0x3F	; 63
    1ba2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	2c f4       	brge	.+10     	; 0x1bb4 <EEPROM_WRITE_PASS+0x472>
		__ticks = 1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9e 83       	std	Y+6, r25	; 0x06
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
    1bb2:	3f c0       	rjmp	.+126    	; 0x1c32 <EEPROM_WRITE_PASS+0x4f0>
	else if (__tmp > 65535)
    1bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb6:	78 85       	ldd	r23, Y+8	; 0x08
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	3f ef       	ldi	r19, 0xFF	; 255
    1bc0:	4f e7       	ldi	r20, 0x7F	; 127
    1bc2:	57 e4       	ldi	r21, 0x47	; 71
    1bc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bc8:	18 16       	cp	r1, r24
    1bca:	4c f5       	brge	.+82     	; 0x1c1e <EEPROM_WRITE_PASS+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e2       	ldi	r20, 0x20	; 32
    1bda:	51 e4       	ldi	r21, 0x41	; 65
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	bc 01       	movw	r22, r24
    1be6:	cd 01       	movw	r24, r26
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	0f c0       	rjmp	.+30     	; 0x1c14 <EEPROM_WRITE_PASS+0x4d2>
    1bf6:	89 e1       	ldi	r24, 0x19	; 25
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9c 83       	std	Y+4, r25	; 0x04
    1bfc:	8b 83       	std	Y+3, r24	; 0x03
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <EEPROM_WRITE_PASS+0x4c0>
    1c06:	9c 83       	std	Y+4, r25	; 0x04
    1c08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c14:	8d 81       	ldd	r24, Y+5	; 0x05
    1c16:	9e 81       	ldd	r25, Y+6	; 0x06
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	69 f7       	brne	.-38     	; 0x1bf6 <EEPROM_WRITE_PASS+0x4b4>
    1c1c:	14 c0       	rjmp	.+40     	; 0x1c46 <EEPROM_WRITE_PASS+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c20:	78 85       	ldd	r23, Y+8	; 0x08
    1c22:	89 85       	ldd	r24, Y+9	; 0x09
    1c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	9a 83       	std	Y+2, r25	; 0x02
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <EEPROM_WRITE_PASS+0x4fc>
    1c42:	9a 83       	std	Y+2, r25	; 0x02
    1c44:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1c46:	c8 5b       	subi	r28, 0xB8	; 184
    1c48:	df 4f       	sbci	r29, 0xFF	; 255
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
    1c5c:	08 95       	ret

00001c5e <EEPROM_WRITE_CONFRIM>:
void EEPROM_WRITE_CONFRIM(uint8 arr[]){
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	c8 54       	subi	r28, 0x48	; 72
    1c6c:	d0 40       	sbci	r29, 0x00	; 0
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e9 5b       	subi	r30, 0xB9	; 185
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	80 83       	st	Z, r24
	EEPROM_writeByte(RECONFIRM_ADDRESS		, pass[0]);  		/* Write PASS in the external EEPROM */
    1c82:	20 91 7b 01 	lds	r18, 0x017B
    1c86:	89 e3       	ldi	r24, 0x39	; 57
    1c88:	93 e0       	ldi	r25, 0x03	; 3
    1c8a:	62 2f       	mov	r22, r18
    1c8c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <EEPROM_writeByte>
    1c90:	fe 01       	movw	r30, r28
    1c92:	ed 5b       	subi	r30, 0xBD	; 189
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 e2       	ldi	r26, 0x20	; 32
    1c9c:	b1 e4       	ldi	r27, 0x41	; 65
    1c9e:	80 83       	st	Z, r24
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	a2 83       	std	Z+2, r26	; 0x02
    1ca4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	8e 01       	movw	r16, r28
    1ca8:	01 5c       	subi	r16, 0xC1	; 193
    1caa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cac:	fe 01       	movw	r30, r28
    1cae:	ed 5b       	subi	r30, 0xBD	; 189
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a e7       	ldi	r20, 0x7A	; 122
    1cc0:	53 e4       	ldi	r21, 0x43	; 67
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	f8 01       	movw	r30, r16
    1ccc:	80 83       	st	Z, r24
    1cce:	91 83       	std	Z+1, r25	; 0x01
    1cd0:	a2 83       	std	Z+2, r26	; 0x02
    1cd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	ff 96       	adiw	r30, 0x3f	; 63
    1cd8:	60 81       	ld	r22, Z
    1cda:	71 81       	ldd	r23, Z+1	; 0x01
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e8       	ldi	r20, 0x80	; 128
    1ce6:	5f e3       	ldi	r21, 0x3F	; 63
    1ce8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cec:	88 23       	and	r24, r24
    1cee:	2c f4       	brge	.+10     	; 0x1cfa <EEPROM_WRITE_CONFRIM+0x9c>
		__ticks = 1;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9e af       	std	Y+62, r25	; 0x3e
    1cf6:	8d af       	std	Y+61, r24	; 0x3d
    1cf8:	46 c0       	rjmp	.+140    	; 0x1d86 <EEPROM_WRITE_CONFRIM+0x128>
	else if (__tmp > 65535)
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ff 96       	adiw	r30, 0x3f	; 63
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	64 f5       	brge	.+88     	; 0x1d6e <EEPROM_WRITE_CONFRIM+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	fe 01       	movw	r30, r28
    1d18:	ed 5b       	subi	r30, 0xBD	; 189
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e2       	ldi	r20, 0x20	; 32
    1d2a:	51 e4       	ldi	r21, 0x41	; 65
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9e af       	std	Y+62, r25	; 0x3e
    1d42:	8d af       	std	Y+61, r24	; 0x3d
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <EEPROM_WRITE_CONFRIM+0x106>
    1d46:	89 e1       	ldi	r24, 0x19	; 25
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9c af       	std	Y+60, r25	; 0x3c
    1d4c:	8b af       	std	Y+59, r24	; 0x3b
    1d4e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d50:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <EEPROM_WRITE_CONFRIM+0xf4>
    1d56:	9c af       	std	Y+60, r25	; 0x3c
    1d58:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	9e af       	std	Y+62, r25	; 0x3e
    1d62:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	69 f7       	brne	.-38     	; 0x1d46 <EEPROM_WRITE_CONFRIM+0xe8>
    1d6c:	16 c0       	rjmp	.+44     	; 0x1d9a <EEPROM_WRITE_CONFRIM+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6e:	fe 01       	movw	r30, r28
    1d70:	ff 96       	adiw	r30, 0x3f	; 63
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9e af       	std	Y+62, r25	; 0x3e
    1d84:	8d af       	std	Y+61, r24	; 0x3d
    1d86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d8a:	9a af       	std	Y+58, r25	; 0x3a
    1d8c:	89 af       	std	Y+57, r24	; 0x39
    1d8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d90:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <EEPROM_WRITE_CONFRIM+0x134>
    1d96:	9a af       	std	Y+58, r25	; 0x3a
    1d98:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+0x8	, pass[1]);  		/* Write PASS in the external EEPROM */
    1d9a:	20 91 7c 01 	lds	r18, 0x017C
    1d9e:	81 e4       	ldi	r24, 0x41	; 65
    1da0:	93 e0       	ldi	r25, 0x03	; 3
    1da2:	62 2f       	mov	r22, r18
    1da4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <EEPROM_writeByte>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e2       	ldi	r26, 0x20	; 32
    1dae:	b1 e4       	ldi	r27, 0x41	; 65
    1db0:	8d ab       	std	Y+53, r24	; 0x35
    1db2:	9e ab       	std	Y+54, r25	; 0x36
    1db4:	af ab       	std	Y+55, r26	; 0x37
    1db6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	6d a9       	ldd	r22, Y+53	; 0x35
    1dba:	7e a9       	ldd	r23, Y+54	; 0x36
    1dbc:	8f a9       	ldd	r24, Y+55	; 0x37
    1dbe:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a e7       	ldi	r20, 0x7A	; 122
    1dc6:	53 e4       	ldi	r21, 0x43	; 67
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	89 ab       	std	Y+49, r24	; 0x31
    1dd2:	9a ab       	std	Y+50, r25	; 0x32
    1dd4:	ab ab       	std	Y+51, r26	; 0x33
    1dd6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dd8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dda:	7a a9       	ldd	r23, Y+50	; 0x32
    1ddc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dde:	9c a9       	ldd	r25, Y+52	; 0x34
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <EEPROM_WRITE_CONFRIM+0x19c>
		__ticks = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	98 ab       	std	Y+48, r25	; 0x30
    1df6:	8f a7       	std	Y+47, r24	; 0x2f
    1df8:	3f c0       	rjmp	.+126    	; 0x1e78 <EEPROM_WRITE_CONFRIM+0x21a>
	else if (__tmp > 65535)
    1dfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1e00:	9c a9       	ldd	r25, Y+52	; 0x34
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	3f ef       	ldi	r19, 0xFF	; 255
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	57 e4       	ldi	r21, 0x47	; 71
    1e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	4c f5       	brge	.+82     	; 0x1e64 <EEPROM_WRITE_CONFRIM+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e12:	6d a9       	ldd	r22, Y+53	; 0x35
    1e14:	7e a9       	ldd	r23, Y+54	; 0x36
    1e16:	8f a9       	ldd	r24, Y+55	; 0x37
    1e18:	98 ad       	ldd	r25, Y+56	; 0x38
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e2       	ldi	r20, 0x20	; 32
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	98 ab       	std	Y+48, r25	; 0x30
    1e38:	8f a7       	std	Y+47, r24	; 0x2f
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <EEPROM_WRITE_CONFRIM+0x1fc>
    1e3c:	89 e1       	ldi	r24, 0x19	; 25
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9e a7       	std	Y+46, r25	; 0x2e
    1e42:	8d a7       	std	Y+45, r24	; 0x2d
    1e44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e46:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <EEPROM_WRITE_CONFRIM+0x1ea>
    1e4c:	9e a7       	std	Y+46, r25	; 0x2e
    1e4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e52:	98 a9       	ldd	r25, Y+48	; 0x30
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	98 ab       	std	Y+48, r25	; 0x30
    1e58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	69 f7       	brne	.-38     	; 0x1e3c <EEPROM_WRITE_CONFRIM+0x1de>
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <EEPROM_WRITE_CONFRIM+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e64:	69 a9       	ldd	r22, Y+49	; 0x31
    1e66:	7a a9       	ldd	r23, Y+50	; 0x32
    1e68:	8b a9       	ldd	r24, Y+51	; 0x33
    1e6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	98 ab       	std	Y+48, r25	; 0x30
    1e76:	8f a7       	std	Y+47, r24	; 0x2f
    1e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e7c:	9c a7       	std	Y+44, r25	; 0x2c
    1e7e:	8b a7       	std	Y+43, r24	; 0x2b
    1e80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <EEPROM_WRITE_CONFRIM+0x226>
    1e88:	9c a7       	std	Y+44, r25	; 0x2c
    1e8a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+0x10, pass[2]);  		/* Write PASS in the external EEPROM */
    1e8c:	20 91 7d 01 	lds	r18, 0x017D
    1e90:	89 e4       	ldi	r24, 0x49	; 73
    1e92:	93 e0       	ldi	r25, 0x03	; 3
    1e94:	62 2f       	mov	r22, r18
    1e96:	0e 94 52 11 	call	0x22a4	; 0x22a4 <EEPROM_writeByte>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a0 e2       	ldi	r26, 0x20	; 32
    1ea0:	b1 e4       	ldi	r27, 0x41	; 65
    1ea2:	8f a3       	std	Y+39, r24	; 0x27
    1ea4:	98 a7       	std	Y+40, r25	; 0x28
    1ea6:	a9 a7       	std	Y+41, r26	; 0x29
    1ea8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eaa:	6f a1       	ldd	r22, Y+39	; 0x27
    1eac:	78 a5       	ldd	r23, Y+40	; 0x28
    1eae:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a e7       	ldi	r20, 0x7A	; 122
    1eb8:	53 e4       	ldi	r21, 0x43	; 67
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8b a3       	std	Y+35, r24	; 0x23
    1ec4:	9c a3       	std	Y+36, r25	; 0x24
    1ec6:	ad a3       	std	Y+37, r26	; 0x25
    1ec8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eca:	6b a1       	ldd	r22, Y+35	; 0x23
    1ecc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ece:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e8       	ldi	r20, 0x80	; 128
    1ed8:	5f e3       	ldi	r21, 0x3F	; 63
    1eda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ede:	88 23       	and	r24, r24
    1ee0:	2c f4       	brge	.+10     	; 0x1eec <EEPROM_WRITE_CONFRIM+0x28e>
		__ticks = 1;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9a a3       	std	Y+34, r25	; 0x22
    1ee8:	89 a3       	std	Y+33, r24	; 0x21
    1eea:	3f c0       	rjmp	.+126    	; 0x1f6a <EEPROM_WRITE_CONFRIM+0x30c>
	else if (__tmp > 65535)
    1eec:	6b a1       	ldd	r22, Y+35	; 0x23
    1eee:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	3f ef       	ldi	r19, 0xFF	; 255
    1ef8:	4f e7       	ldi	r20, 0x7F	; 127
    1efa:	57 e4       	ldi	r21, 0x47	; 71
    1efc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f00:	18 16       	cp	r1, r24
    1f02:	4c f5       	brge	.+82     	; 0x1f56 <EEPROM_WRITE_CONFRIM+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f04:	6f a1       	ldd	r22, Y+39	; 0x27
    1f06:	78 a5       	ldd	r23, Y+40	; 0x28
    1f08:	89 a5       	ldd	r24, Y+41	; 0x29
    1f0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e2       	ldi	r20, 0x20	; 32
    1f12:	51 e4       	ldi	r21, 0x41	; 65
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9a a3       	std	Y+34, r25	; 0x22
    1f2a:	89 a3       	std	Y+33, r24	; 0x21
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <EEPROM_WRITE_CONFRIM+0x2ee>
    1f2e:	89 e1       	ldi	r24, 0x19	; 25
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	98 a3       	std	Y+32, r25	; 0x20
    1f34:	8f 8f       	std	Y+31, r24	; 0x1f
    1f36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f38:	98 a1       	ldd	r25, Y+32	; 0x20
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <EEPROM_WRITE_CONFRIM+0x2dc>
    1f3e:	98 a3       	std	Y+32, r25	; 0x20
    1f40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f42:	89 a1       	ldd	r24, Y+33	; 0x21
    1f44:	9a a1       	ldd	r25, Y+34	; 0x22
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	9a a3       	std	Y+34, r25	; 0x22
    1f4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	69 f7       	brne	.-38     	; 0x1f2e <EEPROM_WRITE_CONFRIM+0x2d0>
    1f54:	14 c0       	rjmp	.+40     	; 0x1f7e <EEPROM_WRITE_CONFRIM+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f56:	6b a1       	ldd	r22, Y+35	; 0x23
    1f58:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9a a3       	std	Y+34, r25	; 0x22
    1f68:	89 a3       	std	Y+33, r24	; 0x21
    1f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f70:	8d 8f       	std	Y+29, r24	; 0x1d
    1f72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <EEPROM_WRITE_CONFRIM+0x318>
    1f7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f7c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+0x18, pass[3]);  		/* Write PASS in the external EEPROM */
    1f7e:	20 91 7e 01 	lds	r18, 0x017E
    1f82:	81 e5       	ldi	r24, 0x51	; 81
    1f84:	93 e0       	ldi	r25, 0x03	; 3
    1f86:	62 2f       	mov	r22, r18
    1f88:	0e 94 52 11 	call	0x22a4	; 0x22a4 <EEPROM_writeByte>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a0 e2       	ldi	r26, 0x20	; 32
    1f92:	b1 e4       	ldi	r27, 0x41	; 65
    1f94:	89 8f       	std	Y+25, r24	; 0x19
    1f96:	9a 8f       	std	Y+26, r25	; 0x1a
    1f98:	ab 8f       	std	Y+27, r26	; 0x1b
    1f9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	4a e7       	ldi	r20, 0x7A	; 122
    1faa:	53 e4       	ldi	r21, 0x43	; 67
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	8d 8b       	std	Y+21, r24	; 0x15
    1fb6:	9e 8b       	std	Y+22, r25	; 0x16
    1fb8:	af 8b       	std	Y+23, r26	; 0x17
    1fba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e8       	ldi	r20, 0x80	; 128
    1fca:	5f e3       	ldi	r21, 0x3F	; 63
    1fcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	2c f4       	brge	.+10     	; 0x1fde <EEPROM_WRITE_CONFRIM+0x380>
		__ticks = 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9c 8b       	std	Y+20, r25	; 0x14
    1fda:	8b 8b       	std	Y+19, r24	; 0x13
    1fdc:	3f c0       	rjmp	.+126    	; 0x205c <EEPROM_WRITE_CONFRIM+0x3fe>
	else if (__tmp > 65535)
    1fde:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	3f ef       	ldi	r19, 0xFF	; 255
    1fea:	4f e7       	ldi	r20, 0x7F	; 127
    1fec:	57 e4       	ldi	r21, 0x47	; 71
    1fee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff2:	18 16       	cp	r1, r24
    1ff4:	4c f5       	brge	.+82     	; 0x2048 <EEPROM_WRITE_CONFRIM+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ffa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ffc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e2       	ldi	r20, 0x20	; 32
    2004:	51 e4       	ldi	r21, 0x41	; 65
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9c 8b       	std	Y+20, r25	; 0x14
    201c:	8b 8b       	std	Y+19, r24	; 0x13
    201e:	0f c0       	rjmp	.+30     	; 0x203e <EEPROM_WRITE_CONFRIM+0x3e0>
    2020:	89 e1       	ldi	r24, 0x19	; 25
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9a 8b       	std	Y+18, r25	; 0x12
    2026:	89 8b       	std	Y+17, r24	; 0x11
    2028:	89 89       	ldd	r24, Y+17	; 0x11
    202a:	9a 89       	ldd	r25, Y+18	; 0x12
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <EEPROM_WRITE_CONFRIM+0x3ce>
    2030:	9a 8b       	std	Y+18, r25	; 0x12
    2032:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2034:	8b 89       	ldd	r24, Y+19	; 0x13
    2036:	9c 89       	ldd	r25, Y+20	; 0x14
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	9c 8b       	std	Y+20, r25	; 0x14
    203c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203e:	8b 89       	ldd	r24, Y+19	; 0x13
    2040:	9c 89       	ldd	r25, Y+20	; 0x14
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	69 f7       	brne	.-38     	; 0x2020 <EEPROM_WRITE_CONFRIM+0x3c2>
    2046:	14 c0       	rjmp	.+40     	; 0x2070 <EEPROM_WRITE_CONFRIM+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2048:	6d 89       	ldd	r22, Y+21	; 0x15
    204a:	7e 89       	ldd	r23, Y+22	; 0x16
    204c:	8f 89       	ldd	r24, Y+23	; 0x17
    204e:	98 8d       	ldd	r25, Y+24	; 0x18
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9c 8b       	std	Y+20, r25	; 0x14
    205a:	8b 8b       	std	Y+19, r24	; 0x13
    205c:	8b 89       	ldd	r24, Y+19	; 0x13
    205e:	9c 89       	ldd	r25, Y+20	; 0x14
    2060:	98 8b       	std	Y+16, r25	; 0x10
    2062:	8f 87       	std	Y+15, r24	; 0x0f
    2064:	8f 85       	ldd	r24, Y+15	; 0x0f
    2066:	98 89       	ldd	r25, Y+16	; 0x10
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <EEPROM_WRITE_CONFRIM+0x40a>
    206c:	98 8b       	std	Y+16, r25	; 0x10
    206e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+0x20, pass[4]);  		/* Write PASS in the external EEPROM */
    2070:	20 91 7f 01 	lds	r18, 0x017F
    2074:	89 e5       	ldi	r24, 0x59	; 89
    2076:	93 e0       	ldi	r25, 0x03	; 3
    2078:	62 2f       	mov	r22, r18
    207a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <EEPROM_writeByte>
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a0 e2       	ldi	r26, 0x20	; 32
    2084:	b1 e4       	ldi	r27, 0x41	; 65
    2086:	8b 87       	std	Y+11, r24	; 0x0b
    2088:	9c 87       	std	Y+12, r25	; 0x0c
    208a:	ad 87       	std	Y+13, r26	; 0x0d
    208c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2090:	7c 85       	ldd	r23, Y+12	; 0x0c
    2092:	8d 85       	ldd	r24, Y+13	; 0x0d
    2094:	9e 85       	ldd	r25, Y+14	; 0x0e
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	4a e7       	ldi	r20, 0x7A	; 122
    209c:	53 e4       	ldi	r21, 0x43	; 67
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	8f 83       	std	Y+7, r24	; 0x07
    20a8:	98 87       	std	Y+8, r25	; 0x08
    20aa:	a9 87       	std	Y+9, r26	; 0x09
    20ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ae:	6f 81       	ldd	r22, Y+7	; 0x07
    20b0:	78 85       	ldd	r23, Y+8	; 0x08
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	5f e3       	ldi	r21, 0x3F	; 63
    20be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	2c f4       	brge	.+10     	; 0x20d0 <EEPROM_WRITE_CONFRIM+0x472>
		__ticks = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	3f c0       	rjmp	.+126    	; 0x214e <EEPROM_WRITE_CONFRIM+0x4f0>
	else if (__tmp > 65535)
    20d0:	6f 81       	ldd	r22, Y+7	; 0x07
    20d2:	78 85       	ldd	r23, Y+8	; 0x08
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
    20d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	3f ef       	ldi	r19, 0xFF	; 255
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	57 e4       	ldi	r21, 0x47	; 71
    20e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	4c f5       	brge	.+82     	; 0x213a <EEPROM_WRITE_CONFRIM+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e2       	ldi	r20, 0x20	; 32
    20f6:	51 e4       	ldi	r21, 0x41	; 65
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	0f c0       	rjmp	.+30     	; 0x2130 <EEPROM_WRITE_CONFRIM+0x4d2>
    2112:	89 e1       	ldi	r24, 0x19	; 25
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9c 83       	std	Y+4, r25	; 0x04
    2118:	8b 83       	std	Y+3, r24	; 0x03
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	9c 81       	ldd	r25, Y+4	; 0x04
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <EEPROM_WRITE_CONFRIM+0x4c0>
    2122:	9c 83       	std	Y+4, r25	; 0x04
    2124:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	9e 81       	ldd	r25, Y+6	; 0x06
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	9e 83       	std	Y+6, r25	; 0x06
    212e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	69 f7       	brne	.-38     	; 0x2112 <EEPROM_WRITE_CONFRIM+0x4b4>
    2138:	14 c0       	rjmp	.+40     	; 0x2162 <EEPROM_WRITE_CONFRIM+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213a:	6f 81       	ldd	r22, Y+7	; 0x07
    213c:	78 85       	ldd	r23, Y+8	; 0x08
    213e:	89 85       	ldd	r24, Y+9	; 0x09
    2140:	9a 85       	ldd	r25, Y+10	; 0x0a
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	9a 83       	std	Y+2, r25	; 0x02
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	9a 81       	ldd	r25, Y+2	; 0x02
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <EEPROM_WRITE_CONFRIM+0x4fc>
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2162:	c8 5b       	subi	r28, 0xB8	; 184
    2164:	df 4f       	sbci	r29, 0xFF	; 255
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	08 95       	ret

0000217a <Timer0_PWM_Init>:
#include"std_types.h"
#include"gpio.h"
#include<avr/io.h>

void Timer0_PWM_Init(unsigned char set_duty_cycle)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    2186:	e2 e5       	ldi	r30, 0x52	; 82
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; //Set Compare value
    218c:	ec e5       	ldi	r30, 0x5C	; 92
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    2194:	a7 e3       	ldi	r26, 0x37	; 55
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e7 e3       	ldi	r30, 0x37	; 55
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	88 60       	ori	r24, 0x08	; 8
    21a0:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS02) | (1<<CS00);
    21a2:	e3 e5       	ldi	r30, 0x53	; 83
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	8d e6       	ldi	r24, 0x6D	; 109
    21a8:	80 83       	st	Z, r24
}
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <DCMotor_init>:

void DCMotor_init(void){
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID, PIN0_ID, PIN_OUTPUT);
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	41 e0       	ldi	r20, 0x01	; 1
    21c0:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN1_ID, PIN_OUTPUT);
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	61 e0       	ldi	r22, 0x01	; 1
    21c8:	41 e0       	ldi	r20, 0x01	; 1
    21ca:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	63 e0       	ldi	r22, 0x03	; 3
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <GPIO_setupPinDirection>

	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);			//IN1 Pin
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);			//IN2 Pin
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	61 e0       	ldi	r22, 0x01	; 1
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN3_ID, LOGIC_LOW);			//Enable Pin
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	63 e0       	ldi	r22, 0x03	; 3
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
}
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <DcMotor_Rotate>:

void DcMotor_Rotate(DCMotor_State state, uint8 speed){
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <DcMotor_Rotate+0x6>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <DcMotor_Rotate+0x8>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	3c 83       	std	Y+4, r19	; 0x04
    2214:	2b 83       	std	Y+3, r18	; 0x03
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	91 05       	cpc	r25, r1
    221e:	c9 f0       	breq	.+50     	; 0x2252 <DcMotor_Rotate+0x56>
    2220:	2b 81       	ldd	r18, Y+3	; 0x03
    2222:	3c 81       	ldd	r19, Y+4	; 0x04
    2224:	22 30       	cpi	r18, 0x02	; 2
    2226:	31 05       	cpc	r19, r1
    2228:	21 f1       	breq	.+72     	; 0x2272 <DcMotor_Rotate+0x76>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	79 f5       	brne	.+94     	; 0x2290 <DcMotor_Rotate+0x94>
	case STOP:
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN3_ID, LOGIC_LOW);
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	63 e0       	ldi	r22, 0x03	; 3
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
    2250:	1f c0       	rjmp	.+62     	; 0x2290 <DcMotor_Rotate+0x94>
		break;
	case CW:
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_HIGH);
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	61 e0       	ldi	r22, 0x01	; 1
    2260:	40 e0       	ldi	r20, 0x00	; 0
    2262:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN3_ID, LOGIC_HIGH);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	63 e0       	ldi	r22, 0x03	; 3
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
    2270:	0f c0       	rjmp	.+30     	; 0x2290 <DcMotor_Rotate+0x94>
		break;
	case CCW:
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_HIGH);
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	61 e0       	ldi	r22, 0x01	; 1
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN3_ID, LOGIC_HIGH);
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	63 e0       	ldi	r22, 0x03	; 3
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 de 12 	call	0x25bc	; 0x25bc <GPIO_writePin>
		break;
	}
	//uint16 duty = (speed*255)/100;
	Timer0_PWM_Init(speed);
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	0e 94 bd 10 	call	0x217a	; 0x217a <Timer0_PWM_Init>
}
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <EEPROM_writeByte+0x6>
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <EEPROM_writeByte+0x8>
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    22b6:	0e 94 40 16 	call	0x2c80	; 0x2c80 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    22ba:	0e 94 98 16 	call	0x2d30	; 0x2d30 <TWI_getStatus>
    22be:	88 30       	cpi	r24, 0x08	; 8
    22c0:	11 f0       	breq	.+4      	; 0x22c6 <EEPROM_writeByte+0x22>
        return ERROR;
    22c2:	1c 82       	std	Y+4, r1	; 0x04
    22c4:	28 c0       	rjmp	.+80     	; 0x2316 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ca:	80 70       	andi	r24, 0x00	; 0
    22cc:	97 70       	andi	r25, 0x07	; 7
    22ce:	88 0f       	add	r24, r24
    22d0:	89 2f       	mov	r24, r25
    22d2:	88 1f       	adc	r24, r24
    22d4:	99 0b       	sbc	r25, r25
    22d6:	91 95       	neg	r25
    22d8:	80 6a       	ori	r24, 0xA0	; 160
    22da:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    22de:	0e 94 98 16 	call	0x2d30	; 0x2d30 <TWI_getStatus>
    22e2:	88 31       	cpi	r24, 0x18	; 24
    22e4:	11 f0       	breq	.+4      	; 0x22ea <EEPROM_writeByte+0x46>
        return ERROR; 
    22e6:	1c 82       	std	Y+4, r1	; 0x04
    22e8:	16 c0       	rjmp	.+44     	; 0x2316 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    22f0:	0e 94 98 16 	call	0x2d30	; 0x2d30 <TWI_getStatus>
    22f4:	88 32       	cpi	r24, 0x28	; 40
    22f6:	11 f0       	breq	.+4      	; 0x22fc <EEPROM_writeByte+0x58>
        return ERROR;
    22f8:	1c 82       	std	Y+4, r1	; 0x04
    22fa:	0d c0       	rjmp	.+26     	; 0x2316 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2302:	0e 94 98 16 	call	0x2d30	; 0x2d30 <TWI_getStatus>
    2306:	88 32       	cpi	r24, 0x28	; 40
    2308:	11 f0       	breq	.+4      	; 0x230e <EEPROM_writeByte+0x6a>
        return ERROR;
    230a:	1c 82       	std	Y+4, r1	; 0x04
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    230e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWI_stop>
	
    return SUCCESS;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	8c 83       	std	Y+4, r24	; 0x04
    2316:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	00 d0       	rcall	.+0      	; 0x232c <EEPROM_readByte+0x6>
    232c:	00 d0       	rcall	.+0      	; 0x232e <EEPROM_readByte+0x8>
    232e:	0f 92       	push	r0
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	9a 83       	std	Y+2, r25	; 0x02
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	7c 83       	std	Y+4, r23	; 0x04
    233a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    233c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2340:	0e 94 98 16 	call	0x2d30	; 0x2d30 <TWI_getStatus>
    2344:	88 30       	cpi	r24, 0x08	; 8
    2346:	11 f0       	breq	.+4      	; 0x234c <EEPROM_readByte+0x26>
        return ERROR;
    2348:	1d 82       	std	Y+5, r1	; 0x05
    234a:	44 c0       	rjmp	.+136    	; 0x23d4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	80 70       	andi	r24, 0x00	; 0
    2352:	97 70       	andi	r25, 0x07	; 7
    2354:	88 0f       	add	r24, r24
    2356:	89 2f       	mov	r24, r25
    2358:	88 1f       	adc	r24, r24
    235a:	99 0b       	sbc	r25, r25
    235c:	91 95       	neg	r25
    235e:	80 6a       	ori	r24, 0xA0	; 160
    2360:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2364:	0e 94 98 16 	call	0x2d30	; 0x2d30 <TWI_getStatus>
    2368:	88 31       	cpi	r24, 0x18	; 24
    236a:	11 f0       	breq	.+4      	; 0x2370 <EEPROM_readByte+0x4a>
        return ERROR;
    236c:	1d 82       	std	Y+5, r1	; 0x05
    236e:	32 c0       	rjmp	.+100    	; 0x23d4 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2376:	0e 94 98 16 	call	0x2d30	; 0x2d30 <TWI_getStatus>
    237a:	88 32       	cpi	r24, 0x28	; 40
    237c:	11 f0       	breq	.+4      	; 0x2382 <EEPROM_readByte+0x5c>
        return ERROR;
    237e:	1d 82       	std	Y+5, r1	; 0x05
    2380:	29 c0       	rjmp	.+82     	; 0x23d4 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2382:	0e 94 40 16 	call	0x2c80	; 0x2c80 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2386:	0e 94 98 16 	call	0x2d30	; 0x2d30 <TWI_getStatus>
    238a:	80 31       	cpi	r24, 0x10	; 16
    238c:	11 f0       	breq	.+4      	; 0x2392 <EEPROM_readByte+0x6c>
        return ERROR;
    238e:	1d 82       	std	Y+5, r1	; 0x05
    2390:	21 c0       	rjmp	.+66     	; 0x23d4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	80 70       	andi	r24, 0x00	; 0
    2398:	97 70       	andi	r25, 0x07	; 7
    239a:	88 0f       	add	r24, r24
    239c:	89 2f       	mov	r24, r25
    239e:	88 1f       	adc	r24, r24
    23a0:	99 0b       	sbc	r25, r25
    23a2:	91 95       	neg	r25
    23a4:	81 6a       	ori	r24, 0xA1	; 161
    23a6:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    23aa:	0e 94 98 16 	call	0x2d30	; 0x2d30 <TWI_getStatus>
    23ae:	80 34       	cpi	r24, 0x40	; 64
    23b0:	11 f0       	breq	.+4      	; 0x23b6 <EEPROM_readByte+0x90>
        return ERROR;
    23b2:	1d 82       	std	Y+5, r1	; 0x05
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    23b6:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <TWI_readByteWithNACK>
    23ba:	eb 81       	ldd	r30, Y+3	; 0x03
    23bc:	fc 81       	ldd	r31, Y+4	; 0x04
    23be:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    23c0:	0e 94 98 16 	call	0x2d30	; 0x2d30 <TWI_getStatus>
    23c4:	88 35       	cpi	r24, 0x58	; 88
    23c6:	11 f0       	breq	.+4      	; 0x23cc <EEPROM_readByte+0xa6>
        return ERROR;
    23c8:	1d 82       	std	Y+5, r1	; 0x05
    23ca:	04 c0       	rjmp	.+8      	; 0x23d4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    23cc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWI_stop>

    return SUCCESS;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	8d 83       	std	Y+5, r24	; 0x05
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <GPIO_setupPinDirection+0x6>
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <GPIO_setupPinDirection+0x8>
    23ee:	0f 92       	push	r0
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	6a 83       	std	Y+2, r22	; 0x02
    23f8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	88 30       	cpi	r24, 0x08	; 8
    23fe:	08 f0       	brcs	.+2      	; 0x2402 <GPIO_setupPinDirection+0x1c>
    2400:	d5 c0       	rjmp	.+426    	; 0x25ac <GPIO_setupPinDirection+0x1c6>
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	84 30       	cpi	r24, 0x04	; 4
    2406:	08 f0       	brcs	.+2      	; 0x240a <GPIO_setupPinDirection+0x24>
    2408:	d1 c0       	rjmp	.+418    	; 0x25ac <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	3d 83       	std	Y+5, r19	; 0x05
    2412:	2c 83       	std	Y+4, r18	; 0x04
    2414:	8c 81       	ldd	r24, Y+4	; 0x04
    2416:	9d 81       	ldd	r25, Y+5	; 0x05
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	91 05       	cpc	r25, r1
    241c:	09 f4       	brne	.+2      	; 0x2420 <GPIO_setupPinDirection+0x3a>
    241e:	43 c0       	rjmp	.+134    	; 0x24a6 <GPIO_setupPinDirection+0xc0>
    2420:	2c 81       	ldd	r18, Y+4	; 0x04
    2422:	3d 81       	ldd	r19, Y+5	; 0x05
    2424:	22 30       	cpi	r18, 0x02	; 2
    2426:	31 05       	cpc	r19, r1
    2428:	2c f4       	brge	.+10     	; 0x2434 <GPIO_setupPinDirection+0x4e>
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	71 f0       	breq	.+28     	; 0x244e <GPIO_setupPinDirection+0x68>
    2432:	bc c0       	rjmp	.+376    	; 0x25ac <GPIO_setupPinDirection+0x1c6>
    2434:	2c 81       	ldd	r18, Y+4	; 0x04
    2436:	3d 81       	ldd	r19, Y+5	; 0x05
    2438:	22 30       	cpi	r18, 0x02	; 2
    243a:	31 05       	cpc	r19, r1
    243c:	09 f4       	brne	.+2      	; 0x2440 <GPIO_setupPinDirection+0x5a>
    243e:	5f c0       	rjmp	.+190    	; 0x24fe <GPIO_setupPinDirection+0x118>
    2440:	8c 81       	ldd	r24, Y+4	; 0x04
    2442:	9d 81       	ldd	r25, Y+5	; 0x05
    2444:	83 30       	cpi	r24, 0x03	; 3
    2446:	91 05       	cpc	r25, r1
    2448:	09 f4       	brne	.+2      	; 0x244c <GPIO_setupPinDirection+0x66>
    244a:	85 c0       	rjmp	.+266    	; 0x2556 <GPIO_setupPinDirection+0x170>
    244c:	af c0       	rjmp	.+350    	; 0x25ac <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	81 30       	cpi	r24, 0x01	; 1
    2452:	a1 f4       	brne	.+40     	; 0x247c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2454:	aa e3       	ldi	r26, 0x3A	; 58
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	ea e3       	ldi	r30, 0x3A	; 58
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	48 2f       	mov	r20, r24
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	02 2e       	mov	r0, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <GPIO_setupPinDirection+0x8c>
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	0a 94       	dec	r0
    2474:	e2 f7       	brpl	.-8      	; 0x246e <GPIO_setupPinDirection+0x88>
    2476:	84 2b       	or	r24, r20
    2478:	8c 93       	st	X, r24
    247a:	98 c0       	rjmp	.+304    	; 0x25ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    247c:	aa e3       	ldi	r26, 0x3A	; 58
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	ea e3       	ldi	r30, 0x3A	; 58
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	48 2f       	mov	r20, r24
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	02 2e       	mov	r0, r18
    2494:	02 c0       	rjmp	.+4      	; 0x249a <GPIO_setupPinDirection+0xb4>
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	0a 94       	dec	r0
    249c:	e2 f7       	brpl	.-8      	; 0x2496 <GPIO_setupPinDirection+0xb0>
    249e:	80 95       	com	r24
    24a0:	84 23       	and	r24, r20
    24a2:	8c 93       	st	X, r24
    24a4:	83 c0       	rjmp	.+262    	; 0x25ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	81 30       	cpi	r24, 0x01	; 1
    24aa:	a1 f4       	brne	.+40     	; 0x24d4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    24ac:	a7 e3       	ldi	r26, 0x37	; 55
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e7 e3       	ldi	r30, 0x37	; 55
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	48 2f       	mov	r20, r24
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	02 2e       	mov	r0, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <GPIO_setupPinDirection+0xe4>
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	0a 94       	dec	r0
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <GPIO_setupPinDirection+0xe0>
    24ce:	84 2b       	or	r24, r20
    24d0:	8c 93       	st	X, r24
    24d2:	6c c0       	rjmp	.+216    	; 0x25ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    24d4:	a7 e3       	ldi	r26, 0x37	; 55
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e7 e3       	ldi	r30, 0x37	; 55
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	48 2f       	mov	r20, r24
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	02 2e       	mov	r0, r18
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <GPIO_setupPinDirection+0x10c>
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	0a 94       	dec	r0
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <GPIO_setupPinDirection+0x108>
    24f6:	80 95       	com	r24
    24f8:	84 23       	and	r24, r20
    24fa:	8c 93       	st	X, r24
    24fc:	57 c0       	rjmp	.+174    	; 0x25ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	a1 f4       	brne	.+40     	; 0x252c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2504:	a4 e3       	ldi	r26, 0x34	; 52
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e4 e3       	ldi	r30, 0x34	; 52
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	48 2f       	mov	r20, r24
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	02 2e       	mov	r0, r18
    251c:	02 c0       	rjmp	.+4      	; 0x2522 <GPIO_setupPinDirection+0x13c>
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	0a 94       	dec	r0
    2524:	e2 f7       	brpl	.-8      	; 0x251e <GPIO_setupPinDirection+0x138>
    2526:	84 2b       	or	r24, r20
    2528:	8c 93       	st	X, r24
    252a:	40 c0       	rjmp	.+128    	; 0x25ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    252c:	a4 e3       	ldi	r26, 0x34	; 52
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e4 e3       	ldi	r30, 0x34	; 52
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	48 2f       	mov	r20, r24
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	02 2e       	mov	r0, r18
    2544:	02 c0       	rjmp	.+4      	; 0x254a <GPIO_setupPinDirection+0x164>
    2546:	88 0f       	add	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	0a 94       	dec	r0
    254c:	e2 f7       	brpl	.-8      	; 0x2546 <GPIO_setupPinDirection+0x160>
    254e:	80 95       	com	r24
    2550:	84 23       	and	r24, r20
    2552:	8c 93       	st	X, r24
    2554:	2b c0       	rjmp	.+86     	; 0x25ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	81 30       	cpi	r24, 0x01	; 1
    255a:	a1 f4       	brne	.+40     	; 0x2584 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    255c:	a1 e3       	ldi	r26, 0x31	; 49
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e1 e3       	ldi	r30, 0x31	; 49
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	48 2f       	mov	r20, r24
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	02 2e       	mov	r0, r18
    2574:	02 c0       	rjmp	.+4      	; 0x257a <GPIO_setupPinDirection+0x194>
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	0a 94       	dec	r0
    257c:	e2 f7       	brpl	.-8      	; 0x2576 <GPIO_setupPinDirection+0x190>
    257e:	84 2b       	or	r24, r20
    2580:	8c 93       	st	X, r24
    2582:	14 c0       	rjmp	.+40     	; 0x25ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2584:	a1 e3       	ldi	r26, 0x31	; 49
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e1 e3       	ldi	r30, 0x31	; 49
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	48 2f       	mov	r20, r24
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	02 2e       	mov	r0, r18
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <GPIO_setupPinDirection+0x1bc>
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	0a 94       	dec	r0
    25a4:	e2 f7       	brpl	.-8      	; 0x259e <GPIO_setupPinDirection+0x1b8>
    25a6:	80 95       	com	r24
    25a8:	84 23       	and	r24, r20
    25aa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <GPIO_writePin+0x6>
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <GPIO_writePin+0x8>
    25c4:	0f 92       	push	r0
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	6a 83       	std	Y+2, r22	; 0x02
    25ce:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	88 30       	cpi	r24, 0x08	; 8
    25d4:	08 f0       	brcs	.+2      	; 0x25d8 <GPIO_writePin+0x1c>
    25d6:	d5 c0       	rjmp	.+426    	; 0x2782 <GPIO_writePin+0x1c6>
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	84 30       	cpi	r24, 0x04	; 4
    25dc:	08 f0       	brcs	.+2      	; 0x25e0 <GPIO_writePin+0x24>
    25de:	d1 c0       	rjmp	.+418    	; 0x2782 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	3d 83       	std	Y+5, r19	; 0x05
    25e8:	2c 83       	std	Y+4, r18	; 0x04
    25ea:	8c 81       	ldd	r24, Y+4	; 0x04
    25ec:	9d 81       	ldd	r25, Y+5	; 0x05
    25ee:	81 30       	cpi	r24, 0x01	; 1
    25f0:	91 05       	cpc	r25, r1
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <GPIO_writePin+0x3a>
    25f4:	43 c0       	rjmp	.+134    	; 0x267c <GPIO_writePin+0xc0>
    25f6:	2c 81       	ldd	r18, Y+4	; 0x04
    25f8:	3d 81       	ldd	r19, Y+5	; 0x05
    25fa:	22 30       	cpi	r18, 0x02	; 2
    25fc:	31 05       	cpc	r19, r1
    25fe:	2c f4       	brge	.+10     	; 0x260a <GPIO_writePin+0x4e>
    2600:	8c 81       	ldd	r24, Y+4	; 0x04
    2602:	9d 81       	ldd	r25, Y+5	; 0x05
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	71 f0       	breq	.+28     	; 0x2624 <GPIO_writePin+0x68>
    2608:	bc c0       	rjmp	.+376    	; 0x2782 <GPIO_writePin+0x1c6>
    260a:	2c 81       	ldd	r18, Y+4	; 0x04
    260c:	3d 81       	ldd	r19, Y+5	; 0x05
    260e:	22 30       	cpi	r18, 0x02	; 2
    2610:	31 05       	cpc	r19, r1
    2612:	09 f4       	brne	.+2      	; 0x2616 <GPIO_writePin+0x5a>
    2614:	5f c0       	rjmp	.+190    	; 0x26d4 <GPIO_writePin+0x118>
    2616:	8c 81       	ldd	r24, Y+4	; 0x04
    2618:	9d 81       	ldd	r25, Y+5	; 0x05
    261a:	83 30       	cpi	r24, 0x03	; 3
    261c:	91 05       	cpc	r25, r1
    261e:	09 f4       	brne	.+2      	; 0x2622 <GPIO_writePin+0x66>
    2620:	85 c0       	rjmp	.+266    	; 0x272c <GPIO_writePin+0x170>
    2622:	af c0       	rjmp	.+350    	; 0x2782 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	a1 f4       	brne	.+40     	; 0x2652 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    262a:	ab e3       	ldi	r26, 0x3B	; 59
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	eb e3       	ldi	r30, 0x3B	; 59
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	48 2f       	mov	r20, r24
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	02 2e       	mov	r0, r18
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <GPIO_writePin+0x8c>
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	0a 94       	dec	r0
    264a:	e2 f7       	brpl	.-8      	; 0x2644 <GPIO_writePin+0x88>
    264c:	84 2b       	or	r24, r20
    264e:	8c 93       	st	X, r24
    2650:	98 c0       	rjmp	.+304    	; 0x2782 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2652:	ab e3       	ldi	r26, 0x3B	; 59
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	eb e3       	ldi	r30, 0x3B	; 59
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	48 2f       	mov	r20, r24
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	02 2e       	mov	r0, r18
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <GPIO_writePin+0xb4>
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	0a 94       	dec	r0
    2672:	e2 f7       	brpl	.-8      	; 0x266c <GPIO_writePin+0xb0>
    2674:	80 95       	com	r24
    2676:	84 23       	and	r24, r20
    2678:	8c 93       	st	X, r24
    267a:	83 c0       	rjmp	.+262    	; 0x2782 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	81 30       	cpi	r24, 0x01	; 1
    2680:	a1 f4       	brne	.+40     	; 0x26aa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2682:	a8 e3       	ldi	r26, 0x38	; 56
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	e8 e3       	ldi	r30, 0x38	; 56
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	48 2f       	mov	r20, r24
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	02 2e       	mov	r0, r18
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <GPIO_writePin+0xe4>
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	0a 94       	dec	r0
    26a2:	e2 f7       	brpl	.-8      	; 0x269c <GPIO_writePin+0xe0>
    26a4:	84 2b       	or	r24, r20
    26a6:	8c 93       	st	X, r24
    26a8:	6c c0       	rjmp	.+216    	; 0x2782 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    26aa:	a8 e3       	ldi	r26, 0x38	; 56
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e8 e3       	ldi	r30, 0x38	; 56
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	48 2f       	mov	r20, r24
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	02 2e       	mov	r0, r18
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <GPIO_writePin+0x10c>
    26c4:	88 0f       	add	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	0a 94       	dec	r0
    26ca:	e2 f7       	brpl	.-8      	; 0x26c4 <GPIO_writePin+0x108>
    26cc:	80 95       	com	r24
    26ce:	84 23       	and	r24, r20
    26d0:	8c 93       	st	X, r24
    26d2:	57 c0       	rjmp	.+174    	; 0x2782 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	81 30       	cpi	r24, 0x01	; 1
    26d8:	a1 f4       	brne	.+40     	; 0x2702 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    26da:	a5 e3       	ldi	r26, 0x35	; 53
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e5 e3       	ldi	r30, 0x35	; 53
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	48 2f       	mov	r20, r24
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	02 2e       	mov	r0, r18
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <GPIO_writePin+0x13c>
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	0a 94       	dec	r0
    26fa:	e2 f7       	brpl	.-8      	; 0x26f4 <GPIO_writePin+0x138>
    26fc:	84 2b       	or	r24, r20
    26fe:	8c 93       	st	X, r24
    2700:	40 c0       	rjmp	.+128    	; 0x2782 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2702:	a5 e3       	ldi	r26, 0x35	; 53
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e5 e3       	ldi	r30, 0x35	; 53
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	48 2f       	mov	r20, r24
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	28 2f       	mov	r18, r24
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	02 2e       	mov	r0, r18
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <GPIO_writePin+0x164>
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	0a 94       	dec	r0
    2722:	e2 f7       	brpl	.-8      	; 0x271c <GPIO_writePin+0x160>
    2724:	80 95       	com	r24
    2726:	84 23       	and	r24, r20
    2728:	8c 93       	st	X, r24
    272a:	2b c0       	rjmp	.+86     	; 0x2782 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	81 30       	cpi	r24, 0x01	; 1
    2730:	a1 f4       	brne	.+40     	; 0x275a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2732:	a2 e3       	ldi	r26, 0x32	; 50
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e2 e3       	ldi	r30, 0x32	; 50
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	48 2f       	mov	r20, r24
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	02 2e       	mov	r0, r18
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <GPIO_writePin+0x194>
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	0a 94       	dec	r0
    2752:	e2 f7       	brpl	.-8      	; 0x274c <GPIO_writePin+0x190>
    2754:	84 2b       	or	r24, r20
    2756:	8c 93       	st	X, r24
    2758:	14 c0       	rjmp	.+40     	; 0x2782 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    275a:	a2 e3       	ldi	r26, 0x32	; 50
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e2 e3       	ldi	r30, 0x32	; 50
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	48 2f       	mov	r20, r24
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	02 2e       	mov	r0, r18
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <GPIO_writePin+0x1bc>
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	0a 94       	dec	r0
    277a:	e2 f7       	brpl	.-8      	; 0x2774 <GPIO_writePin+0x1b8>
    277c:	80 95       	com	r24
    277e:	84 23       	and	r24, r20
    2780:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	08 95       	ret

00002792 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	00 d0       	rcall	.+0      	; 0x2798 <GPIO_readPin+0x6>
    2798:	00 d0       	rcall	.+0      	; 0x279a <GPIO_readPin+0x8>
    279a:	0f 92       	push	r0
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	8a 83       	std	Y+2, r24	; 0x02
    27a2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    27a4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	88 30       	cpi	r24, 0x08	; 8
    27aa:	08 f0       	brcs	.+2      	; 0x27ae <GPIO_readPin+0x1c>
    27ac:	84 c0       	rjmp	.+264    	; 0x28b6 <GPIO_readPin+0x124>
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	84 30       	cpi	r24, 0x04	; 4
    27b2:	08 f0       	brcs	.+2      	; 0x27b6 <GPIO_readPin+0x24>
    27b4:	80 c0       	rjmp	.+256    	; 0x28b6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	3d 83       	std	Y+5, r19	; 0x05
    27be:	2c 83       	std	Y+4, r18	; 0x04
    27c0:	4c 81       	ldd	r20, Y+4	; 0x04
    27c2:	5d 81       	ldd	r21, Y+5	; 0x05
    27c4:	41 30       	cpi	r20, 0x01	; 1
    27c6:	51 05       	cpc	r21, r1
    27c8:	79 f1       	breq	.+94     	; 0x2828 <GPIO_readPin+0x96>
    27ca:	8c 81       	ldd	r24, Y+4	; 0x04
    27cc:	9d 81       	ldd	r25, Y+5	; 0x05
    27ce:	82 30       	cpi	r24, 0x02	; 2
    27d0:	91 05       	cpc	r25, r1
    27d2:	34 f4       	brge	.+12     	; 0x27e0 <GPIO_readPin+0x4e>
    27d4:	2c 81       	ldd	r18, Y+4	; 0x04
    27d6:	3d 81       	ldd	r19, Y+5	; 0x05
    27d8:	21 15       	cp	r18, r1
    27da:	31 05       	cpc	r19, r1
    27dc:	69 f0       	breq	.+26     	; 0x27f8 <GPIO_readPin+0x66>
    27de:	6b c0       	rjmp	.+214    	; 0x28b6 <GPIO_readPin+0x124>
    27e0:	4c 81       	ldd	r20, Y+4	; 0x04
    27e2:	5d 81       	ldd	r21, Y+5	; 0x05
    27e4:	42 30       	cpi	r20, 0x02	; 2
    27e6:	51 05       	cpc	r21, r1
    27e8:	b9 f1       	breq	.+110    	; 0x2858 <GPIO_readPin+0xc6>
    27ea:	8c 81       	ldd	r24, Y+4	; 0x04
    27ec:	9d 81       	ldd	r25, Y+5	; 0x05
    27ee:	83 30       	cpi	r24, 0x03	; 3
    27f0:	91 05       	cpc	r25, r1
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <GPIO_readPin+0x64>
    27f4:	49 c0       	rjmp	.+146    	; 0x2888 <GPIO_readPin+0xf6>
    27f6:	5f c0       	rjmp	.+190    	; 0x28b6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    27f8:	e9 e3       	ldi	r30, 0x39	; 57
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	88 2f       	mov	r24, r24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a9 01       	movw	r20, r18
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <GPIO_readPin+0x7e>
    280c:	55 95       	asr	r21
    280e:	47 95       	ror	r20
    2810:	8a 95       	dec	r24
    2812:	e2 f7       	brpl	.-8      	; 0x280c <GPIO_readPin+0x7a>
    2814:	ca 01       	movw	r24, r20
    2816:	81 70       	andi	r24, 0x01	; 1
    2818:	90 70       	andi	r25, 0x00	; 0
    281a:	88 23       	and	r24, r24
    281c:	19 f0       	breq	.+6      	; 0x2824 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	89 83       	std	Y+1, r24	; 0x01
    2822:	49 c0       	rjmp	.+146    	; 0x28b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2824:	19 82       	std	Y+1, r1	; 0x01
    2826:	47 c0       	rjmp	.+142    	; 0x28b6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2828:	e6 e3       	ldi	r30, 0x36	; 54
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	88 2f       	mov	r24, r24
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a9 01       	movw	r20, r18
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <GPIO_readPin+0xae>
    283c:	55 95       	asr	r21
    283e:	47 95       	ror	r20
    2840:	8a 95       	dec	r24
    2842:	e2 f7       	brpl	.-8      	; 0x283c <GPIO_readPin+0xaa>
    2844:	ca 01       	movw	r24, r20
    2846:	81 70       	andi	r24, 0x01	; 1
    2848:	90 70       	andi	r25, 0x00	; 0
    284a:	88 23       	and	r24, r24
    284c:	19 f0       	breq	.+6      	; 0x2854 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	31 c0       	rjmp	.+98     	; 0x28b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2854:	19 82       	std	Y+1, r1	; 0x01
    2856:	2f c0       	rjmp	.+94     	; 0x28b6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2858:	e3 e3       	ldi	r30, 0x33	; 51
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	28 2f       	mov	r18, r24
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	88 2f       	mov	r24, r24
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a9 01       	movw	r20, r18
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <GPIO_readPin+0xde>
    286c:	55 95       	asr	r21
    286e:	47 95       	ror	r20
    2870:	8a 95       	dec	r24
    2872:	e2 f7       	brpl	.-8      	; 0x286c <GPIO_readPin+0xda>
    2874:	ca 01       	movw	r24, r20
    2876:	81 70       	andi	r24, 0x01	; 1
    2878:	90 70       	andi	r25, 0x00	; 0
    287a:	88 23       	and	r24, r24
    287c:	19 f0       	breq	.+6      	; 0x2884 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	19 c0       	rjmp	.+50     	; 0x28b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2884:	19 82       	std	Y+1, r1	; 0x01
    2886:	17 c0       	rjmp	.+46     	; 0x28b6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2888:	e0 e3       	ldi	r30, 0x30	; 48
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	28 2f       	mov	r18, r24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	88 2f       	mov	r24, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	a9 01       	movw	r20, r18
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <GPIO_readPin+0x10e>
    289c:	55 95       	asr	r21
    289e:	47 95       	ror	r20
    28a0:	8a 95       	dec	r24
    28a2:	e2 f7       	brpl	.-8      	; 0x289c <GPIO_readPin+0x10a>
    28a4:	ca 01       	movw	r24, r20
    28a6:	81 70       	andi	r24, 0x01	; 1
    28a8:	90 70       	andi	r25, 0x00	; 0
    28aa:	88 23       	and	r24, r24
    28ac:	19 f0       	breq	.+6      	; 0x28b4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	01 c0       	rjmp	.+2      	; 0x28b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    28b4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <GPIO_setupPortDirection+0x6>
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <GPIO_setupPortDirection+0x8>
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	84 30       	cpi	r24, 0x04	; 4
    28dc:	90 f5       	brcc	.+100    	; 0x2942 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	3c 83       	std	Y+4, r19	; 0x04
    28e6:	2b 83       	std	Y+3, r18	; 0x03
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	81 30       	cpi	r24, 0x01	; 1
    28ee:	91 05       	cpc	r25, r1
    28f0:	d1 f0       	breq	.+52     	; 0x2926 <GPIO_setupPortDirection+0x5e>
    28f2:	2b 81       	ldd	r18, Y+3	; 0x03
    28f4:	3c 81       	ldd	r19, Y+4	; 0x04
    28f6:	22 30       	cpi	r18, 0x02	; 2
    28f8:	31 05       	cpc	r19, r1
    28fa:	2c f4       	brge	.+10     	; 0x2906 <GPIO_setupPortDirection+0x3e>
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	61 f0       	breq	.+24     	; 0x291c <GPIO_setupPortDirection+0x54>
    2904:	1e c0       	rjmp	.+60     	; 0x2942 <GPIO_setupPortDirection+0x7a>
    2906:	2b 81       	ldd	r18, Y+3	; 0x03
    2908:	3c 81       	ldd	r19, Y+4	; 0x04
    290a:	22 30       	cpi	r18, 0x02	; 2
    290c:	31 05       	cpc	r19, r1
    290e:	81 f0       	breq	.+32     	; 0x2930 <GPIO_setupPortDirection+0x68>
    2910:	8b 81       	ldd	r24, Y+3	; 0x03
    2912:	9c 81       	ldd	r25, Y+4	; 0x04
    2914:	83 30       	cpi	r24, 0x03	; 3
    2916:	91 05       	cpc	r25, r1
    2918:	81 f0       	breq	.+32     	; 0x293a <GPIO_setupPortDirection+0x72>
    291a:	13 c0       	rjmp	.+38     	; 0x2942 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    291c:	ea e3       	ldi	r30, 0x3A	; 58
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	80 83       	st	Z, r24
    2924:	0e c0       	rjmp	.+28     	; 0x2942 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2926:	e7 e3       	ldi	r30, 0x37	; 55
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	80 83       	st	Z, r24
    292e:	09 c0       	rjmp	.+18     	; 0x2942 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2930:	e4 e3       	ldi	r30, 0x34	; 52
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	8a 81       	ldd	r24, Y+2	; 0x02
    2936:	80 83       	st	Z, r24
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    293a:	e1 e3       	ldi	r30, 0x31	; 49
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	80 83       	st	Z, r24
			break;
		}
	}
}
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	00 d0       	rcall	.+0      	; 0x2956 <GPIO_writePort+0x6>
    2956:	00 d0       	rcall	.+0      	; 0x2958 <GPIO_writePort+0x8>
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	89 83       	std	Y+1, r24	; 0x01
    295e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	84 30       	cpi	r24, 0x04	; 4
    2964:	90 f5       	brcc	.+100    	; 0x29ca <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	3c 83       	std	Y+4, r19	; 0x04
    296e:	2b 83       	std	Y+3, r18	; 0x03
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	91 05       	cpc	r25, r1
    2978:	d1 f0       	breq	.+52     	; 0x29ae <GPIO_writePort+0x5e>
    297a:	2b 81       	ldd	r18, Y+3	; 0x03
    297c:	3c 81       	ldd	r19, Y+4	; 0x04
    297e:	22 30       	cpi	r18, 0x02	; 2
    2980:	31 05       	cpc	r19, r1
    2982:	2c f4       	brge	.+10     	; 0x298e <GPIO_writePort+0x3e>
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	9c 81       	ldd	r25, Y+4	; 0x04
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	61 f0       	breq	.+24     	; 0x29a4 <GPIO_writePort+0x54>
    298c:	1e c0       	rjmp	.+60     	; 0x29ca <GPIO_writePort+0x7a>
    298e:	2b 81       	ldd	r18, Y+3	; 0x03
    2990:	3c 81       	ldd	r19, Y+4	; 0x04
    2992:	22 30       	cpi	r18, 0x02	; 2
    2994:	31 05       	cpc	r19, r1
    2996:	81 f0       	breq	.+32     	; 0x29b8 <GPIO_writePort+0x68>
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	83 30       	cpi	r24, 0x03	; 3
    299e:	91 05       	cpc	r25, r1
    29a0:	81 f0       	breq	.+32     	; 0x29c2 <GPIO_writePort+0x72>
    29a2:	13 c0       	rjmp	.+38     	; 0x29ca <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    29a4:	eb e3       	ldi	r30, 0x3B	; 59
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	80 83       	st	Z, r24
    29ac:	0e c0       	rjmp	.+28     	; 0x29ca <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    29ae:	e8 e3       	ldi	r30, 0x38	; 56
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	80 83       	st	Z, r24
    29b6:	09 c0       	rjmp	.+18     	; 0x29ca <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    29b8:	e5 e3       	ldi	r30, 0x35	; 53
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	80 83       	st	Z, r24
    29c0:	04 c0       	rjmp	.+8      	; 0x29ca <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    29c2:	e2 e3       	ldi	r30, 0x32	; 50
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	8a 81       	ldd	r24, Y+2	; 0x02
    29c8:	80 83       	st	Z, r24
			break;
		}
	}
}
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	00 d0       	rcall	.+0      	; 0x29de <GPIO_readPort+0x6>
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <GPIO_readPort+0x8>
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    29e6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	84 30       	cpi	r24, 0x04	; 4
    29ec:	90 f5       	brcc	.+100    	; 0x2a52 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	3c 83       	std	Y+4, r19	; 0x04
    29f6:	2b 83       	std	Y+3, r18	; 0x03
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	9c 81       	ldd	r25, Y+4	; 0x04
    29fc:	81 30       	cpi	r24, 0x01	; 1
    29fe:	91 05       	cpc	r25, r1
    2a00:	d1 f0       	breq	.+52     	; 0x2a36 <GPIO_readPort+0x5e>
    2a02:	2b 81       	ldd	r18, Y+3	; 0x03
    2a04:	3c 81       	ldd	r19, Y+4	; 0x04
    2a06:	22 30       	cpi	r18, 0x02	; 2
    2a08:	31 05       	cpc	r19, r1
    2a0a:	2c f4       	brge	.+10     	; 0x2a16 <GPIO_readPort+0x3e>
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	61 f0       	breq	.+24     	; 0x2a2c <GPIO_readPort+0x54>
    2a14:	1e c0       	rjmp	.+60     	; 0x2a52 <GPIO_readPort+0x7a>
    2a16:	2b 81       	ldd	r18, Y+3	; 0x03
    2a18:	3c 81       	ldd	r19, Y+4	; 0x04
    2a1a:	22 30       	cpi	r18, 0x02	; 2
    2a1c:	31 05       	cpc	r19, r1
    2a1e:	81 f0       	breq	.+32     	; 0x2a40 <GPIO_readPort+0x68>
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	9c 81       	ldd	r25, Y+4	; 0x04
    2a24:	83 30       	cpi	r24, 0x03	; 3
    2a26:	91 05       	cpc	r25, r1
    2a28:	81 f0       	breq	.+32     	; 0x2a4a <GPIO_readPort+0x72>
    2a2a:	13 c0       	rjmp	.+38     	; 0x2a52 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2a2c:	e9 e3       	ldi	r30, 0x39	; 57
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	0e c0       	rjmp	.+28     	; 0x2a52 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2a36:	e6 e3       	ldi	r30, 0x36	; 54
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	09 c0       	rjmp	.+18     	; 0x2a52 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2a40:	e3 e3       	ldi	r30, 0x33	; 51
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	89 83       	std	Y+1, r24	; 0x01
    2a48:	04 c0       	rjmp	.+8      	; 0x2a52 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2a4a:	e0 e3       	ldi	r30, 0x30	; 48
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	08 95       	ret

00002a62 <__vector_7>:
/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;


ISR(TIMER1_COMPA_vect)
{
    2a62:	1f 92       	push	r1
    2a64:	0f 92       	push	r0
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	0f 92       	push	r0
    2a6a:	11 24       	eor	r1, r1
    2a6c:	2f 93       	push	r18
    2a6e:	3f 93       	push	r19
    2a70:	4f 93       	push	r20
    2a72:	5f 93       	push	r21
    2a74:	6f 93       	push	r22
    2a76:	7f 93       	push	r23
    2a78:	8f 93       	push	r24
    2a7a:	9f 93       	push	r25
    2a7c:	af 93       	push	r26
    2a7e:	bf 93       	push	r27
    2a80:	ef 93       	push	r30
    2a82:	ff 93       	push	r31
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2a8c:	80 91 94 01 	lds	r24, 0x0194
    2a90:	90 91 95 01 	lds	r25, 0x0195
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	29 f0       	breq	.+10     	; 0x2aa2 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application*/
		(*g_callBackPtr)();
    2a98:	e0 91 94 01 	lds	r30, 0x0194
    2a9c:	f0 91 95 01 	lds	r31, 0x0195
    2aa0:	09 95       	icall
	}
}
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	ff 91       	pop	r31
    2aa8:	ef 91       	pop	r30
    2aaa:	bf 91       	pop	r27
    2aac:	af 91       	pop	r26
    2aae:	9f 91       	pop	r25
    2ab0:	8f 91       	pop	r24
    2ab2:	7f 91       	pop	r23
    2ab4:	6f 91       	pop	r22
    2ab6:	5f 91       	pop	r21
    2ab8:	4f 91       	pop	r20
    2aba:	3f 91       	pop	r19
    2abc:	2f 91       	pop	r18
    2abe:	0f 90       	pop	r0
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	0f 90       	pop	r0
    2ac4:	1f 90       	pop	r1
    2ac6:	18 95       	reti

00002ac8 <Timer1_init>:
//		(*g_callBackPtr)();
//	}
//}


void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	00 d0       	rcall	.+0      	; 0x2ace <Timer1_init+0x6>
    2ace:	00 d0       	rcall	.+0      	; 0x2ad0 <Timer1_init+0x8>
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A = (1<<FOC1A) | (((Config_Ptr->mode)& 0b0011)<< WGM10);
    2ad8:	af e4       	ldi	r26, 0x4F	; 79
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ade:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae0:	85 81       	ldd	r24, Z+5	; 0x05
    2ae2:	83 70       	andi	r24, 0x03	; 3
    2ae4:	88 60       	ori	r24, 0x08	; 8
    2ae6:	8c 93       	st	X, r24
	TCCR1B = ((((Config_Ptr->mode)& 0b1100)>>2)<< WGM12) | ((Config_Ptr->prescaler)<<CS10);
    2ae8:	ae e4       	ldi	r26, 0x4E	; 78
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e9 81       	ldd	r30, Y+1	; 0x01
    2aee:	fa 81       	ldd	r31, Y+2	; 0x02
    2af0:	85 81       	ldd	r24, Z+5	; 0x05
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	8c 70       	andi	r24, 0x0C	; 12
    2af8:	90 70       	andi	r25, 0x00	; 0
    2afa:	95 95       	asr	r25
    2afc:	87 95       	ror	r24
    2afe:	95 95       	asr	r25
    2b00:	87 95       	ror	r24
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	98 2f       	mov	r25, r24
    2b10:	e9 81       	ldd	r30, Y+1	; 0x01
    2b12:	fa 81       	ldd	r31, Y+2	; 0x02
    2b14:	84 81       	ldd	r24, Z+4	; 0x04
    2b16:	89 2b       	or	r24, r25
    2b18:	8c 93       	st	X, r24
	TCNT1 = (Config_Ptr->initial_value);		/* Set timer1 initial count to initial value */
    2b1a:	ac e4       	ldi	r26, 0x4C	; 76
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b20:	fa 81       	ldd	r31, Y+2	; 0x02
    2b22:	80 81       	ld	r24, Z
    2b24:	91 81       	ldd	r25, Z+1	; 0x01
    2b26:	11 96       	adiw	r26, 0x01	; 1
    2b28:	9c 93       	st	X, r25
    2b2a:	8e 93       	st	-X, r24
	SREG |= (1<<7);
    2b2c:	af e5       	ldi	r26, 0x5F	; 95
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	ef e5       	ldi	r30, 0x5F	; 95
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	80 68       	ori	r24, 0x80	; 128
    2b38:	8c 93       	st	X, r24
	switch((Config_Ptr->mode)){
    2b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3e:	85 81       	ldd	r24, Z+5	; 0x05
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	3c 83       	std	Y+4, r19	; 0x04
    2b46:	2b 83       	std	Y+3, r18	; 0x03
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	31 f0       	breq	.+12     	; 0x2b5c <Timer1_init+0x94>
    2b50:	2b 81       	ldd	r18, Y+3	; 0x03
    2b52:	3c 81       	ldd	r19, Y+4	; 0x04
    2b54:	24 30       	cpi	r18, 0x04	; 4
    2b56:	31 05       	cpc	r19, r1
    2b58:	49 f0       	breq	.+18     	; 0x2b6c <Timer1_init+0xa4>
    2b5a:	18 c0       	rjmp	.+48     	; 0x2b8c <Timer1_init+0xc4>
	case NORMAL:
		TIMSK |= (1<<TOIE1); /* Enable Timer1 Overflow Interrupt */
    2b5c:	a9 e5       	ldi	r26, 0x59	; 89
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	e9 e5       	ldi	r30, 0x59	; 89
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	84 60       	ori	r24, 0x04	; 4
    2b68:	8c 93       	st	X, r24
    2b6a:	10 c0       	rjmp	.+32     	; 0x2b8c <Timer1_init+0xc4>
		break;
	case CTC:
		OCR1A = (Config_Ptr->compare_value);		/* Set the Compare value */
    2b6c:	aa e4       	ldi	r26, 0x4A	; 74
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e9 81       	ldd	r30, Y+1	; 0x01
    2b72:	fa 81       	ldd	r31, Y+2	; 0x02
    2b74:	82 81       	ldd	r24, Z+2	; 0x02
    2b76:	93 81       	ldd	r25, Z+3	; 0x03
    2b78:	11 96       	adiw	r26, 0x01	; 1
    2b7a:	9c 93       	st	X, r25
    2b7c:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    2b7e:	a9 e5       	ldi	r26, 0x59	; 89
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e9 e5       	ldi	r30, 0x59	; 89
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	80 61       	ori	r24, 0x10	; 16
    2b8a:	8c 93       	st	X, r24
		break;
	}
}
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	08 95       	ret

00002b9a <Timer1_deInit>:

void Timer1_deInit(void){
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2ba2:	ef e4       	ldi	r30, 0x4F	; 79
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	10 82       	st	Z, r1
	TCCR1B = 0;
    2ba8:	ee e4       	ldi	r30, 0x4E	; 78
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	10 82       	st	Z, r1
	TCNT1 = 0;
    2bae:	ec e4       	ldi	r30, 0x4C	; 76
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	11 82       	std	Z+1, r1	; 0x01
    2bb4:	10 82       	st	Z, r1
	OCR1A = 0;
    2bb6:	ea e4       	ldi	r30, 0x4A	; 74
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	11 82       	std	Z+1, r1	; 0x01
    2bbc:	10 82       	st	Z, r1

	/* Disable the Timer1 Compare interrupt */
	TIMSK &= ~(1<<OCIE1A);
    2bbe:	a9 e5       	ldi	r26, 0x59	; 89
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e9 e5       	ldi	r30, 0x59	; 89
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	8f 7e       	andi	r24, 0xEF	; 239
    2bca:	8c 93       	st	X, r24
}
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <Timer1_setCallBack+0x6>
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	9a 83       	std	Y+2, r25	; 0x02
    2bde:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	9a 81       	ldd	r25, Y+2	; 0x02
    2be4:	90 93 95 01 	sts	0x0195, r25
    2be8:	80 93 94 01 	sts	0x0194, r24
}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2bf6:	0f 93       	push	r16
    2bf8:	1f 93       	push	r17
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <TWI_init+0xa>
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	9a 83       	std	Y+2, r25	; 0x02
    2c06:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: Using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (uint8)(F_CPU/((float32)2UL*(Config_Ptr->bit_rate)))-8;
    2c08:	00 e2       	ldi	r16, 0x20	; 32
    2c0a:	10 e0       	ldi	r17, 0x00	; 0
    2c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c10:	81 81       	ldd	r24, Z+1	; 0x01
    2c12:	92 81       	ldd	r25, Z+2	; 0x02
    2c14:	cc 01       	movw	r24, r24
    2c16:	a0 e0       	ldi	r26, 0x00	; 0
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	cd 01       	movw	r24, r26
    2c1e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2c22:	9b 01       	movw	r18, r22
    2c24:	ac 01       	movw	r20, r24
    2c26:	ca 01       	movw	r24, r20
    2c28:	b9 01       	movw	r22, r18
    2c2a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	9c 01       	movw	r18, r24
    2c34:	ad 01       	movw	r20, r26
    2c36:	60 e0       	ldi	r22, 0x00	; 0
    2c38:	74 e2       	ldi	r23, 0x24	; 36
    2c3a:	84 e7       	ldi	r24, 0x74	; 116
    2c3c:	99 e4       	ldi	r25, 0x49	; 73
    2c3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	bc 01       	movw	r22, r24
    2c48:	cd 01       	movw	r24, r26
    2c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	88 50       	subi	r24, 0x08	; 8
    2c54:	f8 01       	movw	r30, r16
    2c56:	80 83       	st	Z, r24
	TWSR = 0x00;
    2c58:	e1 e2       	ldi	r30, 0x21	; 33
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address); // my address
    2c5e:	a2 e2       	ldi	r26, 0x22	; 34
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	e9 81       	ldd	r30, Y+1	; 0x01
    2c64:	fa 81       	ldd	r31, Y+2	; 0x02
    2c66:	80 81       	ld	r24, Z
    2c68:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2c6a:	e6 e5       	ldi	r30, 0x56	; 86
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	84 e0       	ldi	r24, 0x04	; 4
    2c70:	80 83       	st	Z, r24
}
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	1f 91       	pop	r17
    2c7c:	0f 91       	pop	r16
    2c7e:	08 95       	ret

00002c80 <TWI_start>:

void TWI_start(void)
{
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2c88:	e6 e5       	ldi	r30, 0x56	; 86
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	84 ea       	ldi	r24, 0xA4	; 164
    2c8e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2c90:	e6 e5       	ldi	r30, 0x56	; 86
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	88 23       	and	r24, r24
    2c98:	dc f7       	brge	.-10     	; 0x2c90 <TWI_start+0x10>
}
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <TWI_stop>:

void TWI_stop(void)
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2ca8:	e6 e5       	ldi	r30, 0x56	; 86
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	84 e9       	ldi	r24, 0x94	; 148
    2cae:	80 83       	st	Z, r24
}
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	0f 92       	push	r0
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2cc2:	e3 e2       	ldi	r30, 0x23	; 35
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2cca:	e6 e5       	ldi	r30, 0x56	; 86
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	84 e8       	ldi	r24, 0x84	; 132
    2cd0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2cd2:	e6 e5       	ldi	r30, 0x56	; 86
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	88 23       	and	r24, r24
    2cda:	dc f7       	brge	.-10     	; 0x2cd2 <TWI_writeByte+0x1c>
}
    2cdc:	0f 90       	pop	r0
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2cec:	e6 e5       	ldi	r30, 0x56	; 86
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	84 ec       	ldi	r24, 0xC4	; 196
    2cf2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2cf4:	e6 e5       	ldi	r30, 0x56	; 86
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	88 23       	and	r24, r24
    2cfc:	dc f7       	brge	.-10     	; 0x2cf4 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2cfe:	e3 e2       	ldi	r30, 0x23	; 35
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
}
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2d12:	e6 e5       	ldi	r30, 0x56	; 86
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	84 e8       	ldi	r24, 0x84	; 132
    2d18:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2d1a:	e6 e5       	ldi	r30, 0x56	; 86
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	88 23       	and	r24, r24
    2d22:	dc f7       	brge	.-10     	; 0x2d1a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2d24:	e3 e2       	ldi	r30, 0x23	; 35
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
}
    2d2a:	cf 91       	pop	r28
    2d2c:	df 91       	pop	r29
    2d2e:	08 95       	ret

00002d30 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2d30:	df 93       	push	r29
    2d32:	cf 93       	push	r28
    2d34:	0f 92       	push	r0
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2d3a:	e1 e2       	ldi	r30, 0x21	; 33
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	88 7f       	andi	r24, 0xF8	; 248
    2d42:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d46:	0f 90       	pop	r0
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2d4e:	df 93       	push	r29
    2d50:	cf 93       	push	r28
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <UART_init+0x6>
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <UART_init+0x8>
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	9c 83       	std	Y+4, r25	; 0x04
    2d5c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2d5e:	1a 82       	std	Y+2, r1	; 0x02
    2d60:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2d62:	eb e2       	ldi	r30, 0x2B	; 43
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	82 e0       	ldi	r24, 0x02	; 2
    2d68:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)|((((Config_Ptr->bit_data)&0b0100)>>2)<<UCSZ2);
    2d6a:	aa e2       	ldi	r26, 0x2A	; 42
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d70:	fc 81       	ldd	r31, Y+4	; 0x04
    2d72:	80 81       	ld	r24, Z
    2d74:	84 70       	andi	r24, 0x04	; 4
    2d76:	88 61       	ori	r24, 0x18	; 24
    2d78:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (((Config_Ptr->bit_data)&0b0011)<<UCSZ0);
    2d7a:	a0 e4       	ldi	r26, 0x40	; 64
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d80:	fc 81       	ldd	r31, Y+4	; 0x04
    2d82:	80 81       	ld	r24, Z
    2d84:	88 2f       	mov	r24, r24
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	83 70       	andi	r24, 0x03	; 3
    2d8a:	90 70       	andi	r25, 0x00	; 0
    2d8c:	88 0f       	add	r24, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	80 68       	ori	r24, 0x80	; 128
    2d92:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr->stop_bit)<<USBS) | ((Config_Ptr->parity)<<UPM0);
    2d94:	a0 e4       	ldi	r26, 0x40	; 64
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	e0 e4       	ldi	r30, 0x40	; 64
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	38 2f       	mov	r19, r24
    2da0:	eb 81       	ldd	r30, Y+3	; 0x03
    2da2:	fc 81       	ldd	r31, Y+4	; 0x04
    2da4:	82 81       	ldd	r24, Z+2	; 0x02
    2da6:	88 2f       	mov	r24, r24
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	88 0f       	add	r24, r24
    2dac:	99 1f       	adc	r25, r25
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	88 0f       	add	r24, r24
    2db4:	99 1f       	adc	r25, r25
    2db6:	28 2f       	mov	r18, r24
    2db8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dba:	fc 81       	ldd	r31, Y+4	; 0x04
    2dbc:	81 81       	ldd	r24, Z+1	; 0x01
    2dbe:	88 2f       	mov	r24, r24
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	82 95       	swap	r24
    2dc4:	92 95       	swap	r25
    2dc6:	90 7f       	andi	r25, 0xF0	; 240
    2dc8:	98 27       	eor	r25, r24
    2dca:	80 7f       	andi	r24, 0xF0	; 240
    2dcc:	98 27       	eor	r25, r24
    2dce:	82 2b       	or	r24, r18
    2dd0:	83 2b       	or	r24, r19
    2dd2:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2dd4:	eb 81       	ldd	r30, Y+3	; 0x03
    2dd6:	fc 81       	ldd	r31, Y+4	; 0x04
    2dd8:	83 81       	ldd	r24, Z+3	; 0x03
    2dda:	94 81       	ldd	r25, Z+4	; 0x04
    2ddc:	a5 81       	ldd	r26, Z+5	; 0x05
    2dde:	b6 81       	ldd	r27, Z+6	; 0x06
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	aa 1f       	adc	r26, r26
    2de6:	bb 1f       	adc	r27, r27
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	aa 1f       	adc	r26, r26
    2dee:	bb 1f       	adc	r27, r27
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	aa 1f       	adc	r26, r26
    2df6:	bb 1f       	adc	r27, r27
    2df8:	9c 01       	movw	r18, r24
    2dfa:	ad 01       	movw	r20, r26
    2dfc:	80 e4       	ldi	r24, 0x40	; 64
    2dfe:	92 e4       	ldi	r25, 0x42	; 66
    2e00:	af e0       	ldi	r26, 0x0F	; 15
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <__udivmodsi4>
    2e0c:	da 01       	movw	r26, r20
    2e0e:	c9 01       	movw	r24, r18
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	9a 83       	std	Y+2, r25	; 0x02
    2e14:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2e16:	e0 e4       	ldi	r30, 0x40	; 64
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1e:	89 2f       	mov	r24, r25
    2e20:	99 27       	eor	r25, r25
    2e22:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e24:	e9 e2       	ldi	r30, 0x29	; 41
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	80 83       	st	Z, r24
}
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	0f 92       	push	r0
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2e46:	eb e2       	ldi	r30, 0x2B	; 43
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	88 2f       	mov	r24, r24
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	80 72       	andi	r24, 0x20	; 32
    2e52:	90 70       	andi	r25, 0x00	; 0
    2e54:	00 97       	sbiw	r24, 0x00	; 0
    2e56:	b9 f3       	breq	.-18     	; 0x2e46 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2e58:	ec e2       	ldi	r30, 0x2C	; 44
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2e60:	0f 90       	pop	r0
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2e70:	eb e2       	ldi	r30, 0x2B	; 43
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	88 23       	and	r24, r24
    2e78:	dc f7       	brge	.-10     	; 0x2e70 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2e7a:	ec e2       	ldi	r30, 0x2C	; 44
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
}
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	08 95       	ret

00002e86 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <UART_sendString+0x6>
    2e8c:	0f 92       	push	r0
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	9b 83       	std	Y+3, r25	; 0x03
    2e94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e96:	19 82       	std	Y+1, r1	; 0x01
    2e98:	0e c0       	rjmp	.+28     	; 0x2eb6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	e2 0f       	add	r30, r18
    2ea8:	f3 1f       	adc	r31, r19
    2eaa:	80 81       	ld	r24, Z
    2eac:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <UART_sendByte>
		i++;
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	8f 5f       	subi	r24, 0xFF	; 255
    2eb4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	e2 0f       	add	r30, r18
    2ec4:	f3 1f       	adc	r31, r19
    2ec6:	80 81       	ld	r24, Z
    2ec8:	88 23       	and	r24, r24
    2eca:	39 f7       	brne	.-50     	; 0x2e9a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	cf 91       	pop	r28
    2ed4:	df 91       	pop	r29
    2ed6:	08 95       	ret

00002ed8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2ed8:	0f 93       	push	r16
    2eda:	1f 93       	push	r17
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	00 d0       	rcall	.+0      	; 0x2ee2 <UART_receiveString+0xa>
    2ee2:	0f 92       	push	r0
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	9b 83       	std	Y+3, r25	; 0x03
    2eea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eec:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	28 2f       	mov	r18, r24
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef8:	8c 01       	movw	r16, r24
    2efa:	02 0f       	add	r16, r18
    2efc:	13 1f       	adc	r17, r19
    2efe:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
    2f02:	f8 01       	movw	r30, r16
    2f04:	80 83       	st	Z, r24
    2f06:	0f c0       	rjmp	.+30     	; 0x2f26 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	8f 5f       	subi	r24, 0xFF	; 255
    2f0c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	28 2f       	mov	r18, r24
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	8a 81       	ldd	r24, Y+2	; 0x02
    2f16:	9b 81       	ldd	r25, Y+3	; 0x03
    2f18:	8c 01       	movw	r16, r24
    2f1a:	02 0f       	add	r16, r18
    2f1c:	13 1f       	adc	r17, r19
    2f1e:	0e 94 34 17 	call	0x2e68	; 0x2e68 <UART_recieveByte>
    2f22:	f8 01       	movw	r30, r16
    2f24:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f30:	fc 01       	movw	r30, r24
    2f32:	e2 0f       	add	r30, r18
    2f34:	f3 1f       	adc	r31, r19
    2f36:	80 81       	ld	r24, Z
    2f38:	83 32       	cpi	r24, 0x23	; 35
    2f3a:	31 f7       	brne	.-52     	; 0x2f08 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	28 2f       	mov	r18, r24
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	9b 81       	ldd	r25, Y+3	; 0x03
    2f46:	fc 01       	movw	r30, r24
    2f48:	e2 0f       	add	r30, r18
    2f4a:	f3 1f       	adc	r31, r19
    2f4c:	10 82       	st	Z, r1
}
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	1f 91       	pop	r17
    2f5a:	0f 91       	pop	r16
    2f5c:	08 95       	ret

00002f5e <__udivmodsi4>:
    2f5e:	a1 e2       	ldi	r26, 0x21	; 33
    2f60:	1a 2e       	mov	r1, r26
    2f62:	aa 1b       	sub	r26, r26
    2f64:	bb 1b       	sub	r27, r27
    2f66:	fd 01       	movw	r30, r26
    2f68:	0d c0       	rjmp	.+26     	; 0x2f84 <__udivmodsi4_ep>

00002f6a <__udivmodsi4_loop>:
    2f6a:	aa 1f       	adc	r26, r26
    2f6c:	bb 1f       	adc	r27, r27
    2f6e:	ee 1f       	adc	r30, r30
    2f70:	ff 1f       	adc	r31, r31
    2f72:	a2 17       	cp	r26, r18
    2f74:	b3 07       	cpc	r27, r19
    2f76:	e4 07       	cpc	r30, r20
    2f78:	f5 07       	cpc	r31, r21
    2f7a:	20 f0       	brcs	.+8      	; 0x2f84 <__udivmodsi4_ep>
    2f7c:	a2 1b       	sub	r26, r18
    2f7e:	b3 0b       	sbc	r27, r19
    2f80:	e4 0b       	sbc	r30, r20
    2f82:	f5 0b       	sbc	r31, r21

00002f84 <__udivmodsi4_ep>:
    2f84:	66 1f       	adc	r22, r22
    2f86:	77 1f       	adc	r23, r23
    2f88:	88 1f       	adc	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	1a 94       	dec	r1
    2f8e:	69 f7       	brne	.-38     	; 0x2f6a <__udivmodsi4_loop>
    2f90:	60 95       	com	r22
    2f92:	70 95       	com	r23
    2f94:	80 95       	com	r24
    2f96:	90 95       	com	r25
    2f98:	9b 01       	movw	r18, r22
    2f9a:	ac 01       	movw	r20, r24
    2f9c:	bd 01       	movw	r22, r26
    2f9e:	cf 01       	movw	r24, r30
    2fa0:	08 95       	ret

00002fa2 <__prologue_saves__>:
    2fa2:	2f 92       	push	r2
    2fa4:	3f 92       	push	r3
    2fa6:	4f 92       	push	r4
    2fa8:	5f 92       	push	r5
    2faa:	6f 92       	push	r6
    2fac:	7f 92       	push	r7
    2fae:	8f 92       	push	r8
    2fb0:	9f 92       	push	r9
    2fb2:	af 92       	push	r10
    2fb4:	bf 92       	push	r11
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	ca 1b       	sub	r28, r26
    2fcc:	db 0b       	sbc	r29, r27
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	09 94       	ijmp

00002fda <__epilogue_restores__>:
    2fda:	2a 88       	ldd	r2, Y+18	; 0x12
    2fdc:	39 88       	ldd	r3, Y+17	; 0x11
    2fde:	48 88       	ldd	r4, Y+16	; 0x10
    2fe0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fe2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fe4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fe6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fe8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fea:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fec:	b9 84       	ldd	r11, Y+9	; 0x09
    2fee:	c8 84       	ldd	r12, Y+8	; 0x08
    2ff0:	df 80       	ldd	r13, Y+7	; 0x07
    2ff2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ff4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ff6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ff8:	1b 81       	ldd	r17, Y+3	; 0x03
    2ffa:	aa 81       	ldd	r26, Y+2	; 0x02
    2ffc:	b9 81       	ldd	r27, Y+1	; 0x01
    2ffe:	ce 0f       	add	r28, r30
    3000:	d1 1d       	adc	r29, r1
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	ed 01       	movw	r28, r26
    300e:	08 95       	ret

00003010 <_exit>:
    3010:	f8 94       	cli

00003012 <__stop_program>:
    3012:	ff cf       	rjmp	.-2      	; 0x3012 <__stop_program>
